<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>轩辕Rowboat的博客</title>
  <subtitle>前端路上 | PPT爱好者 | 所知甚少，唯善学。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lxchuan12.github.io/"/>
  <updated>2017-01-23T14:19:18.341Z</updated>
  <id>https://lxchuan12.github.io/</id>
  
  <author>
    <name>轩辕Rowboat</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2016年度总结，毕业，工作</title>
    <link href="https://lxchuan12.github.io/2017/01/07/20170107-2016-annual-summary/"/>
    <id>https://lxchuan12.github.io/2017/01/07/20170107-2016-annual-summary/</id>
    <published>2017-01-07T13:40:38.000Z</published>
    <updated>2017-01-23T14:19:18.341Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>1月4日的时候就写好了这篇文章，发年度总结说说的同时，在想有必要在空间发这篇日志，因为是使用markdown写的，排版是个问题，可以发表在简书啊（但是又包含很多个人信息）,后来觉得就没发。现在想想好像基本都是用手机看的，排版并不是那么重要，还是发出来吧，可能对读者有些启发。</p>
</blockquote>
<p>时间总是那么的快。2014年开始，就有了写个人年度总结的习惯。如果把2015年定义成<strong>PPT年</strong>，那么2016年则可以说是<strong>开发年</strong>。这一年相对比较平凡，还算满意。</p>
<p>2015年的年底，准备好了提前答辩的相关事宜。2016年元旦放假三天，在学校的课题组办公室翻看着微博（微博有时间轴，可以看到每个月都发了什么，这也就是为什么我比较喜欢发微博的原因之一），做着PPT，用思维导图工具Xmind，写着年度总结——<a href="http://user.qzone.qq.com/1019963719/blog/1451822274" target="_blank" rel="external">《2015年总结，淡化旧标签，无惧未来 》</a>。</p>
<p>翻看2016年的微博，看到大年初三的一条这样写着：</p>
<blockquote>
<p>猴年初三（2月10日），去舅舅家拜年。舅舅极力要求我在他家住，说以后工作了，忙着赚钱，更是没什么时间住了。舅妈以为我还是21岁……然而过完年，虚岁就是24岁了，其实明明是22岁半。好吧，确实老了。到了尴尬的年纪。按这样算，还有6年就30岁了……这六年要赚好多钱。</p>
</blockquote>
<p>最近听喜马拉雅付费精品中关于年度计划的，提到人生的8个方面,分别是身体健康、财务理财、人际社群、工作事业、家庭生活、学习成长、体验突破、休闲放松。于是根据这个把自己的2016年总结整理了一张思维导图和仿支付宝年账单做了一份年度总结PPT。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="./img/xmind.png" alt="2016年度总结思维导图" title="">
                </div>
                <div class="image-caption">2016年度总结思维导图</div>
            </figure><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="./img/ppt.jpg" alt="2016年度总结PPT" title="">
                </div>
                <div class="image-caption">2016年度总结PPT</div>
            </figure></p>
<h3 id="未来的路在哪"><a href="#未来的路在哪" class="headerlink" title="未来的路在哪"></a>未来的路在哪</h3><p>1、看周围同事，基本就能看到自己几年后是过着怎样的生活。试想这样的生活是不是自己想要的，如果不是又将做什么来改变呢。老板有时给我们开会也会问：一个员工加入一家公司终究会离开，你是否会认真考虑【我会在这里干多少年？想成为什么样的人】。<br>2、再看看自己的校友，在移动互联网领域比较出名的有杜瑶，CSS参考手册作者（css.doyoe.com），去哪儿网前端技术总监。猎豹移动副总裁陈勇。柴魁元,乐动卓越科技有限公司CTO等等。<br>3、如果仅从开发这条路来看，很容易看到自己的天花板。而且业界都一致认为，程序员是吃青春饭，看自己身边同事就知道年长的非常少。G20放假那次回家，跟老爸聊天，老爸聊到年轻的时候赚点钱容易，年纪大了就不容易了。何况你这工作吃的是青春饭，以后怎么办。我说：到时候再看，转行吧。比如这篇文章：<a href="http://blog.csdn.net/harderxin/article/details/39210779" target="_blank" rel="external">一位工作十年程序员给的忠告</a></p>
<h3 id="打造个人品牌（知识型IP）"><a href="#打造个人品牌（知识型IP）" class="headerlink" title="打造个人品牌（知识型IP）"></a>打造个人品牌（知识型IP）</h3><p>《程序员必读的职业规划书》有提到打造个人品牌；公司年中大会上，我司创始人（前阿里副总裁）也谈到IP；参加的网红经济论坛上更是对网红（IP）有一些深层次的解读；《和秋叶一起学职场技能》书中也有提到如何打造个人品牌。<br>虽然，以前的积累，微博粉丝超过了1千，微信好友快1000，两个QQ的好友基本不重复，超过1400，但这些都是最低层次的无门槛自媒体。</p>
<p>我这名字，在我关注的圈子中，知道比较有名的大咖有小川叔。<br>在公司叫花名（轩辕），于是把我在网络上的各种账号的昵称统一成<strong>轩辕Rowboat</strong>，也算是打造个人品牌的开始吧。</p>
<p>2016年，这一年出现了很多<strong>知识变现</strong>的产品，比如：微信公众号打赏，简书打赏，知乎live，分答，在行，微博的问答，喜马拉雅付费精品等。</p>
<p>原是程序员的彭小六就凭借着知识变现这一红利月入6位数。比如：<br><a href="http://www.jianshu.com/p/7d053c85c0bd" target="_blank" rel="external">《凭着这3个字，我上个月挣了6位数》</a><br>也有程序员靠之前人气等多方面的积累，开一次知乎live，分享知识，就能赚1万+。<br>之前在公众号看到的文章，<a href="http://mp.weixin.qq.com/s?__biz=MzAxNzEyODA2NQ==&amp;mid=2650183908&amp;idx=1&amp;sn=8a1225cdef6acb0cf17eab426b3e899b&amp;chksm=83e8770ab49ffe1cb25da7c55158f078e7ef2921ea46805bb82845fe88fec85e04232f6f6364&amp;scene=0#rd" target="_blank" rel="external">《月入10W真的很难吗？》</a><br>清华大学毕业阿何的一篇文章：<a href="http://mp.weixin.qq.com/s?__biz=MzIwODM3MzU1NA==&amp;mid=2247483996&amp;idx=1&amp;sn=e0cb929d9ae282f23c1147e81c81c3fc&amp;chksm=97055001a072d9179d1bb5e1573269c4c4393ee8e347c74f88de08596ce0c2ac5fceb8163c35&amp;scene=0#rd" target="_blank" rel="external">《年轻人，如何挣到自己第一个100万？》</a><br>文尾总结：</p>
<blockquote>
<p>总结一下，对年轻人来说可操作性最强又能挣很多钱的方法，其实就三个步骤：<br>第一：找到自己的一个特长，把它培养得足够出色<br>第二：找到适合你的特长，又有足够用户注意的平台<br>第三：在这个平台上深耕细作，打造品牌，获得收入<br>每个人都有自己的特长，只要长时间持续打磨，总有一天能到“可以卖钱”的水平。</p>
</blockquote>
<p>虽然这类文章有点夸大其词，鸡汤文的感觉，但也不无道理。总之这是赚钱思维的一种转变。</p>
<p>PPT圈内，布衣公子从2012年开始分享自己的PPT作品，他的作品影响着很多人。后来收费，一份作品就能买到上万元。这是他分享他的故事时分享的五个故事。<br><a href="http://mp.weixin.qq.com/s?__biz=MjM5MjQyODY1NA==&amp;mid=2654123389&amp;idx=1&amp;sn=2ccfddafe2502ae5a63c1ce6059afa50&amp;chksm=bd60727c8a17fb6a9e57e94be91decf921dc1778e0a38b32dadc8c5e8007fe6333895cd631b2&amp;scene=0#rd" target="_blank" rel="external">改变我命运的五个故事-布衣公子</a><br>要在大城市生活，培养一种或几种可以「变现」的能力，并且这些能力不受地域的限制，似乎变得重要起来。</p>
<h3 id="时间也是资源"><a href="#时间也是资源" class="headerlink" title="时间也是资源"></a>时间也是资源</h3><p>时间管理是永恒的话题，这篇文章写的挺好：<a href="http://weibo.com/ttarticle/p/show?id=2309404011377055416316" target="_blank" rel="external">毕业三年，你如何与同龄人拉开差距？</a></p>
<h3 id="世界发展太快，需要不断学习"><a href="#世界发展太快，需要不断学习" class="headerlink" title="世界发展太快，需要不断学习"></a>世界发展太快，需要不断学习</h3><p>世界在发展，以前的很多岗位都不存在了。而且未来很多工作可以由机器人来完成，而且机器人比人类做得更优秀。另外年轻人的接触新鲜事物的学习能力相对比较强。那么持续学习，变得更加的重要了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;1月4日的时候就写好了这篇文章，发年度总结说说的同时，在想有必要在空间发这篇日志，因为是使用markdown写的，排版是个问题，可以发表在简书啊（但是又包含很多个人信息）,后来觉得就没发。现在想想好像基本都是用手机看的，排版并不是那么重要，还是发出
    
    </summary>
    
      <category term="年度总结" scheme="https://lxchuan12.github.io/categories/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="年度总结" scheme="https://lxchuan12.github.io/tags/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>提高效率的webstorm技巧</title>
    <link href="https://lxchuan12.github.io/2016/12/07/20161207-webstrom-skill/"/>
    <id>https://lxchuan12.github.io/2016/12/07/20161207-webstrom-skill/</id>
    <published>2016-12-07T14:48:18.000Z</published>
    <updated>2016-12-10T15:24:24.733Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>webstrom有一些基本的操作</strong><br>1、快速查找<br>2、代码补全<br>3、版本控制<br>4、本地历史<br>5、即时模板<br>6、光标<br>7、代码格式化等</p>
</blockquote>
<h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><p>双击shift搜索：快速查找。文件，函数名等。</p>
<p>template模板可以设置。</p>
<p>光标定位到相关位置。比如tilte,body<br>每次修改的历史：local  history。</p>
<p>多光标的功能。<br>1、查找替换，ctrl+R<br>2、alt+鼠标选择。</p>
<p> 3、alt+单击。</p>
<p>4、格式化代码：ctrl+alt+L</p>
<p> 菜单，code——reformat code。</p>
<p>5、快捷键可以自定义设置。 可以通过快捷键名称来查找。也可以通过怎么使用来查找快捷键，然后对其进行修改。<br>webstrom预设了许多快捷键，可以自己选择。与原来的IDE快捷键相同。</p>
<h4 id="Emmet"><a href="#Emmet" class="headerlink" title="Emmet"></a><strong>Emmet</strong></h4><p>详情参见：<br><a href="http://www.iteye.com/news/27580" target="_blank" rel="external">Emmet：HTML/CSS代码快速编写神器</a></p>
<p>1、Tab键，缩写的补全<br>2、li中间写完，按enter键，光标直接定位到接下来的一个。<br>3、嵌套结构：<br>>  +  ^      <em>  ()<br>子元素，同级，往上一级，重复，（）<br>4、属性<br># （id）. （类）[]自定义属性<br>div#container.container<br> $<br>ul&gt;li.item-$</em>5<br>{}文本<br>p{click me}<br>lorem没有意义的文字。用于排版。<br>用法：lorem100<br>注意事项：光标定位在最后（最想展开的）。<br>不能有空格。<br>比如：<br>css中，bt:border-top<br>m10:margin:10px;<br>m10-20:margin:10px 20px;<br>bdrs10:border-radius:10px;<br>df：display：flex;</p>
<p> 设置前缀。<br>默认关闭这个开关。可以用其他工具来实现。、<br>html:5,sublime text等编辑器可以安装emmet插件。</p>
<h4 id="进阶操作一——常见快捷键"><a href="#进阶操作一——常见快捷键" class="headerlink" title="进阶操作一——常见快捷键"></a>进阶操作一——常见快捷键</h4><p>操作，快捷键。</p>
<p>光标放在相对应的标签上，按F1，可以显示相关的描述，关联的站点等。<br>js也是如此，参数列表等。<br>比如</p>
<p></p><p>hello world</p><br>要包裹在一个div中，选择这代码，ctrl+alt+T,选择第一个，输入div就变包裹在div中。<p></p>
<p>——7<br>1、注释与取消注释<br>ctrl+/<br>2、选择<br>选中子元素，alt+上/下<br>3、粘贴<br>ctrl+shift+V，最近粘贴板中的内容。<br>4、删除当前行，<br>ctrl+退格键。<br>5、当前行上、下面加入一行<br>上面加入一行。ctrl+alt+enter<br>下面加入一行。ctrl+shift+enter.<br>这样不需要刻意定位光标的位置。其实键盘上有（home,end)键。<br>6、折叠代码，ctrl++（展开），ctrl+-(折叠)<br>ctrl+shift++,ctrl+shift+-,所有可以折叠的地方全部折叠。在css中，js,html中都是如此。<br>7、相邻位置代码换位置。<br>alt+shift+上、下键。选中一段代码也可以让其上下移动。<br>8、闭合标签，定位在两个标签位置。ctrl+m键。引号，括号，{}等也适用。window下好像无效。<br>9、前进、后退到上一次编辑的地方。ctrl+alt+左右键。<br>10、转到上一次编辑的地方。ctrl+shift+backspace键。<br>11、最近使用的文件，ctrl+E<br>——8<br>1、img标签，知道图片宽和高。<img src="">方式1、输入路径，宽和高，按住Tab键可以自动补全。<br>方式2、放在图片上，按F1图片预览，固定预览框。或者悬浮在文字上方。<br>方式3、按住shift，鼠标浮在路径上，就可以看到图片的预览了。<br>2、color:#999;色块上点击即可选择修改颜色。亮度（竖向）和透明度（横向）可以调节。</p>
<h4 id="进阶操作二——重命名"><a href="#进阶操作二——重命名" class="headerlink" title="进阶操作二——重命名"></a>进阶操作二——重命名</h4><p>1、重命名，</p>
<p></p><p>hello world</p>，把光标放在标签上，<br>ctrl+T,第一个就是重命名。window下试用无效。shift+F6重命名。2、其实直接写即可呀。<br>对话框会显示有相同的地方，右击，排查或包含include，exclude.点击执行，do refactor。侧边有一些功能。<br>2、函数名称，参数重命名。<br>html,css,js中都可以重命名，类名，颜色，可以预览，避免把一些框架库里的相同东西修改了。、<br>文件或文件夹也可以重命名。所有引用的地方也被修改了。<p></p>
<h4 id="进阶操作三——代码检查"><a href="#进阶操作三——代码检查" class="headerlink" title="进阶操作三——代码检查"></a>进阶操作三——代码检查</h4><p>webstrom使用了静态代码分析。<br>不仅检查编译错误，<br>而且代码效率低下，未使用的代码，非本地化的字符串，无法解析的代码，内存泄露，甚至编写问题等等。<br>提示分为：错误，警告和正确。红色，橙黄色，或者绿色。<br>一般来说是对整个项目进行检查的。也可以自己配置检查的范围。<br>也可以自己运行检查。–&gt;code-&gt;Inspect code</p>
<p>webstrom检查出来的不代表真的有错，还需要人工自己检查。<br>一般在文件中，F2键可以在各个错误中切换。<br>alt+enter，可以看到提示。（右侧的提示）<br>规则自己设置，搜索inspec</p>
<p>js是静态的校验。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;webstrom有一些基本的操作&lt;/strong&gt;&lt;br&gt;1、快速查找&lt;br&gt;2、代码补全&lt;br&gt;3、版本控制&lt;br&gt;4、本地历史&lt;br&gt;5、即时模板&lt;br&gt;6、光标&lt;br&gt;7、代码格式化等&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h
    
    </summary>
    
      <category term="tool" scheme="https://lxchuan12.github.io/categories/tool/"/>
    
    
      <category term="tool" scheme="https://lxchuan12.github.io/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>数组方法splice和数组去重</title>
    <link href="https://lxchuan12.github.io/2016/10/29/20161029-array-splice-uniq/"/>
    <id>https://lxchuan12.github.io/2016/10/29/20161029-array-splice-uniq/</id>
    <published>2016-10-29T14:08:18.000Z</published>
    <updated>2016-10-29T15:47:36.020Z</updated>
    
    <content type="html"><![CDATA[<p>splice方法有删除、替换、添加的功能。修改原数组……<a id="more"></a></p>
<blockquote>
<p>语法：<br>array.splice(start, deleteCount[, item1[, item2[, …]]])</p>
</blockquote>
<p><strong>start</strong><br>整数，如果大于数组长度，itemN有值则为添加否则不添加。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var arr=[1,2,3];</div><div class="line">//arr.splice(4,2);</div><div class="line">//console.log(arr);//[1,2,3]</div><div class="line">arr.splice(4,2,2);</div><div class="line">console.log(arr);//[1,2,3,2]</div></pre></td></tr></table></figure></p>
<p>如果为负数，则从数组末尾倒数第一位。<br><strong>detecount</strong><br>整数，表示要移除的数组元素的个数。如果 deleteCount 是 0，则不移除元素。这种情况下，至少应添加一个新元素。如果 deleteCount 大于start 之后的元素的总数，则从 start 后面的元素都将被删除（含第 start 位）。<br><strong>itemN</strong><br>要添加进数组的元素。如果不指定，则 splice() 只删除数组元素。<br><strong>返回值</strong><br>由被删除的元素组成的一个数组。未删除就是返回空数组。</p>
<hr>
<p><strong>删除</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var arr=[1,2,3];</div><div class="line">arr.splice(1,2);</div><div class="line">console.log(arr);//[1]</div></pre></td></tr></table></figure></p>
<p><strong>替换</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var arr=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;];</div><div class="line">arr.splice(1,2,&apos;2&apos;,&apos;3&apos;);</div><div class="line">console.log(arr);//[&apos;a&apos;,&apos;2&apos;,&apos;3&apos;]</div></pre></td></tr></table></figure></p>
<p><strong>添加</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var arr=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;];</div><div class="line">arr.splice(1,0,&apos;2&apos;,&apos;3&apos;);</div><div class="line">console.log(arr);//[&apos;a&apos;,&apos;2&apos;,&apos;3&apos;，&apos;b&apos;,&apos;c&apos;]</div></pre></td></tr></table></figure></p>
<h3 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h3><p><a href="http://www.nowcoder.com/practice/0b5ae9c4a8c546f79e2547c0179bfdc2?tpId=2&amp;tqId=10855&amp;rp=1&amp;ru=/ta/front-end&amp;qru=/ta/front-end/question-ranking" target="_blank" rel="external">题目：牛客网数组去重试题</a><br>为 Array 对象添加一个去除重复项的方法</p>
<blockquote>
<p><strong>输入例子</strong>：[false, true, undefined, null, NaN, 0, 1, {}, {}, ‘a’, ‘a’, NaN].uniq()<br><strong>输出例子</strong>：[false, true, undefined, null, NaN, 0, 1, {}, {}, ‘a’]</p>
</blockquote>
<p><strong>解答</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Array.prototype.uniq = function () &#123;</div><div class="line">    var hasNaN = false;</div><div class="line">    for(var i=0;i&lt;this.length;i++)&#123;</div><div class="line">        if(this[i]!==this[i])hasNaN=true;</div><div class="line">        for(var j=i+1;j&lt;this.length;j++)&#123;</div><div class="line">            if(this[i]===this[j]||(hasNaN&amp;&amp;this[j]!==this[j]))&#123;</div><div class="line">                this.splice(j,1);</div><div class="line">                j--;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return this;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>较复杂的数组，一般思路是先判断类型再做去重。<br>参考资料：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/splice" target="_blank" rel="external">MDN:Array.prototype.splice()</a><br><a href="http://caibaojian.com/js-splice-element.html" target="_blank" rel="external">js删除数组里的某个元素</a><br><a href="http://blog.jobbole.com/33099/" target="_blank" rel="external">从 JavaScript 数组去重谈性能优化(玉伯)</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;splice方法有删除、替换、添加的功能。修改原数组……
    
    </summary>
    
      <category term="JavaScript" scheme="https://lxchuan12.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://lxchuan12.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>(转)背景图片固定不随内容滚动而滚动</title>
    <link href="https://lxchuan12.github.io/2016/10/16/20161016-background-attachment/"/>
    <id>https://lxchuan12.github.io/2016/10/16/20161016-background-attachment/</id>
    <published>2016-10-16T14:48:38.000Z</published>
    <updated>2016-10-17T12:48:14.594Z</updated>
    
    <content type="html"><![CDATA[<p>有些网站希望将背景图片固定不随内容滚动而滚动，用CSS代码写主要有以下三种写法……<a id="more"></a></p>
<h3 id="第一种：背景附着属性-background-attachment-，代码如下："><a href="#第一种：背景附着属性-background-attachment-，代码如下：" class="headerlink" title="第一种：背景附着属性(background-attachment)，代码如下："></a>第一种：背景附着属性(background-attachment)，代码如下：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;title&gt;背景附着属性 background-attachment&lt;/title&gt;</div><div class="line">&lt;style type=&quot;text/css&quot;&gt;</div><div class="line">body &#123;background-image:url(../images/css_tutorials/background.jpg); background-repeat:no-repeat; background-attachment:fixed&#125;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;/head&gt;</div><div class="line"></div><div class="line">&lt;body&gt;</div><div class="line">&lt;p&gt;这个HTML使用了CSS的background-attachment属性，将背景图片固定，不随内容滚动而滚动。&lt;p&gt;</div><div class="line">&lt;p&gt;背景附着(background-attachment)属性有两个值。一个是scroll，表示随内容滚动而动；一个是fixed，表示固定不动，不受内容滚动影响。缺省值是scroll。&lt;/p&gt;</div><div class="line">&lt;p&gt;background-attachment要和background-image一起用。&lt;/p&gt;</div><div class="line"></div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h3 id="第二种：背景位置属性-background-position-，代码如下："><a href="#第二种：背景位置属性-background-position-，代码如下：" class="headerlink" title="第二种：背景位置属性(background-position)，代码如下："></a>第二种：背景位置属性(background-position)，代码如下：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;title&gt;背景位置属性 background-position&lt;/title&gt;</div><div class="line">&lt;style type=&quot;text/css&quot;&gt;</div><div class="line">body &#123;background-image:url(../images/css_tutorials/background.jpg);background-repeat:no-repeat; background-position:20px 60px&#125;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;p&gt;这个HTML使用了CSS的background-position属性。这个属性和background-image属性连在一起使用，决定了背景图片的最初位置。&lt;/p&gt;</div><div class="line">&lt;p&gt;上面的代码表示背景图片的初始位置距离网页最左面20px，距离网页最上面60px。&lt;/p&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h3 id="第三种：背景属性-background-，代码如下："><a href="#第三种：背景属性-background-，代码如下：" class="headerlink" title="第三种：背景属性(background)，代码如下："></a>第三种：背景属性(background)，代码如下：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;title&gt;背景属性 background&lt;/title&gt;</div><div class="line">&lt;style type=&quot;text/css&quot;&gt;</div><div class="line">body &#123;background:#99FF00 url(../images/css_tutorials/background.jpg) no-repeat fixed 40px 100px&#125;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;/head&gt;</div><div class="line"></div><div class="line">&lt;body&gt;</div><div class="line">&lt;p&gt;这个属性是设置背景相关属性的一种快捷的综合写法， 包括background-color, background-image, background-repeat, backgroundattachment, background-position。&lt;/p&gt;</div><div class="line">&lt;p&gt;这个HTML所用的背景属性表示，网页的背景颜色是翠绿色，背景图片是background.jpg图片，背景图片不重复显示，背景图片不随内容滚动而动，背景图片距离网页最左面40px，距离网页最上面100px。&lt;/p&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p><a href="http://www.1280.cc/article/1806.html" target="_blank" rel="external">原文：背景图片固定不随内容滚动而滚动</a><br>源自<a href="http://www.nowcoder.com/test/question/done?tid=5696897&amp;qid=44708" target="_blank" rel="external">今日头条2017前端工程师实习生笔试题</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">5、下面哪条声明能固定背景图片（）</div><div class="line">正确答案: A   你的答案: A (正确)</div><div class="line"></div><div class="line">background-attachment:fixed;</div><div class="line">background-attachment:scroll;</div><div class="line">background-origin: initial;</div><div class="line">background-clip: initial;</div></pre></td></tr></table></figure></p>
<p>——————————————————————————<br><a href="http://blog.csdn.net/lai_xu/article/details/46954249" target="_blank" rel="external">置换元素与非置换元素</a><br>a) 置换元素：浏览器根据元素的标签和属性，来决定元素的具体显示内容。<br>b) 不可替换元素：(x)html 的大多数元素是不可替换元素，即其内容直接表现给用户端（如浏览器）。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">4、请选出所有的置换元素（）</div><div class="line">正确答案: A B C D   你的答案: A B C D (正确)</div><div class="line"></div><div class="line">A、img</div><div class="line">B、input</div><div class="line">C、textarea</div><div class="line">D、select</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有些网站希望将背景图片固定不随内容滚动而滚动，用CSS代码写主要有以下三种写法……
    
    </summary>
    
      <category term="CSS" scheme="https://lxchuan12.github.io/categories/CSS/"/>
    
    
      <category term="CSS" scheme="https://lxchuan12.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>函数的length属性</title>
    <link href="https://lxchuan12.github.io/2016/10/09/20161009-function-length/"/>
    <id>https://lxchuan12.github.io/2016/10/09/20161009-function-length/</id>
    <published>2016-10-09T13:30:12.000Z</published>
    <updated>2016-10-17T12:50:41.889Z</updated>
    
    <content type="html"><![CDATA[<p>看<a href="http://es6.ruanyifeng.com/#docs/function#函数的length属性" target="_blank" rel="external">《ES6标准入门》中提到函数的length属性</a>，看到有函数的length属性这一说法，其实之前一直都不知道有。并且不知道这个length有何应用……<a id="more"></a>查阅了<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/length" target="_blank" rel="external">MDN Function.length</a>是这样描述的：</p>
<blockquote>
<p>length 是函数对象的一个属性值，指明该函数期望多少个参数，意即形参的个数。数量不包括剩余参数。相比之下，arguments.length 是函数被调用时实际传参的个数。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function test(a,b,c) &#123;&#125;</div><div class="line">test.length // 3</div><div class="line"></div><div class="line">function test(a,b,c,d) &#123;&#125;</div><div class="line">test.length // 4</div></pre></td></tr></table></figure>
<p>看起来很简单，但是也有特殊的，如果函数内部是通过arguments 调用参数，而没有实际定义参数的话，length只会的得到0。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">function test() &#123; console.log( arguments );&#125;</div><div class="line">test.length // 0</div></pre></td></tr></table></figure></p>
<p>这个函数确实可以传入参数，而且内部也调用了参数，但是length却无法得知传入的参数的个数。<br>只能在函数执行的时候通过arguments.length得到实参个数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">function test() &#123; console.log( arguments.length );&#125;</div><div class="line">test(1,2,3); // 输出 3</div><div class="line">test(1,2,3,4); // 输出 4</div></pre></td></tr></table></figure></p>
<p>所以函数的length属性只能得到他的形参个数，而无法得知实参个数。</p>
<p>参考链接：<a href="http://www.cnblogs.com/52cik/p/js-function-length.html?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="external">js小记 function 的 length 属性</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看&lt;a href=&quot;http://es6.ruanyifeng.com/#docs/function#函数的length属性&quot;&gt;《ES6标准入门》中提到函数的length属性&lt;/a&gt;，看到有函数的length属性这一说法，其实之前一直都不知道有。并且不知道这个length有何应用……
    
    </summary>
    
      <category term="JavaScript" scheme="https://lxchuan12.github.io/categories/JavaScript/"/>
    
    
      <category term="js" scheme="https://lxchuan12.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式知识点</title>
    <link href="https://lxchuan12.github.io/2016/09/22/20160922-RegExp/"/>
    <id>https://lxchuan12.github.io/2016/09/22/20160922-RegExp/</id>
    <published>2016-09-22T15:48:12.000Z</published>
    <updated>2016-10-23T15:11:22.449Z</updated>
    
    <content type="html"><![CDATA[<h2 id="正则表达式-RegExp"><a href="#正则表达式-RegExp" class="headerlink" title="正则表达式(RegExp)"></a>正则表达式(RegExp)</h2><h3 id="1、什么是正则表达式"><a href="#1、什么是正则表达式" class="headerlink" title="1、什么是正则表达式"></a>1、什么是正则表达式</h3><p>1.1 什么叫“正则”<br>—规则、模式<br>—强大的字符串匹配工具……<a id="more"></a><br>1.2 正则的写法<br>–new RegExp(“a”,”ig”),需要传参只能用这种方案。<br>–/a/</p>
<h3 id="2、正则表达式常用方法"><a href="#2、正则表达式常用方法" class="headerlink" title="2、正则表达式常用方法"></a>2、正则表达式常用方法</h3><p>2.1 test<br>—字符串判断<br>—返回真假<br>—正则.test(字符串)<br>—例子：是否有不是数字的字符<br>2.2 search<br>字符串搜索<br>–返回出现的位置<br>–字符串.search(正则)<br>–忽略大小写：i——ignore<br>2.3 match<br>获取匹配的项目,<br>–返回数组<br>–量词：+<br>–全局匹配：g——global<br>–例子：找出所有数字<br>2.4 replace<br>替换所有匹配<br>–返回替换后的字符串<br>–字符串.replace(正则,想替换的)<br>–例子：敏感词过滤<br>-例子：统计字符串中每个字符的出现频率<br>/**<br>统计字符串中每个字符的出现频率，返回一个 Object，key 为统计字符，value 为出现频率</p>
<ol>
<li>不限制 key 的顺序</li>
<li>输入的字符串参数不会为空</li>
<li>忽略空白字符<br>输入例子:<br>count(‘hello world’)<br>输出例子:<br>{h: 1, e: 1, l: 3, o: 2, w: 1, r: 1, d: 1}<br>*/<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">function count_2(str) &#123;</div><div class="line">    var obj = &#123;&#125;;</div><div class="line">    // \S:非空白符</div><div class="line">    str.replace(/\S/g,function(s)&#123;</div><div class="line">        !obj[s]?obj[s]=1:obj[s]++;</div><div class="line">    &#125;)</div><div class="line">    return obj;</div><div class="line">&#125;</div><div class="line">console.log(count_2(&apos;hello world&apos;));</div></pre></td></tr></table></figure>
</li>
</ol>
<p>–匹配子项<br>–例子：日期格式化</p>
<h3 id="3、正则表达式字符类"><a href="#3、正则表达式字符类" class="headerlink" title="3、正则表达式字符类"></a>3、正则表达式字符类</h3><p>3.1 任意字符<br>-[abc]<br>–例子：o[usb]t——obt、ost、out<br>3.2 范围<br>-[a-z]、[0-9]<br>–例子：id[0-9]——id0、id5<br>3.3 排除<br>-[^a]<br>–例子：o[^0-9]t——oat、o?t、o t<br>3.4 组合<br>-[a-z0-9A-Z]<br>实例：偷小说<br>过滤HTML标签<br>–自定义innerText方法</p>
<h3 id="4、转义字符"><a href="#4、转义字符" class="headerlink" title="4、转义字符"></a>4、转义字符</h3><p>转义字符<br>.（点）——任意字符<br>\d（[0-9]）、\w（[a-zA-Z0-9_]）、\s（空白符） 、\b（单词边界）<br>\D（[^\d]）、\W（[^\w]）、\S（[^\s]） 、\B（[^\b]）<br>\1    重复子项<br>例子<br>–获取class元素<br>–找重复项最多的字符和个数</p>
<h3 id="5、量词"><a href="#5、量词" class="headerlink" title="5、量词"></a>5、量词</h3><p>5.1 什么是量词<br>出现的次数<br>{n,m}，至少出现n次，最多m次<br>例子：查找QQ号<br>5.2 常用量词<br>{m,n}:m到n次<br>{n,}:至少n次<br>{n}:正好n次<br>*:任意次  {0,}<br>？:零次或一次  {0,1}<br>+:一次或任意次{1,}</p>
<p>正则收尾<br>^ 开始<br>$ 结束<br>例子<br>–是不是QQ号<br>–去掉前后空格</p>
<h3 id="6、常用正则例子"><a href="#6、常用正则例子" class="headerlink" title="6、常用正则例子"></a>6、常用正则例子</h3><p>高级表单校验<br>匹配中文：[\u4e00-\u9fa5]<br>行首行尾空格：^\s<em>|\s</em>$<br>Email：^\w+@[a-z0-9]+(.[a-z]+){1,3}$</p>
<p>网址：[a-zA-z]+://[^\s]*<br>QQ号：[1-9][0-9]{4,9}<br>邮政编码：[1-9]\d{5}<br>身份证：[1-9]\d{14}|[1-9]\d{17}|[1-9]\d{16}x</p>
<h3 id="7、正则与面向对象"><a href="#7、正则与面向对象" class="headerlink" title="7、正则与面向对象"></a>7、正则与面向对象</h3><p>把方法包在一个空间里<br>有人管他叫——命名空间<br>在公司里，把同一类方法，包在一起<br>JSON的使用<br>把之前的方法，包在一起</p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp" target="_blank" rel="external">MDN RegExp</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;正则表达式-RegExp&quot;&gt;&lt;a href=&quot;#正则表达式-RegExp&quot; class=&quot;headerlink&quot; title=&quot;正则表达式(RegExp)&quot;&gt;&lt;/a&gt;正则表达式(RegExp)&lt;/h2&gt;&lt;h3 id=&quot;1、什么是正则表达式&quot;&gt;&lt;a href=&quot;#1、什么是正则表达式&quot; class=&quot;headerlink&quot; title=&quot;1、什么是正则表达式&quot;&gt;&lt;/a&gt;1、什么是正则表达式&lt;/h3&gt;&lt;p&gt;1.1 什么叫“正则”&lt;br&gt;—规则、模式&lt;br&gt;—强大的字符串匹配工具……
    
    </summary>
    
      <category term="JavaScript" scheme="https://lxchuan12.github.io/categories/JavaScript/"/>
    
    
      <category term="RegExp" scheme="https://lxchuan12.github.io/tags/RegExp/"/>
    
  </entry>
  
  <entry>
    <title>gitflow工作流</title>
    <link href="https://lxchuan12.github.io/2016/09/20/20160920-gitflow%20workflow/"/>
    <id>https://lxchuan12.github.io/2016/09/20/20160920-gitflow workflow/</id>
    <published>2016-09-20T09:30:32.000Z</published>
    <updated>2016-09-27T15:06:56.001Z</updated>
    
    <content type="html"><![CDATA[<p>记得今年6月份参加了一次<code>coding</code>技术小馆杭州站的活动，讲的就是<code>git</code>和<code>gitflow</code>相关的。讲师当场也写代码。那是第一次<code>gitflow</code>工作流。那时在想我什么时候也能在舞台上讲开发技术……<a id="more"></a><br>今天就碰到一个关于<code>gitflow</code>工作流的问题。<br>使用<code>sourceTree</code>软件时，建立工作流。一般来说，是切换到<code>master</code>上。再建立工作流。我不小心，直接在<code>develop</code>分支上建了工作流。切换到<code>master</code>分支上。再打<code>hotfix</code>(修复补丁)时，发现无法成功。</p>
<p>谷歌搜索发现解决方案：</p>
<blockquote>
<p>1、找到项目当前文件夹中的<code>.git/config</code>，把配置文件中的<code>gitflow</code>*相关的全部删除。<br>2、关闭再重新打开<code>SourceTree</code>。<br>3、重新在<code>master</code>上建立工作流，再打<code>hotfix</code>。<br>发现成功了。</p>
</blockquote>
<p>参考链接：<a href="http://www.ruanyifeng.com/blog/2015/12/git-workflow.html" target="_blank" rel="external">Git 工作流程</a><br><a href="http://blog.csdn.net/wyc_cs/article/details/51458990" target="_blank" rel="external">Git Flow 在团队中的最佳实践 – SourceTree的使用</a><br><a href="https://blog.sourcetreeapp.com/2012/08/01/smart-branching-with-sourcetree-and-git-flow/" target="_blank" rel="external">Smart branching with SourceTree and Git-flow</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记得今年6月份参加了一次&lt;code&gt;coding&lt;/code&gt;技术小馆杭州站的活动，讲的就是&lt;code&gt;git&lt;/code&gt;和&lt;code&gt;gitflow&lt;/code&gt;相关的。讲师当场也写代码。那是第一次&lt;code&gt;gitflow&lt;/code&gt;工作流。那时在想我什么时候也能在舞台上讲开发技术……
    
    </summary>
    
      <category term="git" scheme="https://lxchuan12.github.io/categories/git/"/>
    
    
      <category term="git" scheme="https://lxchuan12.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>camelCase()转驼峰方法实现</title>
    <link href="https://lxchuan12.github.io/2016/09/15/20160915-camelCase/"/>
    <id>https://lxchuan12.github.io/2016/09/15/20160915-camelCase/</id>
    <published>2016-09-15T09:30:32.000Z</published>
    <updated>2016-09-15T10:28:03.036Z</updated>
    
    <content type="html"><![CDATA[<p>今天中秋节，放假三天。看zeptojs文档时，看到camelCase()转驼峰的方法，就想着也不难，就自己实现了一遍……<a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">function camelCase_1(str)&#123;</div><div class="line">    var i=1,</div><div class="line">        arr = str.split(&apos;-&apos;),</div><div class="line">        len = str.split(&apos;-&apos;).length;</div><div class="line">    var result = arr[0];</div><div class="line">    for(;i&lt;len;i++)&#123;</div><div class="line">        result += arr[i].substring(0,1).toUpperCase()+arr[i].substring(1);</div><div class="line">    &#125;</div><div class="line">    return result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>再看下jquery实现方案：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//str.replace(/^-ms-/,&apos;ms-&apos;)是有IE下有，-ms-前缀的，比如转换成msTransform，而其他转换成首字母大写，如：WebkitTransform</div><div class="line">function camelCase_2(str)&#123;</div><div class="line">    return str.replace(/^-ms-/,&apos;ms-&apos;).replace(/-([\da-z])/gi,function(all,letter)&#123;</div><div class="line">        return letter.toUpperCase();</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>再看zeptojs实现方案：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//zepto.js实现方式：没处理-ms-，兼容性IE10+，但依旧有很多IE10依旧要加-ms-前缀的css3属性。为啥zeptojs没实现呢，难道还没碰到这个bug？</div><div class="line">//并且，空字符串写toUpperCase()依旧是空字符串。所以不需要写三目运算。</div><div class="line">function camelCase_3(str)&#123; </div><div class="line">    return str.replace(/-+(.)?/g, function(match, chr)&#123; return chr ? chr.toUpperCase() : &apos;&apos; &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>测试：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var webkitstr = &apos;-webkit-transfrom&apos;;</div><div class="line">var msstr = &apos;-ms-transfrom&apos;;</div><div class="line">console.log(camelCase_1(webkitstr));//WebkitTransfrom</div><div class="line">console.log(camelCase_1(msstr));    //MsTransfrom</div><div class="line">console.log(camelCase_2(webkitstr));  //WebkitTransfrom</div><div class="line">console.log(camelCase_2(msstr));    //msTransfrom</div><div class="line">console.log(camelCase_3(webkitstr));//WebkitTransfrom</div><div class="line">console.log(camelCase_3(msstr));    //MsTransfrom</div></pre></td></tr></table></figure></p>
<p>看到这里，其实很想给zepto提pull request的。但还是没有提。</p>
<p>小结：分析jquery/zeptojs源码，发现能学到很多。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天中秋节，放假三天。看zeptojs文档时，看到camelCase()转驼峰的方法，就想着也不难，就自己实现了一遍……
    
    </summary>
    
      <category term="JavaScript" scheme="https://lxchuan12.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://lxchuan12.github.io/tags/JavaScript/"/>
    
      <category term="jquery" scheme="https://lxchuan12.github.io/tags/jquery/"/>
    
      <category term="zepto" scheme="https://lxchuan12.github.io/tags/zepto/"/>
    
  </entry>
  
  <entry>
    <title>window.location-浏览器定位和导航</title>
    <link href="https://lxchuan12.github.io/2016/09/12/20160912-window.location/"/>
    <id>https://lxchuan12.github.io/2016/09/12/20160912-window.location/</id>
    <published>2016-09-12T14:55:32.000Z</published>
    <updated>2016-11-08T15:15:13.492Z</updated>
    
    <content type="html"><![CDATA[<p>平时用window.location.href比较多。<br>但却经常会忽略window.location下的其他属性……<a id="more"></a><br>并且很多时候需要对链接问号后面字符串做处理，一般使用split()分割，再取。而实际上，有window.location.search可以获取。<br>一图胜千言<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="./img/url.png" alt="图解url" title="">
                </div>
                <div class="image-caption">图解url</div>
            </figure><br><strong>url</strong>: 统一资源定位符 (Uniform Resource Locator, URL)<br><strong>href</strong>: 当前页面的url<br><strong>protocol</strong>: 协议<br><strong>hostname</strong>: 主机名<br><strong>port</strong>: 端口号<br><strong>host</strong>: 主机名+端口号<br><strong>pathname</strong>: 当前页面的路径和文件名<br><strong>origin</strong>:协议+主机名加端口号（新API）<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/location" target="_blank" rel="external">MDN location</a></p>
<p><img src="./img/location.png" alt="图解location"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;平时用window.location.href比较多。&lt;br&gt;但却经常会忽略window.location下的其他属性……
    
    </summary>
    
      <category term="JavaScript" scheme="https://lxchuan12.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://lxchuan12.github.io/tags/JavaScript/"/>
    
      <category term="BOM" scheme="https://lxchuan12.github.io/tags/BOM/"/>
    
  </entry>
  
  <entry>
    <title>jQuery的几种写法探析</title>
    <link href="https://lxchuan12.github.io/2016/09/11/20160911-Several-writing-of-jquery/"/>
    <id>https://lxchuan12.github.io/2016/09/11/20160911-Several-writing-of-jquery/</id>
    <published>2016-09-11T13:41:23.000Z</published>
    <updated>2016-09-11T13:55:03.057Z</updated>
    
    <content type="html"><![CDATA[<p><strong>写法一：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(function()&#123;</div><div class="line">	//code here</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p><strong>写法二：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(document).ready(function()&#123;</div><div class="line">	//code here</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><strong>写法三：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$().ready(function()&#123;</div><div class="line">	//code here</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>默认参数就是document，所以可以省略不写。<br><strong>写法四：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(function($)&#123;</div><div class="line">	//code here</div><div class="line">&#125;)(jQuery);</div></pre></td></tr></table></figure></p>
<p>这种写法的最大好处是形成闭包。在内部定义的函数和变量只能在此范围内有效。形成是否函数函数、私有变量的概念。不会与其他类库，框架产生冲突。<br>以上四种方法都是同一个意思，一般来说使用<strong>写法一</strong>比较多。<br><strong>此外，</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$(window).load = function()&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line">//等价于：</div><div class="line">window.onload = function()&#123;</div><div class="line">	//code here</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>(JS中的事件，不加on，比如单击事件：click,双击事件：dblclick)</p>
<p><strong>window.onload = function(){}</strong>与<strong>$(funtion(){})</strong>两者的区别是：<br><strong>$(funtion(){})</strong>：<br>1、在DOM加载完成后就可以可以对DOM进行操作。<br>一般情况一个页面响应加载的顺序是：域名解析-加载html-加载js和css-加载图片和视频等其他信息。<br>那么Dom Ready应该在“加载js和css”和“加载图片等其他信息”之间，就可以操作Dom了。<br>2、能多次使用，按序执行。<br><strong>window.onload = function(){}</strong>：<br>1、在网页中所有元素(包括元素的所有关联文件)完全加载到浏览器后才执行，即JavaScript 此时可以访问网页中的所有元素。<br>2、不能多次使用，后者会覆盖前者。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;写法一：&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$(function()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	//code here&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="jQuery" scheme="https://lxchuan12.github.io/categories/jQuery/"/>
    
    
      <category term="jQuery" scheme="https://lxchuan12.github.io/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>CSS3 媒体查询media</title>
    <link href="https://lxchuan12.github.io/2016/09/09/20160909-CSS3-@media/"/>
    <id>https://lxchuan12.github.io/2016/09/09/20160909-CSS3-@media/</id>
    <published>2016-09-09T12:50:42.000Z</published>
    <updated>2016-09-09T13:20:44.079Z</updated>
    
    <content type="html"><![CDATA[<p>CSS3 媒体查询media，其实CSS2也有media，只是基本不用……<a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">@media only screen and (max-width:375px)&#123;</div><div class="line">    .box&#123;</div><div class="line">        background:#f00!important;</div><div class="line">        /*加上！important才有效。*/</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">.box&#123;</div><div class="line">	width:100px;</div><div class="line">	height:100px;</div><div class="line">	background:#000;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>媒体查询@media需要配合meta标签使用才有效。<br>简版：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;&gt;</div></pre></td></tr></table></figure></p>
<p>完整版：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no, minimal-ui&quot;&gt;</div></pre></td></tr></table></figure></p>
<p>其中minimal-ui表示<br>参考链接：<br><a href="http://36kr.com/p/210516.html" target="_blank" rel="external">iOS 7.1的Safari为meta标签新增minimal-ui属性，在网页加载时隐藏地址栏与导航栏</a><br><a href="http://stackoverflow.com/questions/24889100/ios-8-removed-minimal-ui-viewport-property-are-there-other-soft-fullscreen" target="_blank" rel="external">iOS 8 removed “minimal-ui” viewport property, are there other “soft fullscreen” solutions?</a><br>取值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@media screen and (max-width:320px)&#123;</div><div class="line">	/*视窗宽度&lt;=320px*/</div><div class="line">&#125;</div><div class="line">@media screen and (min-width:769px)&#123;</div><div class="line">	/*视窗宽度&gt;=769px*/</div><div class="line">&#125;</div><div class="line">@media screen and (min-width:769px) and (max-width:1000px)&#123;</div><div class="line">	/*769px&lt;=视窗宽度&lt;=1000px*/</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>几道判断题：<br>1、媒体查询条件中，（max-width:320px）表示的是：<br>A. 当视窗宽度小于等于320px时。<br>2、要做响应式网站，就必须设置viewport<br>A. √<br>3、device-width是viewport的默认宽度<br>B、×<br>4、viewport的默认宽度就是屏幕的水平分辨率<br>B、×</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CSS3 媒体查询media，其实CSS2也有media，只是基本不用……
    
    </summary>
    
      <category term="css3" scheme="https://lxchuan12.github.io/categories/css3/"/>
    
    
      <category term="css3" scheme="https://lxchuan12.github.io/tags/css3/"/>
    
      <category term="media" scheme="https://lxchuan12.github.io/tags/media/"/>
    
  </entry>
  
  <entry>
    <title>我是如何踏上前端这条路的</title>
    <link href="https://lxchuan12.github.io/2016/09/07/20160907-How-do-I-set-foot-on-the-front-end-of-the-road/"/>
    <id>https://lxchuan12.github.io/2016/09/07/20160907-How-do-I-set-foot-on-the-front-end-of-the-road/</id>
    <published>2016-09-07T13:48:12.000Z</published>
    <updated>2016-12-29T14:43:33.826Z</updated>
    
    <content type="html"><![CDATA[<p>感觉最近<strong>我是如何XXX的</strong>这类标题挺火的。<br>杭州举办G20峰会，9月1日~7日，放假7天，带了本《ES6 标准入门》回家。在火车上看了几集《微微一笑很倾城》，让我回忆起大学生活。就想着下次返杭的时候可以在火车上，写篇文章记录下，自己的前端学习之路。<a id="more"></a><br><strong>1、刚好可以对现在大四迷茫的学弟学妹们，有些指引</strong>。<br><strong>2、还可以借此回忆下大学生活</strong>。<br><strong>3、锻炼自己写长文的逻辑能力</strong>。<br><strong>当然，学习是座大山，人们沿着不同的路登山，分享着自己看到的风景，别人不一定看得到你看到的风景，体会得了你的心情。</strong></p>
<h3 id="接触前端"><a href="#接触前端" class="headerlink" title="接触前端"></a>接触前端</h3><p>2012年，那年大一，只记得上学期参加了四个社团，参加社团的各种活动，比较忙，另外自己收集一些电子书放到我那一点都不智能的手机上看。下学期，我所在的社团计算机协会（后文简称计协），当时教网页制作（嗯，那时不叫前端开发），当然我报名去参加了。比我们大一级的学长用着Dreamweaver软件 给我们教学，超链接，图片，音乐，视频，FLASH等。总之感觉很有趣。也要我们做出一些作品，交作业。但那时我并没有电脑。所以就没做。</p>
<h3 id="江西省网页制作与设计技能大赛"><a href="#江西省网页制作与设计技能大赛" class="headerlink" title="江西省网页制作与设计技能大赛"></a>江西省网页制作与设计技能大赛</h3><p>大二任职计协会长，举办各类活动。也没怎么学习前端开发之类的知识。学习方面好像也就是平时上上课而已，再就是学习电脑方面的技巧，帮助别人解决电脑问题，为此也写了挺多这类技术文章。比如：<a href="http://user.qzone.qq.com/1019963719/blog/1437915015" target="_blank" rel="external">【教程】Ｕ盘、硬盘安装原版win7、8.1、10系统</a>,<a href="http://user.qzone.qq.com/1019963719/blog/1414836306" target="_blank" rel="external">近期上网拨号客户端出现拨号异常、711错误解决方案</a>。<strong>在大学，懂点电脑，会装几个软件，重装个系统，在别人眼中就会被看做是大神，并且很受欢迎</strong>。后来实在忙，就写了篇文章：<a href="http://user.qzone.qq.com/1019963719/blog/1413177913" target="_blank" rel="external">对不起，我不能帮你修电脑了</a><br>转眼间，就到了2014年4月（大二下学期），我所在的信息学院，组织参加省级网页大赛，同时派老师给予培训指导。这时，老师N每周四（或五）给我们上了几周课，主要讲HTML和CSS，还给我们他录制的视频，当时觉得老师好厉害。后来让我们出作品，我们就找设计（陶美）学院的学生给我们设计网页视觉稿。虽然她们学的是设计，但也不是很懂网页设计这块。于是我就自己参照一个视觉比较好的网站，自己仿照着写了一个。当时还是比较忙，只有晚上有时间，所以总共八个页面，好像写了将近10天。主要用了HTML，CSS，js，jquery。现在放在github上，点击可以访问，<a href="http://lxchuan12.github.io/Fashion-Studio/">时尚影楼</a>,那时并不是很懂js和jquery。后来比赛结果出来了，竟然是省级一等奖。其实一等奖有挺多的。这次网页赛，我们学校获得了很多奖项。大二末，图书馆一老师找到我们，想让我们暑假回去学点PHP，开学好让我们上手，帮他做项目。<br>我们信息学院邀请了10级计科的H学长，给我们这些迷茫的学弟学妹开了一次经验分享会，说到腾讯招人的标准。因为他就是课题组研发部的一员。说到课题组研发部的各种好处，跟着里面的老师L学习PHP，学到60％就够找好工作了。总之意思就是要进课题组学习。<br>大二暑假，家里没网，我就在学校，下载好各种PHP学习资源，暑假就在家看着PHP相关的视频等，一套PHP视频也是100多集，基本看完了，也写了些代码。当时也学了javascript，一套JS视频100多集没有看完。其实到后来基本都忘了。另外，大二暑假，线上面试了乔布简历，通过成为了乔布简历校园大使。</p>
<h3 id="加入课题组研发部"><a href="#加入课题组研发部" class="headerlink" title="加入课题组研发部"></a>加入课题组研发部</h3><p>大三上学期，卸任了计协会长，本以为这是大学最后一个职务，谁知这只是第一个。同学A，同学B跟着图书馆老师做PHP的项目。而我此时看着没啥事，就玩起了PPT，新媒体运营，又相继任职了<strong>校园网络中心团队的队长</strong>（关于这个我也写了篇文章<a href="http://user.qzone.qq.com/1019963719/blog/1439715599" target="_blank" rel="external">谈一谈校园网管这一工作</a>，一直任职到大四上学期）。<strong>校友总会志愿团常务团长</strong>（后来由于组织性质缘故，2014年11月，不到两个月就默认退出了），<strong>乔布简历江西省副主管</strong>，那时班上竞选班干，班主任说我们计协会长卸任了怎么不竞选一个职务。我说不用了，我并没有说还有这么多职务。上学期刚开始不久，我们专业老师也邀请了11级的学长学姐分享他们的一些经验。后来我们成立了信管学习小组，规定时间来主教自习。主要是为了学习网站开发。但后来效果不佳，我也较忙，就散了。<br>PPT水平在涨进，主要体现在我做的优秀班集体评选PPT上，传说就是凭借这次展示，让学校领导记住了做PPT还有这么好的人，后来（2015年5月13日）就被找去做更名大学工作汇报PPT，再后来就有了这张图<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://www.jianshu.com/p/065989d7783a" alt="PPT制作主要经历](./img/ppt.png)，也写了挺多关于PPT制作的文章，比如：[要做PPT，一直找不到资源？" title="">
                </div>
                <div class="image-caption">PPT制作主要经历](./img/ppt.png)，也写了挺多关于PPT制作的文章，比如：[要做PPT，一直找不到资源？</div>
            </figure>。开发水平并没有多少涨进。<br>大三下学期，我和同学A，B一起加入了课题组学习，做任务。5月19日，成立了<a href="http://mia.pasp.cn/" target="_blank" rel="external">移动互联协会</a>，又任职<strong>移动互联协会首届会长</strong>，一直任职到大四上学期。成立这社团，主要目的就是为了培养开发，后来给学弟学妹们培训HTML，CSS,和PPT，PS等，感觉他们真幸福。现在回想起来，在课题组，老师好像真的没给我什么实质性的开发任务。好像就让我做些与开发不那么相关的事情。可能是我个人原因。<br>4月，九家培训机构到我们信息学院做宣讲，他们的目的很明显，就是招人去培训。下午跟千锋教育的老师聊了挺久，主要是了解了他们机构是如何授课等。当然，他们极力希望我能去他们的好程序员班，但我肯定不会考虑培训。当时听完，晚上总结了一张图<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="./img/peixun.jpg" alt="从校园宣讲会我学到了什么" title="">
                </div>
                <div class="image-caption">从校园宣讲会我学到了什么</div>
            </figure>。</p>
<p>到学期末（6月），让我和同学A一起做<a href="http://sjysxy.jci.edu.cn/" target="_blank" rel="external">设计学院网站</a>（给了设计稿），用迅时CMS搭建网站后台（Asp.net）。主要是我做。那时相当于隔了一年多，要重新捡起HTML，CSS，JS。连引入的jquery和自己写的JS顺序都能弄反，连Jquery的选项卡都写不来。熬了几次夜，在同学A和老师的指导下。终于完成了。这时，我开始感受到，就业压力，我究竟要往哪条路走。是<strong>新媒体运营（PPT）</strong>，或者是<strong>PHP开发</strong>，还是<strong>前端开发</strong>？<br>如果走新媒体运营（PPT），那么要开个微信公众号，写PPT相关文章，PPT演界网卖模板，等等。</p>
<h3 id="真正意义上开始学前端开发"><a href="#真正意义上开始学前端开发" class="headerlink" title="真正意义上开始学前端开发"></a>真正意义上开始学前端开发</h3><p>大三暑假，课题组业务需求，我和同学A，B，都留在课题组做任务学习。前期我还在学PHP，后来室友L，在杭州暑假实习，他说前端也比较火。刚好又在网易云课堂，看到网易推出前端微专业第二期。价格一千多。虽然对于在更名大学办公室做PPT和做网络中心团队队长赚了少许钱的我来说，不是很贵，但上学期报名了驾照（3K+），所以就买不起了。但那时我就确定了方向，前端开发，因为入门相对容易，并且所见即所得，喜欢视觉交互，和之前玩PPT是同样注重视觉交互和逻辑。另外在PHP方面根本没做什么项目。要走前端，原生JavaScript必学！于是在知乎上看到说智能社的JS视频<a href="http://study.163.com/course/courseMain.htm?courseId=224014" target="_blank" rel="external">《精通JavaScript开发》</a>，这套课程不错。那时就没多想，先看完这套课程再学其他的。<strong>很多时候，你想学的太多，都在同时学，往往效果不好，而是先学什么再学什么</strong>。记得那时，晚上9点断网，他们在打牌，我回去后在看下载好的视频。学完这条课程后，感觉有些提升，至少熟练了下写代码。<br>学完这套后，就在慕课网学习其他前端相关知识。<br>8月，课题组组建了一支团队，参加互联网+大赛，当时学校比较重视这次比赛，召集参赛者在学校机房培训，解决吃住问题（在教工食堂吃了10多天），我一不小心又成了<strong>临时班长</strong>，协助就业处的老师处理相关事务。我还负责团队赛项目计划书的撰写和PPT制作。<br>后来我们团队依次进入校赛，省赛，国赛，最后10月份到吉林大学（吉林长春）参赛国赛，获得国赛金奖（前30）和最佳创意奖，载誉归来之时，学校领导在校门口接我们，学校党委书记说奖励我们团队10万元。刚开始以为不会分到没多少钱。后来就有钱买课程了。双十一期间，就买了网易云课堂的前端开发微专业第三期，系统的学习前端开发。另外还买了妙味课堂的视频课程学习。<strong>有人说，你要学知识，把市面上这类书都买下来，看懂并消化。那你肯定就有提升了。</strong><br>11月，老师N让我做<a href="http://xgc.jci.edu.cn/" target="_blank" rel="external">学工处</a>的网站，同样是Asp.net的后台。这次就没做多久，也没做设计学院网站那么痛苦。<br>12月，开始做毕业设计，是用php+mySql做第二课堂管理系统。1月5日，提前答辩通过。</p>
<h3 id="大四寒假"><a href="#大四寒假" class="headerlink" title="大四寒假"></a>大四寒假</h3><p>开发水平那么差的我，当然是不忘抓住这段时间，提升自己的。看妙味课堂的视频。学着前端微专业，看课程，查资料，讨论区讨论，做作业，改作业。提交作业有截止日期。感觉这段时间挺充实的。<br>也在考虑大四下学期是否去学校，校内实习，还是去公司实习。老师L是推荐我去公司实习，能学挺多。<br>虽然11月份参加了学校的招聘会，有公司问我用过Bootstrap吗，我说没有。后来有几家公司，叫我去实习，我没去。主要是以下考虑：<br><strong>1、公司前端团队好，实习则好。不好，不如自学</strong>。<br><strong>2、自己不足还有很多，希望能继续学完前端开发微专业，获得优秀学员，也许能进好一点的公司</strong>。<br><strong>3、毕竟不考研，以后有的是工作时间，还不如继续享受下最后一学期的校园生活</strong>。</p>
<h3 id="大四最后一个学期"><a href="#大四最后一个学期" class="headerlink" title="大四最后一个学期"></a>大四最后一个学期</h3><p>开学伊始，我和同学A，B都没去公司实习，重新来到了课题组。刚去不久，老师N就推荐我去南昌，算是实习，说有搞PHP的愿意带一个人一起做项目。后来委婉的拒绝了。因为已经不想走PHP开发路线，想走前端开发路线。但本学期，老师交给我的任务依旧是PHP开发的。第二课堂管理系统（PHP+MySql，CI框架）。因为不是很赶，我就前端微专业，百度前端技术学院任务，（妙味课堂的vip视频）三线并行。4月初，完成了<a href="http://lxchuan12.github.io/Netease-Web/">前端微专业大作业</a>，获得优秀学员证书。在学校，上班是996（早上9点上班，晚上9点下班，中午休息1-2小时）。周日老师不在办公室，而我一般在（同学A，B不在）。因为我太Low了，所以只好多花点时间学习。有段时间，都是24点前提交完代码，才去刷牙洗脸睡觉。晚上躺着睡前还在<strong>牛客网</strong>刷题，或者看视频，或者看前端开发类电子书。</p>
<h3 id="面试，入职杭州一家移动互联网公司"><a href="#面试，入职杭州一家移动互联网公司" class="headerlink" title="面试，入职杭州一家移动互联网公司"></a>面试，入职杭州一家移动互联网公司</h3><p>4月底投简历，5月劳动节一过，我和同学A就来杭州面试。我求职还算顺利，面试了3天，共9家。有的给了offer，就选了一家我认为比较合适的。6月1日入职杭州一家移动互联网公司，公司使用花名，我自己挑选了一个，叫<strong>轩辕</strong>。于是把网上各种昵称，改成了<strong>轩辕Rowboat</strong>。</p>
<blockquote>
<p><strong>轩辕Rowboat</strong>由来：轩辕(公司花名)。Rowboat，英文名，拆解：Row(音：罗)boat(意：小船(音：小川))。其实还挺喜欢这花名的，轩辕（剑），剑未佩妥，出门便是江湖。</p>
</blockquote>
<p>公司使用的技术主要有：HTML5，模板语言（velocity，thymeleaf,handlebarsjs，underscorejs，lodash工具库等），CSS3，Less，Sass，JS，JQuery，zeptojs，bootstrap，angularjs，vuejs，git，gulp，webpack，ES6等（React，nodejs暂时没用到）。<br>不知不觉就写了挺多字，感觉一路走来，<strong>在网易云课堂购买了付费课程（office，前端微专业等）两千左右（已赚回），当没有时间，有钱时，可以选择付费学习，投资学习，回报很大</strong>。<strong>技术提升需要一定的过程，脚踏实地走好每一步，先定好一个个小目标，然后去一一实现</strong>。<strong>看过很多前端大神成长路线，也是从刚开始啥都不会，一步一步变成前端大神的。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;感觉最近&lt;strong&gt;我是如何XXX的&lt;/strong&gt;这类标题挺火的。&lt;br&gt;杭州举办G20峰会，9月1日~7日，放假7天，带了本《ES6 标准入门》回家。在火车上看了几集《微微一笑很倾城》，让我回忆起大学生活。就想着下次返杭的时候可以在火车上，写篇文章记录下，自己的前端学习之路。
    
    </summary>
    
      <category term="自我成长" scheme="https://lxchuan12.github.io/categories/%E8%87%AA%E6%88%91%E6%88%90%E9%95%BF/"/>
    
    
      <category term="self-growth" scheme="https://lxchuan12.github.io/tags/self-growth/"/>
    
      <category term="前端" scheme="https://lxchuan12.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>由JavaScript一道面向对象题引发的思考</title>
    <link href="https://lxchuan12.github.io/2016/08/30/20160830-js-oop-prototype-constructor/"/>
    <id>https://lxchuan12.github.io/2016/08/30/20160830-js-oop-prototype-constructor/</id>
    <published>2016-08-30T15:09:00.000Z</published>
    <updated>2016-08-31T05:13:33.817Z</updated>
    
    <content type="html"><![CDATA[<p>一个前端QQ群里，有人提问，关于面向对象的……我看完后解答了<a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">function Person()&#123;</div><div class="line">  this.name = &quot;lxchuan12&quot;;</div><div class="line">&#125;</div><div class="line">var rowboat = new Person();</div><div class="line">Person.prototype.age=20;</div><div class="line">Person.prototype=&#123;a:1,b:2&#125;;</div><div class="line">//Person.prototype.constructor = Person;</div><div class="line">console.log(rowboat.name);//&quot;lxchuan12&quot;</div><div class="line">console.log(rowboat.age);//20</div><div class="line">console.log(rowboat.a);//undefined</div><div class="line">console.log(rowboat.b);//undefined</div><div class="line">console.log(rowboat);</div><div class="line">console.log(Person.prototype.name);//undefined</div><div class="line">console.log(Person.prototype.age);//undefined</div><div class="line">console.log(Person.prototype.a);//1</div><div class="line">console.log(Person.prototype.b);//2</div><div class="line">console.log(Person.prototype.constructor);//function Object() &#123; [native code] &#125;</div><div class="line">console.log(Person.prototype);//Object &#123;a: 1, b: 2&#125;</div></pre></td></tr></table></figure></p>
<h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><p>他不明白，为什么rowboat.age为20。但Person.prototype.age却为undefined。</p>
<h3 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h3><p>我把代码在<a href="http://jsbin.com/muzofix/19/edit?html,js,console" target="_blank" rel="external">jsbin</a>运行后，为之解答。<br>Person.prototype={a:1,b:2};这种写法是赋值，<br>与Person.prototype.age=20;写法不同，不经意间把constructor指向原本为Person的，改为了Object（一般来说，需要修正指向。Person.prototype.constructor = Person）。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="./img/console-output.jpg" alt="控制台输出对象" title="">
                </div>
                <div class="image-caption">控制台输出对象</div>
            </figure><br>相当于prototype下只有a,b两个值了。所以Person.prototype.age则是undefined。<br>但rowboat.age是原型上的，可以找到，所以是20。<br>所谓原型查找：查找的是构造器查找的原型，构造器是指向一个function(){},里面没有a和b.</p>
<h3 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h3><p><a href="https://segmentfault.com/a/1190000006009690" target="_blank" rel="external">《JavaScript高级程序设计》——对象学习笔记</a></p>
<h3 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h3><p>学习js面对对象编程相关知识,对了解js语言很有帮助。另外，有人说，能写组件，做组件开发说明达到了中级水平。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个前端QQ群里，有人提问，关于面向对象的……我看完后解答了
    
    </summary>
    
      <category term="JavaScript" scheme="https://lxchuan12.github.io/categories/JavaScript/"/>
    
    
      <category term="js" scheme="https://lxchuan12.github.io/tags/js/"/>
    
      <category term="oop" scheme="https://lxchuan12.github.io/tags/oop/"/>
    
  </entry>
  
  <entry>
    <title>sass基本特性-运算</title>
    <link href="https://lxchuan12.github.io/2016/08/29/20160829-Sass-basic-characteristics-of-computing/"/>
    <id>https://lxchuan12.github.io/2016/08/29/20160829-Sass-basic-characteristics-of-computing/</id>
    <published>2016-08-29T13:26:28.000Z</published>
    <updated>2016-08-29T15:16:14.266Z</updated>
    
    <content type="html"><![CDATA[<p>CSS中目前只有calc()能做运算，但是在Sass中，可以做各种数学运算……<a id="more"></a></p>
<p><strong>1、加法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box&#123;</div><div class="line">    width: 20px + 8in;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译出来的CSS:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">  width: 788px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>1in = 96px;</p>
<p>当em,rem等相对当前字体，于px在一起不能运算，会报错，如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box&#123;</div><div class="line">    width: 20px + 8em;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>不过如果其中一个不同单位，那么会以另一个带单位的为准，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.box&#123;</div><div class="line">    width: 20px + 8;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.box2&#123;</div><div class="line">    width: 20em + 8;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译出来的CSS为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">  width: 28px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.box2 &#123;</div><div class="line">  width: 28em;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>2、减法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$container: 960px;</div><div class="line">$sidebar-width: 220px;</div><div class="line">$gap-width: 20px;</div><div class="line"></div><div class="line">.content&#123;</div><div class="line">    width: $container - $sidebar-width - $gap-width;</div><div class="line">    float: left;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译出来的CSS：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.content &#123;</div><div class="line"></div><div class="line">  width: 720px;</div><div class="line"></div><div class="line">  float: left; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>减法和加法一样，不支持em,rem等相对当前字体大小的单位与px进行计算。</p>
<p><strong>3、乘法</strong></p>
<p>乘法运算时，只需要其中一个带单位即可，如果都带有单位会报错,<br>如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box&#123;</div><div class="line">    width: 20px * 20px</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译时会报错。</p>
<p>而:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box&#123;</div><div class="line">    width: 20px * 20;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译出来的CSS：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box&#123;</div><div class="line">    width: 400px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>与加减法一样，不同类型的单位运算时会报错。</p>
<p><strong>4、除法</strong></p>
<p>Sass的乘法运算规则也适用于除法运算，不过除法运算有特殊之处，因为”/”符号在CSS中已经作为一种符号使用，因此在Sass中直接使用”/”作为处好时，将不会生效，编译时既不会报错，也不会得到我们想要的效果。</p>
<p>如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box&#123;</div><div class="line">    width: 100px / 2;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译出来的CSS:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">  width: 100px / 2;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>要修正这个文字，只需要给运算的外面添加一对小括号即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box&#123;</div><div class="line">    width: (100px / 2);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译出来的CSS为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">  width: 50px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>除了小括号以外，如果除了 “/” 外，还有其它的运算符号，那么也会被当作除号看待。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">  width: 100px / 2 + 20px;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译出来的CSS为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">    width: 70px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>另外，如果是用变量进行除法运算，”/”也会自动被识别为除法。</p>
<p>如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$width: 960px;</div><div class="line"></div><div class="line">.col &#123;</div><div class="line">   width: $width / 10;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译出来的CSS为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.col &#123;</div><div class="line"></div><div class="line">  width: 96px; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>综合上述，”/ ”符号被当作除法运算符时有以下几种情况：</p>
<p>如果数值或它的任意部分是存储在一个变量中或是函数的返回值。<br>如果数值被圆括号包围。<br>如果数值是另一个数学表达式的一部分。<br>在除法运算时，如果两个值带有相同的单位值时，除法运算之后会得到一个不带单位的数值。</p>
<p>关于单位计算的问题，同物理倒是非常像。</p>
<p>如果不想记”/”的规则，那么在想作为除法使用是，加上一个括号即可。</p>
<p><strong>5、颜色运算</strong></p>
<p>所有的运算都支持颜色值。<br>如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">p &#123;</div><div class="line">  color: #010203 + #040506;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译出的CSS为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">p &#123;</div><div class="line">  color: #050709;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>同样颜色值也支持乘法运算:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">p &#123;</div><div class="line">  color: #010203 * 2;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译出来的CSS:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">p &#123;</div><div class="line">  color: #020406;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运算规则和二进制乘法相同，依次与每一位相乘。个人觉得颜色值的运算意义不是很大。</p>
<p><strong>6、字符运算</strong></p>
<p>在Sass中可以用”+”号对字符串进行拼接，如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$content: &quot;Hello&quot; + &quot; &quot; + &quot;Sass!&quot;;</div><div class="line">.box&#123;</div><div class="line">    &amp;:after&#123;</div><div class="line">        content: $content;</div><div class="line">    &#125;</div><div class="line">    &amp;:before&#123;</div><div class="line">        content: &quot; #&#123;$content&#125; &quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译出来的CSS为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.box:after &#123;</div><div class="line">  content: &quot;Hello Sass!&quot;; </div><div class="line">&#125;</div><div class="line">.box:before &#123;</div><div class="line">  content: &quot; Hello Sass! &quot;; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>除了在变量中做字符连接运算之外，还可以直接通过 +，把字符连接在一起：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">div&#123;</div><div class="line">    cursor: e + -resize;</div><div class="line">&#125;</div><div class="line"></div><div class="line">span&#123;</div><div class="line">    cursor: &quot;e&quot; + &quot;-resize&quot;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译出来的CSS为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">div &#123;</div><div class="line">  cursor: e-resize;</div><div class="line">&#125;</div><div class="line"></div><div class="line">span &#123;</div><div class="line">  cursor: &quot;e-resize&quot;; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>==注意==:</strong>如果有引号的字符串被添加了一个没有引号的字符串 （也就是，带引号的字符串在 + 符号左侧）， 结果会是一个有引号的字符串。 同样的，如果一个没有引号的字符串被添加了一个有引号的字符串 （没有引号的字符串在 + 符号左侧）， 结果将是一个没有引号的字符串。 也就是说始终与加号左边的保持一致:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">p:before &#123;</div><div class="line">  content: &quot;Foo &quot; + Bar;</div><div class="line">  font-family: sans- + &quot;serif&quot;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译出来的CSS为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">p:before &#123;</div><div class="line">  content: &quot;Foo Bar&quot;;</div><div class="line">  font-family: sans-serif; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>根据<a href="http://www.imooc.com/learn/311" target="_blank" rel="external">慕课网sass入门篇</a>整理</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CSS中目前只有calc()能做运算，但是在Sass中，可以做各种数学运算……
    
    </summary>
    
      <category term="sass" scheme="https://lxchuan12.github.io/categories/sass/"/>
    
    
      <category term="sass" scheme="https://lxchuan12.github.io/tags/sass/"/>
    
  </entry>
  
  <entry>
    <title>js如何判断对象为空</title>
    <link href="https://lxchuan12.github.io/2016/08/27/20160827-Judge-null-object-by-javascript/"/>
    <id>https://lxchuan12.github.io/2016/08/27/20160827-Judge-null-object-by-javascript/</id>
    <published>2016-08-27T14:46:23.000Z</published>
    <updated>2016-08-29T15:46:51.607Z</updated>
    
    <content type="html"><![CDATA[<p>vuejs项目中，遇到要判断data中的对象是否为空……<a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">var vm = new Vue(&#123;</div><div class="line">  el:&apos;#demo&apos;,</div><div class="line">  data:&#123;</div><div class="line">    msg:&apos;hello&apos;,</div><div class="line">    ms:&#123;&#125;</div><div class="line">  &#125;,</div><div class="line">  created ()&#123;</div><div class="line">    let that = this;</div><div class="line">    console.log(that.ms);</div><div class="line">    console.log(that.msg);</div><div class="line">    console.log(that.ms === null);//false</div><div class="line">    if(that.ms)&#123;//true</div><div class="line">      console.log(1);//1,</div><div class="line">    &#125;;</div><div class="line">    console.log(that.ms === undefined);//false</div><div class="line">    for(var attr in that.ms)&#123;</div><div class="line">      console.log(attr);</div><div class="line">      console.log(&apos;2&apos;);</div><div class="line">    &#125;</div><div class="line">    //console.log(&apos;3&apos;);</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><a href="http://jsbin.com/xasemec/22/edit?html,js,console" target="_blank" rel="external">点击查看详情vuejs</a></p>
<p>jquery有工具方法$.isEmptyObject(),查看源码发现这样实现的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">isEmptyObject:function(obj)&#123;</div><div class="line">    var name;</div><div class="line">    for(name in obj)&#123;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">    return true;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这是利用了for in无法循环到系统自带的属性值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//比如：</div><div class="line">function Watch()&#123;&#125;</div><div class="line">//Watch.prototype.constructor = Watch;</div><div class="line">//系统自己生成。写出来这句也无法用for in循环到。</div><div class="line">for (var attr in Watch.prototype)&#123;</div><div class="line">    console.log(&apos;can not console&apos;);//无法输出。</div><div class="line">&#125;</div><div class="line">//如果自己写,则可以输出show.</div><div class="line">Watch.prototype.show = function()&#123;&#125;</div></pre></td></tr></table></figure></p>
<p>这时想起了<a href="http://www.tuicool.com/articles/3meE3a" target="_blank" rel="external">js中数组遍历for与for in区别(强烈建议不要使用for in遍历数组)</a><br>$.isPlainObject()方法：<a href="http://www.365mini.com/page/jquery_isplainobject.htm" target="_blank" rel="external">判断”纯粹的对象”，就是该对象是通过”{}”或”new Object”创建的。</a><br>$.isPlainObject( document.location ) ); // false(在IE中返回true)</p>
<p><strong>参考资料：</strong><a href="http://www.cnblogs.com/TomXu/archive/2011/12/15/2288411.html" target="_blank" rel="external">汤姆大叔博客</a></p>
<p>小结:js一切皆为对象，了解面对对象编程很有好处。能研究一遍jquery源码,定能更上一层楼。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;vuejs项目中，遇到要判断data中的对象是否为空……
    
    </summary>
    
      <category term="JavaScript" scheme="https://lxchuan12.github.io/categories/JavaScript/"/>
    
    
      <category term="vuejs" scheme="https://lxchuan12.github.io/tags/vuejs/"/>
    
      <category term="js" scheme="https://lxchuan12.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>iPhone safari可以通过访问链接来打开微信</title>
    <link href="https://lxchuan12.github.io/2016/08/20/20160820-safari-open-wechat/"/>
    <id>https://lxchuan12.github.io/2016/08/20/20160820-safari-open-wechat/</id>
    <published>2016-08-20T15:35:26.000Z</published>
    <updated>2016-08-22T15:33:42.579Z</updated>
    
    <content type="html"><![CDATA[<p>今天发现：iPhone safari可以可以通过访问链接来打开微信。而安卓手机不行。不多说，直接show the code……<a id="more"></a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">let ua = window.navigator.userAgent.toLowerCase();</div><div class="line">if ((ua.indexOf(&apos;iphone&apos;)&gt;-1)&amp;&amp;(ua.indexOf(&apos;safari&apos;)&gt;-1))&#123;</div><div class="line">    window.location.href = &apos;weixin:http://weixin.qq.com&apos;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天发现：iPhone safari可以可以通过访问链接来打开微信。而安卓手机不行。不多说，直接show the code……
    
    </summary>
    
      <category term="JavaScript" scheme="https://lxchuan12.github.io/categories/JavaScript/"/>
    
    
      <category term="js" scheme="https://lxchuan12.github.io/tags/js/"/>
    
      <category term="wechat" scheme="https://lxchuan12.github.io/tags/wechat/"/>
    
  </entry>
  
  <entry>
    <title>(转)一种代码量更少的(micro clearfix)清除浮动的hack</title>
    <link href="https://lxchuan12.github.io/2016/08/19/20160819-css-micro%20clearfix-hack/"/>
    <id>https://lxchuan12.github.io/2016/08/19/20160819-css-micro clearfix-hack/</id>
    <published>2016-08-19T15:24:12.000Z</published>
    <updated>2016-08-19T15:36:30.924Z</updated>
    
    <content type="html"><![CDATA[<p>clearfix hack做为一种无需借助额外标签清除浮动的方法已经人尽皆知了，本文给出一种优化方案，可以进一步减少所需css的数量……<a id="more"></a></p>
<p>Demo: <a href="http://nicolasgallagher.com/micro-clearfix-hack/demo/" target="_blank" rel="external">Micro clearfix hack</a></p>
<p>Known support: Firefox 3.5+, Safari 4+, Chrome, Opera 9+, IE 6+</p>
<p>micro clearfix基于 <a href="http://www.yuiblog.com/blog/2010/09/27/clearfix-reloaded-overflowhidden-demystified/" target="_blank" rel="external">Thierry Koblentz’s “clearfix reloaded</a>reloaded优化而来，适用于现代浏览器（modern browsers）</p>
<p>下面是micro clearfix的代码片段<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">.cf:before,</div><div class="line">.cf:after &#123;</div><div class="line">    content: &quot; &quot;; </div><div class="line">    display: table; </div><div class="line">&#125;</div><div class="line">.cf:after &#123;</div><div class="line">    clear: both;</div><div class="line">&#125;</div><div class="line">.cf &#123;</div><div class="line">    *zoom: 1;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>“micro clearfix”生成伪类元素，并将其display属性设置为table，这样就会创建一个匿名<a href="http://www.w3.org/TR/CSS2/tables.html#anonymous-boxes" target="_blank" rel="external">table-cell</a>，同时生成了新的BFC，这样意味着<br>:before伪类会阻止上边距折叠，:after伪类用于清除浮动，好处是不用隐藏产生的内容了，所需要的css代码就变少了。</p>
<p>为了清除浮动包含:before选择器是没必要的，但是:before的加入可以阻止top-margins折叠，这样有两个好处：</p>
<p>同其他使用BFC方式清除浮动一样，确保了视觉上的一致，例如使用overflow:hidden<br>IE 6/7中使用zoom:1 时，确保了视觉上的一致<br>N.B.: 有一个细节：IE 6/7中在新的BFC中浮动元素的下边距是不会包含在内的，进一步的描述可以看这里： <a href="http://nicolasgallagher.com/better-float-containment-in-ie/" target="_blank" rel="external">Better float containment in IE using CSS expressions</a>.<br>content:” “的使用避免了一个Opera的bug，如果contenteditable属性同时出现在元素中时，这个bug会在待清除元素周围生成空格。一种可选的修复方案是使用 font:0/0 a，多谢Sergio Cerrutti测试出这个bug</p>
<p>转载于：<a href="http://www.jianshu.com/p/7521ec9d8f24" target="_blank" rel="external">一种代码量更少的(micro clearfix)清除浮动的hack</a></p>
<p>英文版：<a href="http://nicolasgallagher.com/micro-clearfix-hack/" target="_blank" rel="external">A new micro clearfix hack</a>，转载标明出处，谢谢！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;clearfix hack做为一种无需借助额外标签清除浮动的方法已经人尽皆知了，本文给出一种优化方案，可以进一步减少所需css的数量……
    
    </summary>
    
      <category term="CSS" scheme="https://lxchuan12.github.io/categories/CSS/"/>
    
    
      <category term="css" scheme="https://lxchuan12.github.io/tags/css/"/>
    
      <category term="clearfix" scheme="https://lxchuan12.github.io/tags/clearfix/"/>
    
  </entry>
  
  <entry>
    <title>vuejs生态，自顶而下学习</title>
    <link href="https://lxchuan12.github.io/2016/08/18/20160818-chat/"/>
    <id>https://lxchuan12.github.io/2016/08/18/20160818-chat/</id>
    <published>2016-08-18T15:24:12.000Z</published>
    <updated>2016-09-30T15:59:10.755Z</updated>
    
    <content type="html"><![CDATA[<p>由于我git比较活跃，有幸收到大搜车前端leader芋头（前端乱炖网站创始人，颜文字APP）的邮件，并与之交流。<a id="more"></a><a href="https://www.zhihu.com/people/li-shou-xin" target="_blank" rel="external">小芋头君的知乎主页</a>.<br><a href="http://f2e.souche.com/blog/" target="_blank" rel="external">大搜车前端团队博客</a>.</p>
<h3 id="大概整理："><a href="#大概整理：" class="headerlink" title="大概整理："></a>大概整理：</h3><blockquote>
<p>1、自顶而下学习，看vuejs文章，熟悉其生态圈，怎么产生的，解决了什么问题。不是会写，就行。很多人看完vuejs教程都会写。</p>
<blockquote>
<p>比如angularjs，双向绑定，vuejs是单向绑定，虽然也可以双向绑定。<br>2、自我管理，自我规划，自我提升。综合能力。<br>3、追新，有些人工作了几年就不学新东西，这样没提升。<br>4、前端工程化，（打包工具只是其中一小部分）。<br>5、目前重要的不是学ES6，而是把基础夯实。</p>
</blockquote>
</blockquote>
<p>这让我想起：知乎上一个提问<a href="https://www.zhihu.com/question/49164656/noti-answers?group_id=744949063161507840" target="_blank" rel="external">大学毕业做前端工作感觉最近遇到了瓶颈，不知道该如何提升自己？</a></p>
<blockquote>
<p>作者：林獺<br>链接：<a href="https://www.zhihu.com/question/49164656/answer/114625869" target="_blank" rel="external">https://www.zhihu.com/question/49164656/answer/114625869</a><br>来源：知乎<br>著作权归作者所有，转载请联系作者获得授权。</p>
</blockquote>
<p>首先，正视自己的能力。前端的新技术，不是门坎较低、就是给人一种容易掌握的错觉。Less/Sass 不谈，你学了 Angular，懂得 data-binding、router 等背后的实现原理吗？你虽会用 Node 搭建一个本地 server，但懂得 I/O 流程、HTTP 和操作系统知识吗？你能不诉诸书本和搜索引擎，写出几个 JS 设计模式和继承模式吗？你能完全脱离 jQuery 来操纵 DOM 和 Ajax 吗？你知道怎么写 CSS 选择器能让浏览器解释速度最快吗？你会在开发过程中，下意识地追求 HTTP 请求最少吗？……<br>如果你不能的话，那就需要重新审视自己，是否被一时的自我成就和满足所障目，而忘却了技术最重要的永远是基础。<br>如果你能的话，恭喜你，你已经不止是合格的前端了。这样的话，你要怎么做才能走出平阳、找到归宿呢？<br>我的建议是积累经验——积累工作和项目的经验，闲时继续学习并深入新技术。你的工作效率高、闲时多，这是好事。我毕业后第一份工作也是如此，领导缺乏技术嗅觉，技术路线过时老旧。我是这么应对的：凭越发娴熟的技能，加快工作速度，换来学习的时间。接着，主动把你的新技能移植到公司项目中。例如 Gulp、Less/Sass，都是开发环境下的利器，开发环境下你想怎么用就怎么用，外人只看到生产代码；甚或 Angular——遇到独力负责的中重量级项目，主动考虑此类 MVC 框架的可行性；有时不是项目和领导不允许使用新框架，而是自己不愿走出舒适圈、缺乏实践自信。<br>（业余时间，用你的 Gulp、Angular 写一些个人项目放在 GitHub 上，配以 Node mock server 甚至 Redis 数据库，有助理解前后端交互和数据库的组织，也增加面试的资本。）<br>当你「利用」这个公司，积累了新老技术的实践经验后，便是另谋高就的时机了。你的简历不仅会有上述技能，还会有「一力为旧公司引入任务构建、工作流等新技术」之类的 impressing 字眼。<br>在投简历时，开始考虑实质回报以外更深层的东西。你可以询问对方，贵团队的前端技术栈为何，未来的技术规划为何。因为接下来的新工作，在你的职场生涯中，是最能影响你的技术修炼的——你将第一次名正言顺地学习技术、并将其付诸实践、甚至有同样技术路线的同事大牛带领。对比上一家，事半功倍。</p>
<h3 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h3><p>坚持学习，自我提升；<br>重视基础！<br>努力争取能进好团队，学习更快。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于我git比较活跃，有幸收到大搜车前端leader芋头（前端乱炖网站创始人，颜文字APP）的邮件，并与之交流。
    
    </summary>
    
      <category term="自我成长" scheme="https://lxchuan12.github.io/categories/%E8%87%AA%E6%88%91%E6%88%90%E9%95%BF/"/>
    
    
      <category term="self-growth" scheme="https://lxchuan12.github.io/tags/self-growth/"/>
    
  </entry>
  
  <entry>
    <title>弹窗（modal）垂直水平居中</title>
    <link href="https://lxchuan12.github.io/2016/08/17/20160817-modal-center/"/>
    <id>https://lxchuan12.github.io/2016/08/17/20160817-modal-center/</id>
    <published>2016-08-17T15:07:15.000Z</published>
    <updated>2016-08-17T15:58:06.795Z</updated>
    
    <content type="html"><![CDATA[<p>今天发现{margin:0 auto}竟然能使固定定位fixed(脱离文档流）（在chrome手机模拟器和chrome浏览器）水平居中。<br>在我安卓手机(4.2.2)不行。后来改成{margin-left:-定宽/2}，于是在安卓手机也可以了……<a id="more"></a></p>
<h2 id="弹窗垂直水平居中："><a href="#弹窗垂直水平居中：" class="headerlink" title="弹窗垂直水平居中："></a>弹窗垂直水平居中：</h2><h3 id="方法1："><a href="#方法1：" class="headerlink" title="方法1："></a>方法1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">.modal&#123;</div><div class="line">    position:fixed;</div><div class="line">    width:250px;</div><div class="line">    height:100px;</div><div class="line">    background:#ececec;</div><div class="line">    left:50%;</div><div class="line">    top:50%;</div><div class="line">    margin-left:-125px;</div><div class="line">    margin-top:-50px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>小结:</strong>fixed，支持到IE7，IE6不支持。modal定宽定高。</p>
<h3 id="方法2："><a href="#方法2：" class="headerlink" title="方法2："></a>方法2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">.modal&#123;</div><div class="line">    position:fixed;</div><div class="line">    width:250px;</div><div class="line">    height:100px;</div><div class="line">    background:#ececec;</div><div class="line">    left:50%;</div><div class="line">    top:50%;</div><div class="line">    -webkit-transform:translate(-50%,-50%);</div><div class="line">    transform:translate(-50%,-50%);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>小结:</strong>不支持IE9+，modal不需定宽定高，手机端可用。（发现如果有其他的transform，好像先执行其他的，在移动到中心。）另外，发现{margin:0 auto}:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">.modal&#123;</div><div class="line">    position:fixed;</div><div class="line">    width:250px;</div><div class="line">    left:0;</div><div class="line">    right:0;</div><div class="line">    top:40%;</div><div class="line">    bottom:auto;</div><div class="line">    margin:0 auto;</div><div class="line">    background:#ececec;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>竟然能使固定定位fixed(脱离文档流）（在chrome手机模拟器和chrome浏览器）水平居中。<br>在我安卓手机(4.2.2)不行。后来改成{margin-left:-定宽/2}，于是在安卓手机也可以了</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天发现{margin:0 auto}竟然能使固定定位fixed(脱离文档流）（在chrome手机模拟器和chrome浏览器）水平居中。&lt;br&gt;在我安卓手机(4.2.2)不行。后来改成{margin-left:-定宽/2}，于是在安卓手机也可以了……
    
    </summary>
    
      <category term="css" scheme="https://lxchuan12.github.io/categories/css/"/>
    
    
      <category term="css" scheme="https://lxchuan12.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>js手机号码正则表达式</title>
    <link href="https://lxchuan12.github.io/2016/08/16/20160816-reg-phone-num/"/>
    <id>https://lxchuan12.github.io/2016/08/16/20160816-reg-phone-num/</id>
    <published>2016-08-16T15:06:16.000Z</published>
    <updated>2016-08-20T15:51:20.899Z</updated>
    
    <content type="html"><![CDATA[<p>前端做了手机号的限制，但有的号码通过了前端验证，但依旧数据无法保存成功，但又没错误提示。与后台联调发现，原来是后端也做了限制，还不一样……<a id="more"></a><br><strong>1.前端验证</strong><br>var reg = /^1\d{10}$/;</p>
<p><strong>2.后端验证</strong><br>var reg = /^1[3|4|5|7|8][0-9]{9}$/; //验证规则<br>不知其合理性，普适性，于是搜索了下。</p>
<p><strong>3.最后采用：</strong></p>
<p>var reg = /^1\d{10}$/; //验证规则<br>var phoneNum = ‘18296821923’;//手机号码<br>var flag = reg.test(phoneNum); //true</p>
<p><strong>4.参考资料：</strong><br><a href="http://caibaojian.com/phone-regexp.html" target="_blank" rel="external">JS最新手机号码检验正则表达式</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前端做了手机号的限制，但有的号码通过了前端验证，但依旧数据无法保存成功，但又没错误提示。与后台联调发现，原来是后端也做了限制，还不一样……
    
    </summary>
    
      <category term="js" scheme="https://lxchuan12.github.io/categories/js/"/>
    
    
      <category term="js" scheme="https://lxchuan12.github.io/tags/js/"/>
    
      <category term="reg" scheme="https://lxchuan12.github.io/tags/reg/"/>
    
  </entry>
  
</feed>
