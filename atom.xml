<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>轩辕Rowboat的博客</title>
  <subtitle>前端路上 | PPT爱好者 | 所知甚少，唯善学。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lxchuan12.github.io/"/>
  <updated>2016-08-30T15:58:27.070Z</updated>
  <id>http://lxchuan12.github.io/</id>
  
  <author>
    <name>轩辕Rowboat</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>由js一道面向对象题引发的思考</title>
    <link href="http://lxchuan12.github.io/2016/08/30/20160830-js%20oop%20prototype%20constructor/"/>
    <id>http://lxchuan12.github.io/2016/08/30/20160830-js oop prototype constructor/</id>
    <published>2016-08-30T15:09:00.000Z</published>
    <updated>2016-08-30T15:58:27.070Z</updated>
    
    <content type="html"><![CDATA[<p>一个前端QQ群里，有人提问，关于面向对象的……我看完后解答了<a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">function Person()&#123;</div><div class="line">  this.name = &quot;lxchuan12&quot;;</div><div class="line">&#125;</div><div class="line">var rowboat = new Person();</div><div class="line">Person.prototype.age=20;</div><div class="line">Person.prototype=&#123;a:1,b:2&#125;;</div><div class="line">//Person.prototype.constructor = Person;</div><div class="line">console.log(rowboat.name);//&quot;lxchuan12&quot;</div><div class="line">console.log(rowboat.age);//20</div><div class="line">console.log(rowboat.a);//undefined</div><div class="line">console.log(rowboat.b);//undefined</div><div class="line">console.log(rowboat);</div><div class="line">console.log(Person.prototype.name);//undefined</div><div class="line">console.log(Person.prototype.age);//undefined</div><div class="line">console.log(Person.prototype.a);//1</div><div class="line">console.log(Person.prototype.b);//2</div><div class="line">console.log(Person.prototype.constructor);//function Object() &#123; [native code] &#125;</div><div class="line">console.log(Person.prototype);//Object &#123;a: 1, b: 2&#125;</div></pre></td></tr></table></figure></p>
<p><strong>问题：</strong>他不明白，为什么rowboat.age为20。但Person.prototype.age却为undefined。<br><strong>解答：</strong>我把代码在<a href="http://jsbin.com/muzofix/19/edit?html,js,console" target="_blank" rel="external">jsbin</a>运行后，为之解答。<br>Person.prototype={a:1,b:2};这种写法是赋值，<br>与Person.prototype.age=20;写法不同，不经意间把constructor指向原本为Person的，改为了Object。<img src="./img/console-output.jpg" alt="图"><br>相当于prototype下只有a,b两个值了。所以age则是undefined。<br>一般来说，需要修正指向。Person.prototype.constructor = Person;</p>
<p><strong>小结：</strong>学习js面对对象编程相关知识,对了解js语言很有帮助。另外，有人说，能写组件，做组件开发说明达到了中级水平。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个前端QQ群里，有人提问，关于面向对象的……我看完后解答了
    
    </summary>
    
      <category term="JavaScript" scheme="http://lxchuan12.github.io/categories/JavaScript/"/>
    
    
      <category term="js" scheme="http://lxchuan12.github.io/tags/js/"/>
    
      <category term="oop" scheme="http://lxchuan12.github.io/tags/oop/"/>
    
  </entry>
  
  <entry>
    <title>sass基本特性-运算</title>
    <link href="http://lxchuan12.github.io/2016/08/29/20160829-Sass%20basic%20characteristics%20of%20computing/"/>
    <id>http://lxchuan12.github.io/2016/08/29/20160829-Sass basic characteristics of computing/</id>
    <published>2016-08-29T13:26:28.000Z</published>
    <updated>2016-08-29T15:16:14.266Z</updated>
    
    <content type="html"><![CDATA[<p>CSS中目前只有calc()能做运算，但是在Sass中，可以做各种数学运算……<a id="more"></a></p>
<p><strong>1、加法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box&#123;</div><div class="line">    width: 20px + 8in;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译出来的CSS:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">  width: 788px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>1in = 96px;</p>
<p>当em,rem等相对当前字体，于px在一起不能运算，会报错，如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box&#123;</div><div class="line">    width: 20px + 8em;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>不过如果其中一个不同单位，那么会以另一个带单位的为准，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.box&#123;</div><div class="line">    width: 20px + 8;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.box2&#123;</div><div class="line">    width: 20em + 8;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译出来的CSS为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">  width: 28px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.box2 &#123;</div><div class="line">  width: 28em;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>2、减法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$container: 960px;</div><div class="line">$sidebar-width: 220px;</div><div class="line">$gap-width: 20px;</div><div class="line"></div><div class="line">.content&#123;</div><div class="line">    width: $container - $sidebar-width - $gap-width;</div><div class="line">    float: left;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译出来的CSS：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.content &#123;</div><div class="line"></div><div class="line">  width: 720px;</div><div class="line"></div><div class="line">  float: left; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>减法和加法一样，不支持em,rem等相对当前字体大小的单位与px进行计算。</p>
<p><strong>3、乘法</strong></p>
<p>乘法运算时，只需要其中一个带单位即可，如果都带有单位会报错,<br>如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box&#123;</div><div class="line">    width: 20px * 20px</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译时会报错。</p>
<p>而:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box&#123;</div><div class="line">    width: 20px * 20;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译出来的CSS：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box&#123;</div><div class="line">    width: 400px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>与加减法一样，不同类型的单位运算时会报错。</p>
<p><strong>4、除法</strong></p>
<p>Sass的乘法运算规则也适用于除法运算，不过除法运算有特殊之处，因为”/”符号在CSS中已经作为一种符号使用，因此在Sass中直接使用”/”作为处好时，将不会生效，编译时既不会报错，也不会得到我们想要的效果。</p>
<p>如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box&#123;</div><div class="line">    width: 100px / 2;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译出来的CSS:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">  width: 100px / 2;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>要修正这个文字，只需要给运算的外面添加一对小括号即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box&#123;</div><div class="line">    width: (100px / 2);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译出来的CSS为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">  width: 50px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>除了小括号以外，如果除了 “/” 外，还有其它的运算符号，那么也会被当作除号看待。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">  width: 100px / 2 + 20px;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译出来的CSS为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">    width: 70px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>另外，如果是用变量进行除法运算，”/”也会自动被识别为除法。</p>
<p>如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$width: 960px;</div><div class="line"></div><div class="line">.col &#123;</div><div class="line">   width: $width / 10;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译出来的CSS为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.col &#123;</div><div class="line"></div><div class="line">  width: 96px; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>综合上述，”/ ”符号被当作除法运算符时有以下几种情况：</p>
<p>如果数值或它的任意部分是存储在一个变量中或是函数的返回值。<br>如果数值被圆括号包围。<br>如果数值是另一个数学表达式的一部分。<br>在除法运算时，如果两个值带有相同的单位值时，除法运算之后会得到一个不带单位的数值。</p>
<p>关于单位计算的问题，同物理倒是非常像。</p>
<p>如果不想记”/”的规则，那么在想作为除法使用是，加上一个括号即可。</p>
<p><strong>5、颜色运算</strong></p>
<p>所有的运算都支持颜色值。<br>如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">p &#123;</div><div class="line">  color: #010203 + #040506;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译出的CSS为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">p &#123;</div><div class="line">  color: #050709;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>同样颜色值也支持乘法运算:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">p &#123;</div><div class="line">  color: #010203 * 2;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译出来的CSS:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">p &#123;</div><div class="line">  color: #020406;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运算规则和二进制乘法相同，依次与每一位相乘。个人觉得颜色值的运算意义不是很大。</p>
<p><strong>6、字符运算</strong></p>
<p>在Sass中可以用”+”号对字符串进行拼接，如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$content: &quot;Hello&quot; + &quot; &quot; + &quot;Sass!&quot;;</div><div class="line">.box&#123;</div><div class="line">    &amp;:after&#123;</div><div class="line">        content: $content;</div><div class="line">    &#125;</div><div class="line">    &amp;:before&#123;</div><div class="line">        content: &quot; #&#123;$content&#125; &quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译出来的CSS为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.box:after &#123;</div><div class="line">  content: &quot;Hello Sass!&quot;; </div><div class="line">&#125;</div><div class="line">.box:before &#123;</div><div class="line">  content: &quot; Hello Sass! &quot;; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>除了在变量中做字符连接运算之外，还可以直接通过 +，把字符连接在一起：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">div&#123;</div><div class="line">    cursor: e + -resize;</div><div class="line">&#125;</div><div class="line"></div><div class="line">span&#123;</div><div class="line">    cursor: &quot;e&quot; + &quot;-resize&quot;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译出来的CSS为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">div &#123;</div><div class="line">  cursor: e-resize;</div><div class="line">&#125;</div><div class="line"></div><div class="line">span &#123;</div><div class="line">  cursor: &quot;e-resize&quot;; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>==注意==:</strong>如果有引号的字符串被添加了一个没有引号的字符串 （也就是，带引号的字符串在 + 符号左侧）， 结果会是一个有引号的字符串。 同样的，如果一个没有引号的字符串被添加了一个有引号的字符串 （没有引号的字符串在 + 符号左侧）， 结果将是一个没有引号的字符串。 也就是说始终与加号左边的保持一致:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">p:before &#123;</div><div class="line">  content: &quot;Foo &quot; + Bar;</div><div class="line">  font-family: sans- + &quot;serif&quot;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译出来的CSS为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">p:before &#123;</div><div class="line">  content: &quot;Foo Bar&quot;;</div><div class="line">  font-family: sans-serif; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>根据<a href="http://www.imooc.com/learn/311" target="_blank" rel="external">慕课网sass入门篇</a>整理</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CSS中目前只有calc()能做运算，但是在Sass中，可以做各种数学运算……
    
    </summary>
    
      <category term="sass" scheme="http://lxchuan12.github.io/categories/sass/"/>
    
    
      <category term="sass" scheme="http://lxchuan12.github.io/tags/sass/"/>
    
  </entry>
  
  <entry>
    <title>js如何判断对象为空</title>
    <link href="http://lxchuan12.github.io/2016/08/27/20160827-Judge%20null%20object%20by%20javascript/"/>
    <id>http://lxchuan12.github.io/2016/08/27/20160827-Judge null object by javascript/</id>
    <published>2016-08-27T14:46:23.000Z</published>
    <updated>2016-08-29T15:46:51.607Z</updated>
    
    <content type="html"><![CDATA[<p>vuejs项目中，遇到要判断data中的对象是否为空……<a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">var vm = new Vue(&#123;</div><div class="line">  el:&apos;#demo&apos;,</div><div class="line">  data:&#123;</div><div class="line">    msg:&apos;hello&apos;,</div><div class="line">    ms:&#123;&#125;</div><div class="line">  &#125;,</div><div class="line">  created ()&#123;</div><div class="line">    let that = this;</div><div class="line">    console.log(that.ms);</div><div class="line">    console.log(that.msg);</div><div class="line">    console.log(that.ms === null);//false</div><div class="line">    if(that.ms)&#123;//true</div><div class="line">      console.log(1);//1,</div><div class="line">    &#125;;</div><div class="line">    console.log(that.ms === undefined);//false</div><div class="line">    for(var attr in that.ms)&#123;</div><div class="line">      console.log(attr);</div><div class="line">      console.log(&apos;2&apos;);</div><div class="line">    &#125;</div><div class="line">    //console.log(&apos;3&apos;);</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><a href="http://jsbin.com/xasemec/22/edit?html,js,console" target="_blank" rel="external">点击查看详情vuejs</a></p>
<p>jquery有工具方法$.isEmptyObject(),查看源码发现这样实现的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">isEmptyObject:function(obj)&#123;</div><div class="line">    var name;</div><div class="line">    for(name in obj)&#123;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">    return true;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这是利用了for in无法循环到系统自带的属性值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//比如：</div><div class="line">function Watch()&#123;&#125;</div><div class="line">//Watch.prototype.constructor = Watch;</div><div class="line">//系统自己生成。写出来这句也无法用for in循环到。</div><div class="line">for (var attr in Watch.prototype)&#123;</div><div class="line">    console.log(&apos;can not console&apos;);//无法输出。</div><div class="line">&#125;</div><div class="line">//如果自己写,则可以输出show.</div><div class="line">Watch.prototype.show = function()&#123;&#125;</div></pre></td></tr></table></figure></p>
<p>这时想起了<a href="http://www.tuicool.com/articles/3meE3a" target="_blank" rel="external">js中数组遍历for与for in区别(强烈建议不要使用for in遍历数组)</a><br>$.isPlainObject()方法：<a href="http://www.365mini.com/page/jquery_isplainobject.htm" target="_blank" rel="external">判断”纯粹的对象”，就是该对象是通过”{}”或”new Object”创建的。</a><br>$.isPlainObject( document.location ) ); // false(在IE中返回true)</p>
<p><strong>参考资料：</strong><a href="http://www.cnblogs.com/TomXu/archive/2011/12/15/2288411.html" target="_blank" rel="external">汤姆大叔博客</a></p>
<p>小结:js一切皆为对象，了解面对对象编程很有好处。能研究一遍jquery源码,定能更上一层楼。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;vuejs项目中，遇到要判断data中的对象是否为空……
    
    </summary>
    
      <category term="JavaScript" scheme="http://lxchuan12.github.io/categories/JavaScript/"/>
    
    
      <category term="vuejs" scheme="http://lxchuan12.github.io/tags/vuejs/"/>
    
      <category term="js" scheme="http://lxchuan12.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>iPhone safari可以通过访问链接来打开微信</title>
    <link href="http://lxchuan12.github.io/2016/08/20/20160820-safari-open-wechat/"/>
    <id>http://lxchuan12.github.io/2016/08/20/20160820-safari-open-wechat/</id>
    <published>2016-08-20T15:35:26.000Z</published>
    <updated>2016-08-22T15:33:42.579Z</updated>
    
    <content type="html"><![CDATA[<p>今天发现：iPhone safari可以可以通过访问链接来打开微信。而安卓手机不行。不多说，直接show the code……<a id="more"></a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">let ua = window.navigator.userAgent.toLowerCase();</div><div class="line">if ((ua.indexOf(&apos;iphone&apos;)&gt;-1)&amp;&amp;(ua.indexOf(&apos;safari&apos;)&gt;-1))&#123;</div><div class="line">    window.location.href = &apos;weixin:http://weixin.qq.com&apos;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天发现：iPhone safari可以可以通过访问链接来打开微信。而安卓手机不行。不多说，直接show the code……
    
    </summary>
    
      <category term="JavaScript" scheme="http://lxchuan12.github.io/categories/JavaScript/"/>
    
    
      <category term="js" scheme="http://lxchuan12.github.io/tags/js/"/>
    
      <category term="wechat" scheme="http://lxchuan12.github.io/tags/wechat/"/>
    
  </entry>
  
  <entry>
    <title>(转)一种代码量更少的(micro clearfix)清除浮动的hack</title>
    <link href="http://lxchuan12.github.io/2016/08/19/20160819-css-micro%20clearfix-hack/"/>
    <id>http://lxchuan12.github.io/2016/08/19/20160819-css-micro clearfix-hack/</id>
    <published>2016-08-19T15:24:12.000Z</published>
    <updated>2016-08-19T15:36:30.924Z</updated>
    
    <content type="html"><![CDATA[<p>clearfix hack做为一种无需借助额外标签清除浮动的方法已经人尽皆知了，本文给出一种优化方案，可以进一步减少所需css的数量……<a id="more"></a></p>
<p>Demo: <a href="http://nicolasgallagher.com/micro-clearfix-hack/demo/" target="_blank" rel="external">Micro clearfix hack</a></p>
<p>Known support: Firefox 3.5+, Safari 4+, Chrome, Opera 9+, IE 6+</p>
<p>micro clearfix基于 <a href="http://www.yuiblog.com/blog/2010/09/27/clearfix-reloaded-overflowhidden-demystified/" target="_blank" rel="external">Thierry Koblentz’s “clearfix reloaded</a>reloaded优化而来，适用于现代浏览器（modern browsers）</p>
<p>下面是micro clearfix的代码片段<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">.cf:before,</div><div class="line">.cf:after &#123;</div><div class="line">    content: &quot; &quot;; </div><div class="line">    display: table; </div><div class="line">&#125;</div><div class="line">.cf:after &#123;</div><div class="line">    clear: both;</div><div class="line">&#125;</div><div class="line">.cf &#123;</div><div class="line">    *zoom: 1;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>“micro clearfix”生成伪类元素，并将其display属性设置为table，这样就会创建一个匿名<a href="http://www.w3.org/TR/CSS2/tables.html#anonymous-boxes" target="_blank" rel="external">table-cell</a>，同时生成了新的BFC，这样意味着<br>:before伪类会阻止上边距折叠，:after伪类用于清除浮动，好处是不用隐藏产生的内容了，所需要的css代码就变少了。</p>
<p>为了清除浮动包含:before选择器是没必要的，但是:before的加入可以阻止top-margins折叠，这样有两个好处：</p>
<p>同其他使用BFC方式清除浮动一样，确保了视觉上的一致，例如使用overflow:hidden<br>IE 6/7中使用zoom:1 时，确保了视觉上的一致<br>N.B.: 有一个细节：IE 6/7中在新的BFC中浮动元素的下边距是不会包含在内的，进一步的描述可以看这里： <a href="http://nicolasgallagher.com/better-float-containment-in-ie/" target="_blank" rel="external">Better float containment in IE using CSS expressions</a>.<br>content:” “的使用避免了一个Opera的bug，如果contenteditable属性同时出现在元素中时，这个bug会在待清除元素周围生成空格。一种可选的修复方案是使用 font:0/0 a，多谢Sergio Cerrutti测试出这个bug</p>
<p>转载于：<a href="http://www.jianshu.com/p/7521ec9d8f24" target="_blank" rel="external">一种代码量更少的(micro clearfix)清除浮动的hack</a></p>
<p>英文版：<a href="http://nicolasgallagher.com/micro-clearfix-hack/" target="_blank" rel="external">A new micro clearfix hack</a>，转载标明出处，谢谢！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;clearfix hack做为一种无需借助额外标签清除浮动的方法已经人尽皆知了，本文给出一种优化方案，可以进一步减少所需css的数量……
    
    </summary>
    
      <category term="CSS" scheme="http://lxchuan12.github.io/categories/CSS/"/>
    
    
      <category term="css" scheme="http://lxchuan12.github.io/tags/css/"/>
    
      <category term="clearfix" scheme="http://lxchuan12.github.io/tags/clearfix/"/>
    
  </entry>
  
  <entry>
    <title>vuejs生态，自顶而下学习</title>
    <link href="http://lxchuan12.github.io/2016/08/18/20160818-chat/"/>
    <id>http://lxchuan12.github.io/2016/08/18/20160818-chat/</id>
    <published>2016-08-18T15:24:12.000Z</published>
    <updated>2016-08-20T15:48:10.476Z</updated>
    
    <content type="html"><![CDATA[<p>由于我git比较活跃，有幸收到大搜车前端leader芋头（前端乱炖网站创始人，颜文字APP）的邮件，并与之交流。<a id="more"></a><a href="https://www.zhihu.com/people/li-shou-xin" target="_blank" rel="external">小芋头君的知乎主页</a>.<br><a href="http://f2e.souche.com/blog/" target="_blank" rel="external">大搜车前端团队博客</a>.</p>
<h3 id="大概整理："><a href="#大概整理：" class="headerlink" title="大概整理："></a>大概整理：</h3><blockquote>
<p>1、自顶而下学习，看vuejs文章，熟悉其生态圈，怎么产生的，解决了什么问题。不是会写，就行。很多人看完vuejs教程都会写。</p>
<blockquote>
<p>比如angularjs，双向绑定，vuejs是单向绑定，虽然也可以双向绑定。<br>2、自我管理，自我规划，自我提升。综合能力。<br>3、追新，有些人工作了几年就不学新东西，这样没提升。<br>4、前端工程化，（打包工具只是其中一小部分）。<br>5、目前重要的不是学ES6，而是把基础夯实。</p>
</blockquote>
</blockquote>
<p>这让我想起：知乎上一个提问<a href="https://www.zhihu.com/question/49164656/noti-answers?group_id=744949063161507840" target="_blank" rel="external">大学毕业做前端工作感觉最近遇到了瓶颈，不知道该如何提升自己？</a></p>
<blockquote>
<p>作者：林獺<br>链接：<a href="https://www.zhihu.com/question/49164656/answer/114625869" target="_blank" rel="external">https://www.zhihu.com/question/49164656/answer/114625869</a><br>来源：知乎<br>著作权归作者所有，转载请联系作者获得授权。</p>
</blockquote>
<p>首先，正视自己的能力。前端的新技术，不是门坎较低、就是给人一种容易掌握的错觉。Less/Sass 不谈，你学了 Angular，懂得 data-binding、router 等背后的实现原理吗？你虽会用 Node 搭建一个本地 server，但懂得 I/O 流程、HTTP 和操作系统知识吗？你能不诉诸书本和搜索引擎，写出几个 JS 设计模式和继承模式吗？你能完全脱离 jQuery 来操纵 DOM 和 Ajax 吗？你知道怎么写 CSS 选择器能让浏览器解释速度最快吗？你会在开发过程中，下意识地追求 HTTP 请求最少吗？……<br>如果你不能的话，那就需要重新审视自己，是否被一时的自我成就和满足所障目，而忘却了技术最重要的永远是基础。<br>如果你能的话，恭喜你，你已经不止是合格的前端了。这样的话，你要怎么做才能走出平阳、找到归宿呢？<br>我的建议是积累经验——积累工作和项目的经验，闲时继续学习并深入新技术。你的工作效率高、闲时多，这是好事。我毕业后第一份工作也是如此，领导缺乏技术嗅觉，技术路线过时老旧。我是这么应对的：凭越发娴熟的技能，加快工作速度，换来学习的时间。接着，主动把你的新技能移植到公司项目中。例如 Gulp、Less/Sass，都是开发环境下的利器，开发环境下你想怎么用就怎么用，外人只看到生产代码；甚或 Angular——遇到独力负责的中重量级项目，主动考虑此类 MVC 框架的可行性；有时不是项目和领导不允许使用新框架，而是自己不愿走出舒适圈、缺乏实践自信。<br>（业余时间，用你的 Gulp、Angular 写一些个人项目放在 GitHub 上，配以 Node mock server 甚至 Redis 数据库，有助理解前后端交互和数据库的组织，也增加面试的资本。）<br>当你「利用」这个公司，积累了新老技术的实践经验后，便是另谋高就的时机了。你的简历不仅会有上述技能，还会有「一力为旧公司引入任务构建、工作流等新技术」之类的 impressing 字眼。<br>在投简历时，开始考虑实质回报以外更深层的东西。你可以询问对方，贵团队的前端技术栈为何，未来的技术规划为何。因为接下来的新工作，在你的职场生涯中，是最能影响你的技术修炼的——你将第一次名正言顺地学习技术、并将其付诸实践、甚至有同样技术路线的同事大牛带领。对比上一家，事半功倍。</p>
<h3 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h3><p>坚持学习，自我提升；<br>重视基础！<br>努力争取能进好团队，学习更快。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于我git比较活跃，有幸收到大搜车前端leader芋头（前端乱炖网站创始人，颜文字APP）的邮件，并与之交流。
    
    </summary>
    
      <category term="自我成长" scheme="http://lxchuan12.github.io/categories/%E8%87%AA%E6%88%91%E6%88%90%E9%95%BF/"/>
    
    
      <category term="self-growth" scheme="http://lxchuan12.github.io/tags/self-growth/"/>
    
  </entry>
  
  <entry>
    <title>弹窗（modal）垂直水平居中</title>
    <link href="http://lxchuan12.github.io/2016/08/17/20160817-modal-center/"/>
    <id>http://lxchuan12.github.io/2016/08/17/20160817-modal-center/</id>
    <published>2016-08-17T15:07:15.000Z</published>
    <updated>2016-08-17T15:58:06.795Z</updated>
    
    <content type="html"><![CDATA[<p>今天发现{margin:0 auto}竟然能使固定定位fixed(脱离文档流）（在chrome手机模拟器和chrome浏览器）水平居中。<br>在我安卓手机(4.2.2)不行。后来改成{margin-left:-定宽/2}，于是在安卓手机也可以了……<a id="more"></a></p>
<h2 id="弹窗垂直水平居中："><a href="#弹窗垂直水平居中：" class="headerlink" title="弹窗垂直水平居中："></a>弹窗垂直水平居中：</h2><h3 id="方法1："><a href="#方法1：" class="headerlink" title="方法1："></a>方法1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">.modal&#123;</div><div class="line">    position:fixed;</div><div class="line">    width:250px;</div><div class="line">    height:100px;</div><div class="line">    background:#ececec;</div><div class="line">    left:50%;</div><div class="line">    top:50%;</div><div class="line">    margin-left:-125px;</div><div class="line">    margin-top:-50px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>小结:</strong>fixed，支持到IE7，IE6不支持。modal定宽定高。</p>
<h3 id="方法2："><a href="#方法2：" class="headerlink" title="方法2："></a>方法2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">.modal&#123;</div><div class="line">    position:fixed;</div><div class="line">    width:250px;</div><div class="line">    height:100px;</div><div class="line">    background:#ececec;</div><div class="line">    left:50%;</div><div class="line">    top:50%;</div><div class="line">    -webkit-transform:translate(-50%,-50%);</div><div class="line">    transform:translate(-50%,-50%);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>小结:</strong>不支持IE9+，modal不需定宽定高，手机端可用。（发现如果有其他的transform，好像先执行其他的，在移动到中心。）另外，发现{margin:0 auto}:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">.modal&#123;</div><div class="line">    position:fixed;</div><div class="line">    width:250px;</div><div class="line">    left:0;</div><div class="line">    right:0;</div><div class="line">    top:40%;</div><div class="line">    bottom:auto;</div><div class="line">    margin:0 auto;</div><div class="line">    background:#ececec;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>竟然能使固定定位fixed(脱离文档流）（在chrome手机模拟器和chrome浏览器）水平居中。<br>在我安卓手机(4.2.2)不行。后来改成{margin-left:-定宽/2}，于是在安卓手机也可以了</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天发现{margin:0 auto}竟然能使固定定位fixed(脱离文档流）（在chrome手机模拟器和chrome浏览器）水平居中。&lt;br&gt;在我安卓手机(4.2.2)不行。后来改成{margin-left:-定宽/2}，于是在安卓手机也可以了……
    
    </summary>
    
      <category term="css" scheme="http://lxchuan12.github.io/categories/css/"/>
    
    
      <category term="css" scheme="http://lxchuan12.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>js手机号码正则表达式</title>
    <link href="http://lxchuan12.github.io/2016/08/16/20160816-reg-phone-num/"/>
    <id>http://lxchuan12.github.io/2016/08/16/20160816-reg-phone-num/</id>
    <published>2016-08-16T15:06:16.000Z</published>
    <updated>2016-08-20T15:51:20.899Z</updated>
    
    <content type="html"><![CDATA[<p>前端做了手机号的限制，但有的号码通过了前端验证，但依旧数据无法保存成功，但又没错误提示。与后台联调发现，原来是后端也做了限制，还不一样……<a id="more"></a><br><strong>1.前端验证</strong><br>var reg = /^1\d{10}$/;</p>
<p><strong>2.后端验证</strong><br>var reg = /^1[3|4|5|7|8][0-9]{9}$/; //验证规则<br>不知其合理性，普适性，于是搜索了下。</p>
<p><strong>3.最后采用：</strong></p>
<p>var reg = /^1\d{10}$/; //验证规则<br>var phoneNum = ‘18296821923’;//手机号码<br>var flag = reg.test(phoneNum); //true</p>
<p><strong>4.参考资料：</strong><br><a href="http://caibaojian.com/phone-regexp.html" target="_blank" rel="external">JS最新手机号码检验正则表达式</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前端做了手机号的限制，但有的号码通过了前端验证，但依旧数据无法保存成功，但又没错误提示。与后台联调发现，原来是后端也做了限制，还不一样……
    
    </summary>
    
      <category term="js" scheme="http://lxchuan12.github.io/categories/js/"/>
    
    
      <category term="js" scheme="http://lxchuan12.github.io/tags/js/"/>
    
      <category term="reg" scheme="http://lxchuan12.github.io/tags/reg/"/>
    
  </entry>
  
  <entry>
    <title>new Date()的浏览器兼容性问题</title>
    <link href="http://lxchuan12.github.io/2016/08/13/20160813-tip-js-new-date/"/>
    <id>http://lxchuan12.github.io/2016/08/13/20160813-tip-js-new-date/</id>
    <published>2016-08-13T14:03:29.000Z</published>
    <updated>2016-08-14T15:30:20.655Z</updated>
    
    <content type="html"><![CDATA[<h3 id="兼容性问题"><a href="#兼容性问题" class="headerlink" title="兼容性问题"></a>兼容性问题</h3><p>var  date = new Date(‘2016-08-13 13:25:50’).getTime();这种chrome下没问题，但ie和firefox下是NaN,在Safari下也有问题……<a id="more"></a></p>
<p>var  date = new Date(‘2016-08-13 13:25:50’).getTime(); 这么写的时候所有浏览器都没有问题。</p>
<p>所以遇到兼容的时候：<br>这样就可以将上面那种格式yyyy-MM-dd改为yyyy/MM/dd 再去转换</p>
<p>var  date = new Date((‘2016-08-13 13:25:50’).replace(new RegExp(“-“,”g”),”/“)).getTime()</p>
<h3 id="另外："><a href="#另外：" class="headerlink" title="另外："></a>另外：</h3><p>+new Date()=== new Date().getTime();<br>true.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;d&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;div id=&quot;getTime&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;div id=&quot;type&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">    var d1 = document.getElementById(&apos;d&apos;);</div><div class="line">    var getTime1 = document.getElementById(&apos;getTime&apos;);</div><div class="line">    var type1 = document.getElementById(&apos;type&apos;);</div><div class="line">    var date = new Date(&apos;2016-08-13 13:25:50&apos;);</div><div class="line">    d.innerHTML = date.toString();</div><div class="line">    d.innerHTML = date.getTime();</div><div class="line">    type1.innerHTML = typeof date.toString();</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<h3 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h3><p><a href="https://segmentfault.com/a/1190000003710954?mType=Group" target="_blank" rel="external">JS原生Date类型方法的一些冷知识</a><br><a href="http://blog.csdn.net/blueheart20/article/details/44902747" target="_blank" rel="external">javascript中new Date()的浏览器兼容性问题</a><br><a href="http://www.bubuko.com/infodetail-1643478.html" target="_blank" rel="external">js new Date(“2016-07-01 08:00:00”) 格式在IE内核浏览器中显示NaN的问题</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;兼容性问题&quot;&gt;&lt;a href=&quot;#兼容性问题&quot; class=&quot;headerlink&quot; title=&quot;兼容性问题&quot;&gt;&lt;/a&gt;兼容性问题&lt;/h3&gt;&lt;p&gt;var  date = new Date(‘2016-08-13 13:25:50’).getTime();这种chrome下没问题，但ie和firefox下是NaN,在Safari下也有问题……
    
    </summary>
    
      <category term="javascript" scheme="http://lxchuan12.github.io/categories/javascript/"/>
    
    
      <category term="date" scheme="http://lxchuan12.github.io/tags/date/"/>
    
      <category term="javascript" scheme="http://lxchuan12.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>vue js两次请求</title>
    <link href="http://lxchuan12.github.io/2016/08/12/20160812-vue-route%20request/"/>
    <id>http://lxchuan12.github.io/2016/08/12/20160812-vue-route request/</id>
    <published>2016-08-12T14:59:16.000Z</published>
    <updated>2016-08-16T15:06:06.197Z</updated>
    
    <content type="html"><![CDATA[<p>当使用vue-resource发送注册的POST请求时，Fiddler捕获到了2次请求，第1次是由浏览器发送的OPTIONS预请求，第2次才是实际的POST请求……<a id="more"></a>这和使用$.ajax时是不一样的，因为$.ajax会将非GET请求的Content-Type设置为application/x-www-form-urlencoded，而vue-resource发送POST请求的Content-Type为application/json;charset=UTF-8。</p>
<h2 id="1-全局启用："><a href="#1-全局启用：" class="headerlink" title="1.全局启用："></a>1.全局启用：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Vue.http.options.emulateJSON = true</div></pre></td></tr></table></figure>
<h2 id="2-局部启用"><a href="#2-局部启用" class="headerlink" title="2.局部启用"></a>2.局部启用</h2><p>启用了emulateJSON选项后，使得POST请求的Content-Type变为application/x-www-form-urlencoded<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">this.$http.post(this.registerUrl, this.registerModel ,&#123; emulateJSON : true&#125;)</div><div class="line">    .then( (response) =&gt; &#123;</div><div class="line">        this.msg = ‘注册成功！‘</div><div class="line">    &#125;)</div></pre></td></tr></table></figure></p>
<h2 id="3-参考资料："><a href="#3-参考资料：" class="headerlink" title="3.参考资料："></a>3.参考资料：</h2><p><a href="https://github.com/vuejs/vue-resource/blob/master/docs/http.md" target="_blank" rel="external">参考官方文档</a><br><a href="http://www.mamicode.com/info-detail-1439661.html" target="_blank" rel="external">$.ajax和vue-resource实现OAuth</a><br><a href="http://www.doc00.com/doc/1001004eg" target="_blank" rel="external">Vue.js——vue-resource全攻略</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当使用vue-resource发送注册的POST请求时，Fiddler捕获到了2次请求，第1次是由浏览器发送的OPTIONS预请求，第2次才是实际的POST请求……
    
    </summary>
    
      <category term="vuejs" scheme="http://lxchuan12.github.io/categories/vuejs/"/>
    
    
      <category term="vuejs" scheme="http://lxchuan12.github.io/tags/vuejs/"/>
    
  </entry>
  
  <entry>
    <title>chrome跨域设置</title>
    <link href="http://lxchuan12.github.io/2016/08/11/20160811-chrome-settings/"/>
    <id>http://lxchuan12.github.io/2016/08/11/20160811-chrome-settings/</id>
    <published>2016-08-11T14:55:38.000Z</published>
    <updated>2016-08-11T15:46:44.843Z</updated>
    
    <content type="html"><![CDATA[<p>今天用vuejs,与后端联调,发现用localhost或者本机ip访问本地资源，和后端接口资源，没有数据，google发现是chrome的安全机制，不允许跨域……<a id="more"></a></p>
<p>解决方案：<br>浏览器版本：chrome 52。<br>1、在桌面找到chrome浏览器快捷图标并点击鼠标右键的属性一栏。(或者任务栏选中chrome右击——google chrome右击属性)</p>
<p>2、在属性页面中的目标输入框里加上   –args –disable-web-security.–args可省略。</p>
<p>3、点击应用和确定后关闭属性页面，并打开chrome浏览器即可。</p>
<p>使用本机ip地址加端口号，访问本地资源。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天用vuejs,与后端联调,发现用localhost或者本机ip访问本地资源，和后端接口资源，没有数据，google发现是chrome的安全机制，不允许跨域……
    
    </summary>
    
      <category term="调试技巧" scheme="http://lxchuan12.github.io/categories/%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="chrome" scheme="http://lxchuan12.github.io/tags/chrome/"/>
    
  </entry>
  
  <entry>
    <title>清除IE下input的默认叉</title>
    <link href="http://lxchuan12.github.io/2016/08/10/20160810-ms-clear/"/>
    <id>http://lxchuan12.github.io/2016/08/10/20160810-ms-clear/</id>
    <published>2016-08-10T15:00:38.000Z</published>
    <updated>2016-08-10T15:50:19.919Z</updated>
    
    <content type="html"><![CDATA[<p>IE10下的Input Text和谷歌下面的 input search 一旦输入内容，会在最右端出现一个叉号，点击后，内容就会自动清空，input password有小眼睛，点击显示密码。看似方便，其实有些场景并不需要，需要写代码清除掉……<a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">/*--清除谷歌浏览器下的 text 叉号*/</div><div class="line"></div><div class="line">input::-webkit-text-cancel-button&#123;</div><div class="line">    display: none;</div><div class="line">&#125; </div><div class="line">input[type=text]::-ms-clear&#123;</div><div class="line">    display: none;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">/*--清除IE下的 search 叉号*/</div><div class="line"></div><div class="line">/*当然如果想清除所有的input的话 ，只需把[type=search]去掉即可。*/</div><div class="line"></div><div class="line">input::-webkit-search-cancel-button&#123;</div><div class="line">    display: none;</div><div class="line">&#125; </div><div class="line"></div><div class="line">input[type=search]::-ms-clear&#123;</div><div class="line">    display: none;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* 小眼睛 */</div><div class="line">input[type=password]::-ms-reveal&#123;</div><div class="line">    display:none;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>待完善……</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;IE10下的Input Text和谷歌下面的 input search 一旦输入内容，会在最右端出现一个叉号，点击后，内容就会自动清空，input password有小眼睛，点击显示密码。看似方便，其实有些场景并不需要，需要写代码清除掉……
    
    </summary>
    
      <category term="css" scheme="http://lxchuan12.github.io/categories/css/"/>
    
    
      <category term="css" scheme="http://lxchuan12.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>line-height学习笔记</title>
    <link href="http://lxchuan12.github.io/2016/08/08/20160808-line-height/"/>
    <id>http://lxchuan12.github.io/2016/08/08/20160808-line-height/</id>
    <published>2016-08-08T15:28:23.000Z</published>
    <updated>2016-08-09T15:09:26.569Z</updated>
    
    <content type="html"><![CDATA[<p>line-height<br>看似简单，其实还是有挺多不知道的奥妙。比如line-height:300%,line-height:3,有什么不同……<a id="more"></a></p>
<h2 id="形式化语法"><a href="#形式化语法" class="headerlink" title="形式化语法"></a>形式化语法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">normal | &lt;number&gt; | &lt;length&gt; | &lt;percentage&gt;</div></pre></td></tr></table></figure>
<h2 id="取值"><a href="#取值" class="headerlink" title="取值"></a>取值</h2><h3 id="normal"><a href="#normal" class="headerlink" title="normal"></a>normal</h3><p>取决于用户代理。桌面浏览器（包括火狐浏览器）使用默认值，约为1.2，这取决于元素的 font-family。</p>
<h3 id=""><a href="#" class="headerlink" title=""></a><number></number></h3><p>所用的值是无单位数值<number>乘以元素的 font size。计算出来的值与使用数值指定的一样。大多数情况下，使用这种方法设置line-height是首选方法，在继承情况下不会有异常的值。    </number></p>
<h3 id="-1"><a href="#-1" class="headerlink" title=""></a><length></length></h3><p>指定<length>  用于计算 line box 的高度。查看<length> 获取可能的单位。</length></length></p>
<h3 id="-2"><a href="#-2" class="headerlink" title=""></a><percentage></percentage></h3><p>与元素自身的字体大小有关。计算出的值是给定的百分比值乘以元素计算出的字体大小。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta charset=&quot;utf-8&quot;/&gt;</div><div class="line">&lt;title&gt;line-height&lt;/title&gt;</div><div class="line">&lt;style type=&quot;text/css&quot;&gt;</div><div class="line">p&#123;margin:10px;background:#ddd;&#125;</div><div class="line">p+p&#123;margin-left:40px;&#125;</div><div class="line"></div><div class="line">body&#123;font-size:30px;&#125;</div><div class="line"></div><div class="line">.m-demo&#123;line-height:40px;&#125;</div><div class="line">.m-demo p&#123;background:#ddd;&#125;</div><div class="line">.m-demo .p1&#123;line-height:3em;&#125;</div><div class="line">.m-demo .p2&#123;line-height:300%;&#125;</div><div class="line">.m-demo .p3&#123;line-height:3;&#125;</div><div class="line"></div><div class="line">.m-demo2&#123;line-height:300%;&#125;</div><div class="line">.m-demo2 p&#123;background:#fbb;&#125;</div><div class="line">.m-demo2 .p1&#123;font-size:16px;&#125;</div><div class="line"></div><div class="line">.m-demo3&#123;line-height:3;&#125;</div><div class="line">.m-demo3 p&#123;background:#0dd;&#125;</div><div class="line">.m-demo3 .p1&#123;font-size:16px;&#125;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;div class=&quot;m-demo&quot;&gt;</div><div class="line">    &lt;p&gt;行高：line-height:40px;&lt;/p&gt;</div><div class="line">    &lt;p class=&quot;p1&quot;&gt;行高：line-height:3em;&lt;/p&gt;</div><div class="line">    &lt;p class=&quot;p2&quot;&gt;行高：line-height:300%;&lt;/p&gt;</div><div class="line">    &lt;p class=&quot;p3&quot;&gt;行高：line-height:3;&lt;/p&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div class=&quot;m-demo2&quot;&gt;</div><div class="line">    &lt;p&gt;行高：line-height:300%;&lt;/p&gt;</div><div class="line">    &lt;p class=&quot;p1&quot;&gt;字体大小：font-size:16px;&lt;/p&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div class=&quot;m-demo3&quot;&gt;</div><div class="line">    &lt;p&gt;行高：line-height:3;&lt;/p&gt;</div><div class="line">    &lt;p class=&quot;p1&quot;&gt;字体大小：font-size:16px;&lt;/p&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<h2 id="自己的理解："><a href="#自己的理解：" class="headerlink" title="自己的理解："></a>自己的理解：</h2><p>1、normal由浏览器决定，一般是1.1到1.2之间，1.14左右。</p>
<p>2、最近遇到，安卓浏览器显示placeholder 垂直不居中，去掉line-height即可。或者line-height:normal。</p>
<p>3、font-size:30px;line-height:3em;(90px),<br>line-height:300px;(90px),<br>line-height:3;(90px)<br>百分比和数字的区别：number是直接继承。（推荐使用无单位数值给line-height赋值）<br>比如：m-demo2行高是90px;m-demo3行高是48px;</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/line-height" target="_blank" rel="external">参见：MDN line-height</a><br><a href="css.doyoe.com">参见：CSS3在线手册</a><br><a href="http://www.ayqy.net/doc/css2-1/visudet.html#propdef-line-height" target="_blank" rel="external">参见：css2.1规范</a></p>
<h3 id="感悟，多查规范，看MDN。善用google搜索。"><a href="#感悟，多查规范，看MDN。善用google搜索。" class="headerlink" title="感悟，多查规范，看MDN。善用google搜索。"></a>感悟，多查规范，看MDN。善用google搜索。</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;line-height&lt;br&gt;看似简单，其实还是有挺多不知道的奥妙。比如line-height:300%,line-height:3,有什么不同……
    
    </summary>
    
      <category term="CSS" scheme="http://lxchuan12.github.io/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://lxchuan12.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>(转)30个你必须记住的CSS选择器</title>
    <link href="http://lxchuan12.github.io/2016/08/07/20160807-The%2030%20CSS%20Selectors%20you%20Must%20Memorize/"/>
    <id>http://lxchuan12.github.io/2016/08/07/20160807-The 30 CSS Selectors you Must Memorize/</id>
    <published>2016-08-07T15:10:41.000Z</published>
    <updated>2016-08-07T15:51:07.222Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>也许你了解了基本的 id,class和descendant选择器，并且整天都在调用，如果是这样的话，那你正在错过拥有灵活性更大的选择器。这篇文章里面提到的大部分选择器都是在CSS3标准下的，所以它们只能在相应最新版本的浏览器中才能生效，你完全应该把这些都记在你聪明的脑袋里面……<a id="more"></a></p>
<h2 id="1"><a href="#1" class="headerlink" title="1. *"></a>1. *</h2><pre><code>* {
  margin: 0;
  padding: 0;
}
</code></pre><p>在我们看比较高级的选择器之前，应该认识下这个众所周知的清空选择器。星号(*)会将页面上所有每一个元素都选到。许多开发者都用它来清空margin和padding。当然你在练习的时候使用这个没问题，但是我不建议在生产环境中使用它。它会给浏览器凭添许多不必要的东西。</p>
<p>*也可以用来选择某元素的所有子元素:</p>
<pre><code>#container * {
  border: 1px solid black;
}
</code></pre><p>它会选中#container下的所有元素。当然，我还是不建议你去使用它。<a href="http://cdn.tutsplus.com/net/uploads/legacy/840_cssSelectors/selectors/star.html" target="_blank" rel="external">DEMO</a></p>
<p><strong>兼容性</strong>：</p>
<ul>
<li>IE6+</li>
<li>Firefox</li>
<li>Chrome</li>
<li>Safari</li>
<li>Opera</li>
</ul>
<h2 id="2-X"><a href="#2-X" class="headerlink" title="2.#X"></a>2.#X</h2><pre><code>#container {
   width: 960px;
   margin: auto;
}
</code></pre><p>在选择器中使用#可以用id来定位某个元素。大家通常都会这么使用，使用的时候大家还是得相当小心的。  </p>
<p>需要问自己一下：我是不是必须要给这个元素来赋值个id来定位它呢？</p>
<p>id选择器是很严格的并且你没办法去复用它。如果可以的话，首先试试用标签名字，HTML5中的新元素，或者是伪类。<a href="http://cdn.tutsplus.com/net/uploads/legacy/840_cssSelectors/selectors/id.html" target="_blank" rel="external">DEMO</a>  </p>
<p><strong>兼容性</strong>:</p>
<ul>
<li>IE6+</li>
<li>Firefox</li>
<li>Chrome</li>
<li>Safari</li>
<li>Opera</li>
</ul>
<h2 id="3-X"><a href="#3-X" class="headerlink" title="3. .X"></a>3. .X</h2><pre><code>.error {
  color: red;
}
</code></pre><p>这是个class选择器。它跟id选择器不同的是，它可以定位多个元素。当你想对多个元素进行样式修饰的时候就可以使用class。当你要对某个特定的元素进行修饰那就是用id来定位它。<a href="http://cdn.tutsplus.com/net/uploads/legacy/840_cssSelectors/selectors/class.html" target="_blank" rel="external">DEMO</a></p>
<p><strong>兼容性</strong>:</p>
<ul>
<li>IE6+</li>
<li>Firefox</li>
<li>Chrome</li>
<li>Safari</li>
<li>Opera</li>
</ul>
<h2 id="4-X-Y"><a href="#4-X-Y" class="headerlink" title="4.X Y"></a>4.X Y</h2><pre><code>li a {
  text-decoration: none;
}
</code></pre><p>下一个常用的就是descendant(后代)选择器(后代指所有后代，儿子、孙子后代等)。如果你想更加具体的去定位元素，你可以使用它。例如，假如，你不需要定位所有的a元素，而只需要定位li标签下的a标签？这时候你就需要使用descendant选择器了。  </p>
<p>专家提示：如果你的选择器像X Y Z A B.error这样，那你就错了。时刻都提醒自己，是否真的需要对那么多元素修饰。<a href="http://cdn.tutsplus.com/net/uploads/legacy/840_cssSelectors/selectors/descend.html" target="_blank" rel="external">DEMO</a></p>
<p><strong>兼容性</strong>:</p>
<ul>
<li>IE6+</li>
<li>Firefox</li>
<li>Chrome</li>
<li>Safari</li>
<li>Opera</li>
</ul>
<h2 id="5-X"><a href="#5-X" class="headerlink" title="5.X"></a>5.X</h2><pre><code>a { color: red; }
ul { margin-left: 0; }
</code></pre><p>如果你想定位页面上所有的某标签，不是通过id或者是’class’，这简单，直接使用类型选择器。<a href="http://cdn.tutsplus.com/net/uploads/legacy/840_cssSelectors/selectors/tagName.html" target="_blank" rel="external">DEMO</a>  </p>
<p><strong>兼容性</strong>:</p>
<ul>
<li>IE6+</li>
<li>Firefox</li>
<li>Chrome</li>
<li>Safari</li>
<li>Opera</li>
</ul>
<h2 id="6-X-visited-和-X-link"><a href="#6-X-visited-和-X-link" class="headerlink" title="6.X:visited 和 X:link"></a>6.X:visited 和 X:link</h2><pre><code>a:link {color:red;}
a:visited {color: purple;}
</code></pre><p>我们使用:link这个伪类来定位所有还没有被访问过的链接。<br>另外，我们也使用:visited来定位所有已经被访问过的链接。<br><a href="http://cdn.tutsplus.com/net/uploads/legacy/840_cssSelectors/selectors/links.html" target="_blank" rel="external">DEMO</a></p>
<p><strong>兼容性</strong>:</p>
<ul>
<li>IE7+</li>
<li>Firefox</li>
<li>Chrome</li>
<li>Safari</li>
<li>Opera</li>
</ul>
<h2 id="7-X-Y"><a href="#7-X-Y" class="headerlink" title="7.X + Y"></a>7.X + Y</h2><pre><code>ul+p{
    color:red;
}
</code></pre><p>这被称作相邻选择符。它将只选择紧贴在X元素之后Y元素。上面的例子，仅每一个ul之后的第一个段落元素的文本为红色。<br><a href="http://cdn.tutsplus.com/net/uploads/legacy/840_cssSelectors/selectors/adjacent.html" target="_blank" rel="external">DEMO</a></p>
<h2 id="8-X-gt-Y"><a href="#8-X-gt-Y" class="headerlink" title="8.X&gt;Y"></a>8.X&gt;Y</h2><pre><code>div#container &gt; ul{
    border :1px solid black;
}
</code></pre><p>X Y和X &gt; Y之间的不同点是后者只选择直接子代。例如，考虑如下的标记。</p>
<pre><code>&lt;div id=&quot;container&quot;&gt;  
   &lt;ul&gt;  
      &lt;li&gt; List Item  
        &lt;ul&gt;  
           &lt;li&gt; Child &lt;/li&gt;  
        &lt;/ul&gt;  
      &lt;/li&gt;  
      &lt;li&gt; List Item &lt;/li&gt;  
      &lt;li&gt; List Item &lt;/li&gt;  
      &lt;li&gt; List Item &lt;/li&gt;  
   &lt;/ul&gt;  
&lt;/div&gt; 
</code></pre><p>选择符#container &gt; ul将只选择id为container的div的直接子代ul。它不匹配更深层的li的子代的ul。<br>因此，使用子代选择符有性能上的优势。事实上，这同样适用于基于css选择器的javascript引擎。<br><a href="http://cdn.tutsplus.com/net/uploads/legacy/840_cssSelectors/selectors/childcombinator.html" target="_blank" rel="external">DEMO</a></p>
<p><strong>兼容性</strong></p>
<pre><code>*IE7+
*Firefox
*Chrome
*Safari
*Opera
</code></pre><h2 id="9-X-Y"><a href="#9-X-Y" class="headerlink" title="9.X~Y"></a>9.X~Y</h2><pre><code>ul ~ p {  
   color: red;  
}
</code></pre><p>这是兄弟选择符和X + Y一样，然而，它没有约束。与相邻选择符（ul + li）仅选择前一个选择符后面的第一个元素比起来，兄弟选择符更宽泛。它会选择，我们上面例子中更在ul后面的任何p元素。<br><a href="http://cdn.tutsplus.com/net/uploads/legacy/840_cssSelectors/selectors/generalcombinator.html" target="_blank" rel="external">DEMO</a></p>
<p><strong>兼容性</strong></p>
<pre><code>*IE7+
*Firefox
*Chrome
*Safari
*Opera
</code></pre><h2 id="10-X-title"><a href="#10-X-title" class="headerlink" title="10.X[title]"></a>10.X[title]</h2><pre><code>a[title] {  
   color: green;  
} 
</code></pre><p>被称为属性选择器，在我们上面的例子里，这只会选择有title属性的锚标签。没有此属性的锚标签将不受影像。但如果你需要更多的特性怎么办呢？呵呵……<br><a href="http://cdn.tutsplus.com/net/uploads/legacy/840_cssSelectors/selectors/attributes.html" target="_blank" rel="external">DEMO</a></p>
<p><strong>兼容性</strong></p>
<pre><code>*IE7+
*Firefox
*Chrome
*Safari
*Opera
</code></pre><h2 id="11-X-href-”foo”"><a href="#11-X-href-”foo”" class="headerlink" title="11. X[href=”foo”]"></a>11. X[href=”foo”]</h2><pre><code>a[href=&quot;http://net.tutsplus.com&quot;] {  
  color: #1f6053; /* nettuts green */  
}
</code></pre><p>上面的代码段将给所有href属性为<a href="http://net.tutsplus.com的锚标签添加样式；他们将会显示为我们的品牌绿色。所有其他的锚标签将不受影响。" target="_blank" rel="external">http://net.tutsplus.com的锚标签添加样式；他们将会显示为我们的品牌绿色。所有其他的锚标签将不受影响。</a></p>
<blockquote>
<p>注意我们将href值用引号包裹。记住，当使用javascript的css选择符引擎时也这么做。如果可能的话，尽可能使用css3选择符代替非官方的方法。</p>
</blockquote>
<p>这工作的很好，但有点不够灵活。如果链接确实直接连接到Nettus+还好，但是，也许路径是到nettust的相对路径呢？在这种情况下，我们可以使用一点正则表达式语法。</p>
<p><a href="http://cdn.tutsplus.com/net/uploads/legacy/840_cssSelectors/selectors/attributes2.html" target="_blank" rel="external">DEMO</a></p>
<p><strong>兼容性</strong></p>
<pre><code>*IE7+
*Firefox
*Chrome
*Safari
*Opera
</code></pre><h2 id="12-X-href-”nettuts”"><a href="#12-X-href-”nettuts”" class="headerlink" title="12. X[href*=”nettuts”]"></a>12. X[href*=”nettuts”]</h2><pre><code>a[href*=&quot;tuts&quot;] {  
  color: #1f6053; /* nettuts green */  
} 
</code></pre><p>来了不是~这就是我们需要的代码。*号指定了包含该属性的值必须包含定义的值。就是说，这句代码包含了href值为 nettuts.com，net.tutsplus.com或者tutsplus.com。<br>记住这个描述过于宽泛，如果是某个锚点标签链接到某个连接中带有tuts非Envato的网站（tutsplus属于Envato旗下网站）呢？因此你需要更多特性来限制，分别使用^和&amp;来限定字符串的开始和结束。<br><a href="http://cdn.tutsplus.com/net/uploads/legacy/840_cssSelectors/selectors/attributes3.html" target="_blank" rel="external">DEMO</a></p>
<p><strong>兼容性</strong></p>
<pre><code>*IE7+
*Firefox
*Chrome
*Safari
*Opera
</code></pre><h2 id="13-X-href-”http”"><a href="#13-X-href-”http”" class="headerlink" title="13. X[href^=”http”]"></a>13. X[href^=”http”]</h2><pre><code>a[href^=&quot;http&quot;] {  
   background: url(path/to/external/icon.png) no-repeat;  
   padding-left: 10px;  
}
</code></pre><p>有没有想过某些网站是如何定义一个图标的链接的？我确定你肯定看到过。这些链接很容易让你跳转到另一个网站。<br>使用^(carat)符灰常简单啦。这个符号常常在正则表达式中表示字符串的开始。如果我们想指向所有以”http”开头的”href”属性的锚点的话，我们就可以使用类似于上面的那段代码啦。</p>
<blockquote>
<p>注意啦，我们不需要搜索”<a href="http://&quot;,完全没必要，因为我们还要包含以" target="_blank" rel="external">http://&quot;,完全没必要，因为我们还要包含以</a><br><a href="https://开头的链接呢。" target="_blank" rel="external">https://开头的链接呢。</a></p>
</blockquote>
<p>如果我们想为所有链接到图片的链接定义样式咋办？这种情况下，我们得搜索字符串的结束了不是。<br><a href="http://cdn.tutsplus.com/net/uploads/legacy/840_cssSelectors/selectors/attributes4.html" target="_blank" rel="external">DEMO</a></p>
<p><strong>兼容性</strong></p>
<pre><code>*IE7+
*Firefox
*Chrome
*Safari
*Opera
</code></pre><h2 id="14-X-href-”-jpg”"><a href="#14-X-href-”-jpg”" class="headerlink" title="14. X[href$=”.jpg”]"></a>14. X[href$=”.jpg”]</h2><pre><code>a[href$=&quot;.jpg&quot;] {  
   color: red;  
}
</code></pre><p>又来了，我们还是使用正则表达式符号，$(dolor)，来作为字符串的结束标记。这种情况下，我们就会搜索所有url以.jpg为结尾的锚点啦。记住记住这种情况下gif和png格式的图片不会被选择哦。<br><a href="http://cdn.tutsplus.com/net/uploads/legacy/840_cssSelectors/selectors/attributes5.html" target="_blank" rel="external">DEMO</a></p>
<p><strong>兼容性</strong></p>
<pre><code>*IE7+
*Firefox
*Chrome
*Safari
*Opera
</code></pre><h2 id="15-X-data-”foo”"><a href="#15-X-data-”foo”" class="headerlink" title="15. X[data-*=”foo”]"></a>15. X[data-*=”foo”]</h2><pre><code>a[data-filetype=&quot;image&quot;] {  
   color: red;  
}
</code></pre><p>回顾最近一条，我们如何能包含各种图片类型:png,jpeg,jpg,gif?很容易想到，我们能通过多个选择器来不是，像这样：</p>
<pre><code>a[href$=&quot;.jpg&quot;],  
a[href$=&quot;.jpeg&quot;],  
a[href$=&quot;.png&quot;],  
a[href$=&quot;.gif&quot;] {  
   color: red;  
}
</code></pre><p> 不过，这样很蛋疼，效率极低。另一个解决办法是使用自定义属性。如果我们加了一种自己的 data-filetype 属性给每一个链接到图片的锚点的话呢？<br><code>&lt;a href=&quot;path/to/image.jpg&quot; data-filetype=&quot;image&quot;&gt; Image Link &lt;/a&gt;</code><br>这样关联后，我们就能使用标准的属性选择器来指定这些链接啦。看下面：<br><a href="http://cdn.tutsplus.com/net/uploads/legacy/840_cssSelectors/selectors/attributes6.html" target="_blank" rel="external">DEMO</a></p>
<p><strong>兼容性</strong></p>
<pre><code>*IE7+
*Firefox
*Chrome
*Safari
*Opera
</code></pre><h2 id="16-X-foo-”bar”"><a href="#16-X-foo-”bar”" class="headerlink" title="16. X[foo~=”bar”]"></a>16. X[foo~=”bar”]</h2><pre><code>a[data-info~=&quot;external&quot;] {  
   color: red;  
}  

a[data-info~=&quot;image&quot;] {  
   border: 1px solid black;  
}
</code></pre><p>这儿有个鲜为人知的特殊技巧，绝对让你印象时刻。~(tilda)符，它可以帮助我们指向那些以空格隔开多个值的属性的元素（真拗口，这翻译我自己都看不懂，水平问题）<br>以我们第15条的自定义属性为例，上面的代码中我们创建了 data-info属性，这个属性可以定义以空格分隔的多个值。这样，这个链接本身就是个icon，并且指向的也是一个图片链接，像下面这样。<br><code>&lt;a href=&quot;path/to/image.jpg&quot; data-info=&quot;external image&quot;&gt; Click Me, Fool &lt;/a&gt;</code><br>有了这样适当的标记，通过使用 ~ 属性选择器的技巧，我们就可以指向任何具有着两种属性的任何一种啦。</p>
<pre><code>/* Target data-info attr that contains the value &quot;external&quot; */  
a[data-info~=&quot;external&quot;] {  
   color: red;  
}  

/* And which contain the value &quot;image&quot; */  
a[data-info~=&quot;image&quot;] {  
  border: 1px solid black;  
}
</code></pre><p>很棒，不是吗？<br><a href="http://cdn.tutsplus.com/net/uploads/legacy/840_cssSelectors/selectors/attributes7.html" target="_blank" rel="external">DEMO</a></p>
<p><strong>兼容性</strong></p>
<pre><code>*IE7+
*Firefox
*Chrome
*Safari
*Opera
</code></pre><h2 id="17-X-checked"><a href="#17-X-checked" class="headerlink" title="17. X:checked"></a>17. X:checked</h2><pre><code>input[type=radio]:checked {  
   border: 1px solid black;  
} 
</code></pre><p>这种伪类只会匹配已经被选中的单选元素。就是这么简单。<br><a href="http://cdn.tutsplus.com/net/uploads/legacy/840_cssSelectors/selectors/attributes7.html" target="_blank" rel="external">DEMO</a></p>
<p><strong>兼容性</strong></p>
<pre><code>*IE9+
*Firefox
*Chrome
*Safari
*Opera
</code></pre><h2 id="18-X-after"><a href="#18-X-after" class="headerlink" title="18. X:after"></a>18. X:after</h2><pre><code>input[type=radio]:checked {  
   border: 1px solid black;  
} 
</code></pre><p>before 和 after 伪类也很蛋疼。貌似人们每天都能找到或者发明一些新办法来有效地使用它们。它们很容易控制选择器周围的内容。<br>很多第一次使用是因为他们需要对clear-fix进行改进。</p>
<pre><code>.clearfix:after {  
    content: &quot;&quot;;  
    display: block;  
    clear: both;  
    visibility: hidden;  
    font-size: 0;  
    height: 0;  
    }  

.clearfix {   
   *display: inline-block;   
   _height: 1%;  
}
</code></pre><p>这个改进使用了:after伪类元素来在元素后增加一个空间，然后清除它。这个牛X的技巧你应该收藏到工具包里，特别是当overflow:hidden方法无能为力的时候。<br>想看看其他创造性的用法：<a href="http://net.tutsplus.com/tutorials/html-css-techniques/quick-tip-getting-clever-with-css3-shadows/" target="_blank" rel="external">访问我滴创建阴影的窍门</a></p>
<blockquote>
<p>通过Css3选择器的标准说明书，你应该有技巧地使用这些伪类语法——双冒号::。不过为了兼容，浏览器会接受一个双引号。</p>
</blockquote>
<p><strong>兼容性</strong></p>
<pre><code>*IE8+
*Firefox
*Chrome
*Safari
*Opera
</code></pre><h2 id="19-X-hover"><a href="#19-X-hover" class="headerlink" title="19. X:hover"></a>19. X:hover</h2><pre><code>div:hover {  
  background: #e3e3e3;  
}  
</code></pre><p>我去，这个你必须懂。典型的官方形式的用户触发伪类。听起来会有点迷惑，不过实际上并非如此。想在用户在某个元素上面悬停时定义个特别的样式？这个属性就是做这个的。</p>
<blockquote>
<p>记住啦，较old版本的IE，只能在锚点标签后使用这个hover。</p>
</blockquote>
<p>这个选择器你用得最多的情况，估计可能就是在锚点的悬停时加个border-bottom啦。<br>    a:hover {<br>     border-bottom: 1px solid black;<br>    }  </p>
<blockquote>
<p>小贴士： border-bottom:1px solid black;比 text-decoration:underline;好看一点哦。（真的？我去）</p>
</blockquote>
<p><strong>兼容性</strong></p>
<pre><code>*IE6+ (In IE6, :hover must be applied to an anchor element)
*Firefox
*Chrome
*Safari
*Opera
</code></pre><h2 id="20-X-not-selector"><a href="#20-X-not-selector" class="headerlink" title="20. X:not(selector)"></a>20. X:not(selector)</h2><pre><code>div:not(#container) {  
   color: blue;  
}
</code></pre><p>not伪类灰常有用。例如我要选择所有的div，除了有id为container的。上面那个代码片段就能完美的实现。<br>如果我想选择除了p以外的所有元素，我可以这么做：</p>
<pre><code>*:not(p) {  
  color: green;  
} 
</code></pre><p><a href="http://cdn.tutsplus.com/net/uploads/legacy/840_cssSelectors/selectors/not.html" target="_blank" rel="external">DEMO</a></p>
<p><strong>兼容性</strong></p>
<pre><code>*IE9+
*Firefox
*Chrome
*Safari
*Opera
</code></pre><h2 id="21-X-pseudoElement"><a href="#21-X-pseudoElement" class="headerlink" title="21. X::pseudoElement"></a>21. X::pseudoElement</h2><pre><code>p::first-line {  
   font-weight: bold;  
   font-size: 1.2em;  
}
</code></pre><p>我们可以使用伪元素（以::为表示）来定义元素的样式。例如第一行，第一个字符，记住啦，这种方法只能应用于同级元素才有效。</p>
<blockquote>
<p>伪元素由两个冒号组成：::</p>
</blockquote>
<p><strong>指定p的第一个字符的样式</strong><br>    p::first-letter {<br>       float: left;<br>       font-size: 2em;<br>       font-weight: bold;<br>       font-family: cursive;<br>       padding-right: 2px;<br>    }</p>
<p>这段代码会找到所有段落，然后再从中定义这些段落的第一个字符。<br>这常常使用在仿报纸的文章首字母样式。 </p>
<p><strong>指定p的首行样式</strong></p>
<pre><code>p::first-line {  
   font-weight: bold;  
   font-size: 1.2em;  
} 
</code></pre><p>同样，这个::first-line伪元素会像我们期望的那样，只定义段落的第一行的样式。<br><a href="http://cdn.tutsplus.com/net/uploads/legacy/840_cssSelectors/selectors/pseudoElements.html" target="_blank" rel="external">DEMO</a></p>
<p><strong>兼容性</strong></p>
<pre><code>*IE6+
*Firefox
*Chrome
*Safari
*Opera
</code></pre><h2 id="22-X-nth-child-n"><a href="#22-X-nth-child-n" class="headerlink" title="22. X:nth-child(n)"></a>22. X:nth-child(n)</h2><pre><code>li:nth-child(3) {  
   color: red;  
} 
</code></pre><p>想想那些没法从元素堆中选择元素的日子。nth-child伪类解决了这个问题。<br>请注意 nth-child接收整数和变量，不过不是从0开始的，如果你想选定第二个li，使用 li:nth-child(2).<br>我们甚至使用这个办法来选择任意的子元素。例如，我们可以用 li:nth-child(4n)来完成4为倍数的所有元素的选择。<br><a href="http://cdn.tutsplus.com/net/uploads/legacy/840_cssSelectors/selectors/nth.html" target="_blank" rel="external">DEMO</a></p>
<p><strong>兼容性</strong></p>
<pre><code>*IE9+
*Firefox 3.5+
*Chrome
*Safari
*Opera
</code></pre><h2 id="23-X-nth-last-child-n"><a href="#23-X-nth-last-child-n" class="headerlink" title="23. X:nth-last-child(n)"></a>23. X:nth-last-child(n)</h2><pre><code>li:nth-last-child(2) {  
   color: red;  
}
</code></pre><p>如果我有灰常多的li在ul里面，我只想要最后3个li怎么办？不必使用li:nth-child(397),你可以使用nth-last-child伪类。<br>这种技巧和第六条几乎一样有效，不过两者的不同之处在于它从结束开始收集，用回溯的方式进行。<br><a href="http://cdn.tutsplus.com/net/uploads/legacy/840_cssSelectors/selectors/nthLast.html" target="_blank" rel="external">DEMO</a></p>
<p><strong>兼容性</strong></p>
<pre><code>*IE9+
*Firefox 3.5+
*Chrome
*Safari
</code></pre><h2 id="24-X-nth-of-type-n"><a href="#24-X-nth-of-type-n" class="headerlink" title="24. X:nth-of-type(n)"></a>24. X:nth-of-type(n)</h2><pre><code>ul:nth-of-type(3) {  
   border: 1px solid black;  
}
</code></pre><p>你应该有很多时候想要元素类型来选择元素而不是通过孩子。<br>想象一下标记5个无序列表（UL）。如果你想定义第三个ul，并且没有一个唯一的id来找到它，你就可以使用 nth-of-type(3)伪类了。在上面这个代码段中，只有第三个ul才会有黑色的边框。<br><a href="http://cdn.tutsplus.com/net/uploads/legacy/840_cssSelectors/selectors/nthOfType.html" target="_blank" rel="external">DEMO</a><br><strong>兼容性</strong></p>
<pre><code>*IE9+
*Firefox 3.5+
*Chrome
*Safari
</code></pre><h2 id="25-X-nth-last-of-type-n"><a href="#25-X-nth-last-of-type-n" class="headerlink" title="25. X:nth-last-of-type(n)"></a>25. X:nth-last-of-type(n)</h2><pre><code>ul:nth-last-of-type(3) {  
   border: 1px solid black;  
} 
</code></pre><p>没错，我们一样可以使用nth-last-of-type来从结束开始回溯这个选择器，来找到我们想要的元素。</p>
<p><strong>兼容性</strong></p>
<pre><code>*IE9+
*Firefox 3.5+
*Chrome
*Safari
</code></pre><h2 id="26-X-first-child"><a href="#26-X-first-child" class="headerlink" title="26. X:first-child"></a>26. X:first-child</h2><pre><code>ul li:first-child {  
   border-top: none;  
}
</code></pre><p>这个结构的伪类让我们可以选择某个元素的第一个子孩子。你通常可以使用这个办法来删除第一个或者最后一个元素的边框。<br>例如，你有一系列的rows，每一个都有border-top 和border-bottom。这种情况下，第一行和最后一行看起来会灰常怪。<br>很多设计师会使用first和last类来弥补这个缺陷。相反，你可以使用这些伪类来解决这些问题。<br><a href="http://cdn.tutsplus.com/net/uploads/legacy/840_cssSelectors/selectors/firstChild.html" target="_blank" rel="external">DEMO</a></p>
<p><strong>兼容性</strong></p>
<pre><code>*IE7+
*Firefox 3.5+
*Chrome
*Safari
</code></pre><h2 id="27-X-last-child"><a href="#27-X-last-child" class="headerlink" title="27. X:last-child"></a>27. X:last-child</h2><pre><code>ul &gt; li:last-child {  
   color: green;  
}
</code></pre><p>与first-child相反，last-child会选择父节点的最后一个子节点。 </p>
<p><strong>例子</strong></p>
<p>我们建立一些例子来示范这些类的可能的用法。我们会建立一种风格来展示。<br><strong>标记</strong><br>    <ul><br>       <li> List Item </li><br>       <li> List Item </li><br>       <li> List Item </li><br>    </ul><br>没啥特别的，就是一个简单的序列。 </p>
<p><strong>CSS</strong><br>    ul {<br>     width: 200px;<br>     background: #292929;<br>     color: white;<br>     list-style: none;<br>     padding-left: 0;<br>    }  </p>
<pre><code>li {  
 padding: 10px;  
 border-bottom: 1px solid black;  
 border-top: 1px solid #3c3c3c;  
}
</code></pre><p><img src="http://images.cnitblog.com/blog/460220/201401/03143631-272fddc759664e95be319d868bae7abf.png" alt="图片"></p>
<blockquote>
<p>这个样式会设置一个背景，删除浏览器默认的ul的padding值，并定义边框给每一个li来提供一点深度。</p>
</blockquote>
<p>如上图所示，唯一的问题是最上面的边框和最下面的边框看起来有点儿怪。让我们来使用:first-child和:last-child来解决这个问题。<br>    li:first-child {<br>        border-top: none;<br>    }  </p>
<pre><code>li:last-child {  
   border-bottom: none;  
}
</code></pre><p><img src="http://images.cnitblog.com/blog/460220/201401/04194911-6cbeb39056254f6d9903aa7d1cdfb5da.png" alt="图片"><br>看上图，解决了不是。<br><a href="http://cdn.tutsplus.com/net/uploads/legacy/840_cssSelectors/selectors/firstChild.html" target="_blank" rel="external">DEMO</a></p>
<p><strong>兼容性</strong></p>
<pre><code>*IE9+
*Firefox
*Chrome
*Safari
</code></pre><p>是滴，IE8支持 first-child 不过不支持last-child。</p>
<h2 id="28-X-only-child"><a href="#28-X-only-child" class="headerlink" title="28. X:only-child"></a>28. X:only-child</h2><pre><code>div p:only-child {  
   color: red;  
}
</code></pre><p>实话说，你很可能会发现你不会经常使用 only-child伪类。尽管如此，它确实有用，你应该需要它。<br>它可以帮助你选择是父节点的独生子（没别的孩子啦）的元素。例如，使用上面的代码，只有是div的唯一子孩子的p段落才会定义其颜色为red。<br>让我们来假定下面的标记。</p>
<pre><code>&lt;div&gt;&lt;p&gt; My paragraph here. &lt;/p&gt;&lt;/div&gt;
&lt;div&gt;  
   &lt;p&gt; Two paragraphs total. &lt;/p&gt;  
   &lt;p&gt; Two paragraphs total. &lt;/p&gt;  
&lt;/div&gt; 
</code></pre><p>这样，第二个div的p标签的内容不会被选中。只有第一个div的p才会被选中。 <a href="http://cdn.tutsplus.com/net/uploads/legacy/840_cssSelectors/selectors/onlyChild.html" target="_blank" rel="external">DEMO</a></p>
<p><strong>兼容性</strong></p>
<pre><code>*IE9+
*Firefox
*Chrome
*Safari
</code></pre><h2 id="29-X-only-of-type"><a href="#29-X-only-of-type" class="headerlink" title="29. X:only-of-type"></a>29. X:only-of-type</h2><pre><code>li:only-of-type {  
   font-weight: bold;  
}
</code></pre><p>这种结构的伪类有几种灰常聪明的用法。它可以选定在其父节点内没有兄弟节点的元素。例如，我们可以选择只有一个li作为其子孩子的ul。<br>首先，取决于你想怎样完成这一目标。你可以使用 ul li，不过，这回选择所有li元素。唯一的办法是使用only-of-type。</p>
<pre><code>ul &gt; li:only-of-type {  
   font-weight: bold;  
}
</code></pre><p><a href="http://cdn.tutsplus.com/net/uploads/legacy/840_cssSelectors/selectors/onlyOfType.html" target="_blank" rel="external">DEMO</a></p>
<p><strong>兼容性</strong></p>
<pre><code>*IE9+
*Firefox 3.5+
*Chrome
*Safari
</code></pre><h2 id="30-X-first-of-type"><a href="#30-X-first-of-type" class="headerlink" title="30. X:first-of-type"></a>30. X:first-of-type</h2><p>first-of-type 伪类可以让你选择该类型的第一个兄弟节点。</p>
<p><strong>一个测试</strong></p>
<p>为了更好地理解它，让我们来测试一下啊。拷贝下面的标记到你的编辑器。</p>
<p>现在，别急着往下读，试试看如何能只选择’LIST ITEM 2’?如果你搞定了（或者放弃了），继续读。</p>
<p><strong>解决办法1</strong></p>
<p>有很多办法能搞定这个测试。我们回顾其中一小部分。以使用first-of-type开始。</p>
<pre><code>ul:first-of-type &gt; li:nth-child(2) {  
   font-weight: bold;  
}
</code></pre><p>这个代码段本质上表示，“找到第一个无序列表，然后找到这里面的li，然后，继续使用过滤器直到找到第二个li。</p>
<p><strong>解决办法2</strong></p>
<p>另一个可行的办法是毗邻选择器。</p>
<pre><code>p + ul li:last-child {  
   font-weight: bold;  
}
</code></pre><p>在这个方案中，我们找到p的临近节点ul，然后找到ul的li的最后一个孩子。<br><strong>解决办法3</strong></p>
<p>我们可以随心所欲滴选择这些选择器。</p>
<pre><code>ul:first-of-type li:nth-last-child(1) {  
   font-weight: bold; 
}
</code></pre><p>这次，我们取到第一个ul，然后找到第一个元素，不过是从最后一个开始数。哈哈。<br><a href="http://cdn.tutsplus.com/net/uploads/legacy/840_cssSelectors/selectors/firstOfType.html" target="_blank" rel="external">DEMO</a></p>
<p><strong>兼容性</strong></p>
<pre><code>*IE9+
*Firefox 3.5+
*Chrome
*Safari
*Opera
</code></pre><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>如果你仍在为解决old浏览器的缺陷而纠结，如IE6。在使用这些新的选择器方面，你仍然需要非常小心。不过，别因为这个阻碍了你对这些新玩意儿的学习。别虐待自己。确保关注这里的兼容性列表。应一方面，你可以使用 Dean Edward’s excellent IE9.js script 来为旧浏览器提供新的选择器支持。（我去。cool）<br>其次，当使用javascript库时，如流行的jQuery，最好尽可能使用这些css3本身的选择器而不是使用库的自定义方法/选择器。这能让你的代码更快哦，因为这些选择器引擎本身就能被浏览器解析，而不是用这些库选择器。<br>感谢阅读，希望你能学到一两个技巧。</p>
<p>#译者注<br>本文为翻译文章，<br>原文为“<a href="http://net.tutsplus.com/tutorials/html-css-techniques/the-30-css-selectors-you-must-memorize/" target="_blank" rel="external">The 30 CSS Selectors you Must Memorize</a>”</p>
<p><a href="http://www.cnblogs.com/yanhaijing/p/3496480.html" target="_blank" rel="external">本文转载于颜海镜的博客</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;也许你了解了基本的 id,class和descendant选择器，并且整天都在调用，如果是这样的话，那你正在错过拥有灵活性更大的选择器。这篇文章里面提到的大部分选择器都是在CSS3标准下的，所以它们只能在相应最新版本的浏览器中才能生效，你完全应该把这些都记在你聪明的脑袋里面……
    
    </summary>
    
      <category term="CSS" scheme="http://lxchuan12.github.io/categories/CSS/"/>
    
    
      <category term="CSS选择器" scheme="http://lxchuan12.github.io/tags/CSS%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>最近碰到的兼容性问题</title>
    <link href="http://lxchuan12.github.io/2016/08/06/20160806-tips/"/>
    <id>http://lxchuan12.github.io/2016/08/06/20160806-tips/</id>
    <published>2016-08-06T13:12:38.000Z</published>
    <updated>2016-08-07T15:32:49.337Z</updated>
    
    <content type="html"><![CDATA[<p>1、transfrom:translate3d(),兼容性:-webkit-安卓4.4+<br>2、删除节点，elem.remove(),安卓4.2.2不支持。<br>解决方案：elem.parentNode.removeChild(elem);</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1、transfrom:translate3d(),兼容性:-webkit-安卓4.4+&lt;br&gt;2、删除节点，elem.remove(),安卓4.2.2不支持。&lt;br&gt;解决方案：elem.parentNode.removeChild(elem);&lt;/p&gt;

    
    </summary>
    
      <category term="前端开发" scheme="http://lxchuan12.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="前端开发" scheme="http://lxchuan12.github.io/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="兼容性" scheme="http://lxchuan12.github.io/tags/%E5%85%BC%E5%AE%B9%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>搭建hexo博客，记录前端开发</title>
    <link href="http://lxchuan12.github.io/2016/08/06/20160806-hexo/"/>
    <id>http://lxchuan12.github.io/2016/08/06/20160806-hexo/</id>
    <published>2016-08-06T08:40:38.000Z</published>
    <updated>2016-08-20T15:51:54.470Z</updated>
    
    <content type="html"><![CDATA[<p>虽然有在简书上使用markdown写法发布一些文章，但不是前端相关的，主要是一些电脑技巧，PPT，读书笔记等。早就有想着搭建自己的博客，记录在前端开发的路上学到的知识……<a id="more"></a>有人说，写博客，不要太在乎有多少阅读量。重要的是，写博客是自己对一些知识的理解，并且能写出来，这本身就是一种整理和成长。其实有记录自己前端开发所学知识，不过是保存在为知笔记上。现在看来，也可以写博客分享出来。</p>
<p></p><p>总之，慢慢坚持写博客。</p><p></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;虽然有在简书上使用markdown写法发布一些文章，但不是前端相关的，主要是一些电脑技巧，PPT，读书笔记等。早就有想着搭建自己的博客，记录在前端开发的路上学到的知识……
    
    </summary>
    
      <category term="前端开发" scheme="http://lxchuan12.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="hexo" scheme="http://lxchuan12.github.io/tags/hexo/"/>
    
      <category term="F2E" scheme="http://lxchuan12.github.io/tags/F2E/"/>
    
  </entry>
  
</feed>
