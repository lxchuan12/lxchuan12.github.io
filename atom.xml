<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>轩辕Rowboat的博客</title>
  <subtitle>前端路上 | PPT爱好者 | 所知甚少，唯善学。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lxchuan12.github.io/"/>
  <updated>2016-09-23T15:55:37.919Z</updated>
  <id>https://lxchuan12.github.io/</id>
  
  <author>
    <name>轩辕Rowboat</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>正则表达式知识点</title>
    <link href="https://lxchuan12.github.io/2016/09/22/20160922-RegExp/"/>
    <id>https://lxchuan12.github.io/2016/09/22/20160922-RegExp/</id>
    <published>2016-09-22T15:48:12.000Z</published>
    <updated>2016-09-23T15:55:37.919Z</updated>
    
    <content type="html"><![CDATA[<h2 id="正则表达式-RegExp"><a href="#正则表达式-RegExp" class="headerlink" title="正则表达式(RegExp)"></a>正则表达式(RegExp)</h2><h3 id="1、什么是正则表达式"><a href="#1、什么是正则表达式" class="headerlink" title="1、什么是正则表达式"></a>1、什么是正则表达式</h3><p>1.1 什么叫“正则”<br>–-规则、模式<br>–强大的字符串匹配工具……有待整理<a id="more"></a><br>1.2 正则的写法<br>–new RegExp(“a”,”ig”),需要传参只能用这种方案。<br>–/a/</p>
<h3 id="2、正则表达式常用方法"><a href="#2、正则表达式常用方法" class="headerlink" title="2、正则表达式常用方法"></a>2、正则表达式常用方法</h3><p>2.1 test<br>-字符串判断<br>–返回真假<br>–正则.test(字符串)<br>–例子：是否有不是数字的字符<br>2.2 search<br>字符串搜索<br>–返回出现的位置<br>–字符串.search(正则)<br>–忽略大小写：i——ignore<br>2.3 match<br>获取匹配的项目,<br>–返回数组<br>–量词：+<br>–全局匹配：g——global<br>–例子：找出所有数字<br>2.4 replace<br>替换所有匹配<br>–返回替换后的字符串<br>–字符串.replace(正则,想替换的)<br>–例子：敏感词过滤<br>–匹配子项<br>–例子：日期格式化</p>
<h3 id="3、正则表达式字符类"><a href="#3、正则表达式字符类" class="headerlink" title="3、正则表达式字符类"></a>3、正则表达式字符类</h3><p>3.1 任意字符<br>-[abc]<br>–例子：o[usb]t——obt、ost、out<br>3.2 范围<br>-[a-z]、[0-9]<br>–例子：id[0-9]——id0、id5<br>3.3 排除<br>-[^a]<br>–例子：o[^0-9]t——oat、o?t、o t<br>3.4 组合<br>-[a-z0-9A-Z]<br>实例：偷小说<br>过滤HTML标签<br>–自定义innerText方法</p>
<h3 id="4、转义字符"><a href="#4、转义字符" class="headerlink" title="4、转义字符"></a>4、转义字符</h3><p>转义字符<br>.（点）——任意字符<br>\d、\w、\s 、\b（单词边界）<br>\D、\W、\S 、\B<br>\1    重复子项<br>例子<br>–获取class元素<br>–找重复项最多的字符和个数</p>
<h3 id="5、量词"><a href="#5、量词" class="headerlink" title="5、量词"></a>5、量词</h3><p>5.1 什么是量词<br>出现的次数<br>{n,m}，至少出现n次，最多m次<br>例子：查找QQ号<br>5.2 常用量词<br>{n,}  至少n次</p>
<ul>
<li>任意次  {0,}<br>？ 零次或一次  {0,1}</li>
</ul>
<ul>
<li>一次或任意次{1,}<br>{n}  正好n次<br>正则收尾<br>^ 开始<br>$ 结束<br>例子<br>–是不是QQ号<br>–去掉前后空格</li>
</ul>
<h3 id="6、常用正则例子"><a href="#6、常用正则例子" class="headerlink" title="6、常用正则例子"></a>6、常用正则例子</h3><p>高级表单校验<br>匹配中文：[\u4e00-\u9fa5]<br>行首行尾空格：^\s<em>|\s</em>$<br>Email：^\w+@[a-z0-9]+(.[a-z]+){1,3}$</p>
<p>网址：[a-zA-z]+://[^\s]*<br>QQ号：[1-9][0-9]{4,9}<br>邮政编码：[1-9]\d{5}<br>身份证：[1-9]\d{14}|[1-9]\d{17}|[1-9]\d{16}x</p>
<h3 id="7、正则与面向对象"><a href="#7、正则与面向对象" class="headerlink" title="7、正则与面向对象"></a>7、正则与面向对象</h3><p>把方法包在一个空间里<br>有人管他叫——命名空间<br>在公司里，把同一类方法，包在一起<br>JSON的使用<br>把之前的方法，包在一起</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;正则表达式-RegExp&quot;&gt;&lt;a href=&quot;#正则表达式-RegExp&quot; class=&quot;headerlink&quot; title=&quot;正则表达式(RegExp)&quot;&gt;&lt;/a&gt;正则表达式(RegExp)&lt;/h2&gt;&lt;h3 id=&quot;1、什么是正则表达式&quot;&gt;&lt;a href=&quot;#1、什么是正则表达式&quot; class=&quot;headerlink&quot; title=&quot;1、什么是正则表达式&quot;&gt;&lt;/a&gt;1、什么是正则表达式&lt;/h3&gt;&lt;p&gt;1.1 什么叫“正则”&lt;br&gt;–-规则、模式&lt;br&gt;–强大的字符串匹配工具……有待整理
    
    </summary>
    
      <category term="JavaScript" scheme="https://lxchuan12.github.io/categories/JavaScript/"/>
    
    
      <category term="RegExp" scheme="https://lxchuan12.github.io/tags/RegExp/"/>
    
  </entry>
  
  <entry>
    <title>gitflow工作流</title>
    <link href="https://lxchuan12.github.io/2016/09/20/20160920-gitflow%20workflow/"/>
    <id>https://lxchuan12.github.io/2016/09/20/20160920-gitflow workflow/</id>
    <published>2016-09-20T09:30:32.000Z</published>
    <updated>2016-09-21T14:15:39.694Z</updated>
    
    <content type="html"><![CDATA[<p>记得今年6月份参加了一次<code>coding</code>技术小馆杭州站的活动，讲的就是<code>git</code>和<code>gitflow</code>相关的。讲师当场也写代码。那是第一次<code>gitflow</code>工作流。那时在想我什么时候也能在舞台上讲开发技术……<a id="more"></a><br>今天就碰到一个关于<code>gitflow</code>工作流的问题。<br>使用<code>sourceTree</code>软件时，建立工作流。一般来说，是切换到<code>master</code>上。再建立工作流。我不小心，直接在<code>develop</code>分支上建了工作流。切换到<code>master</code>分支上。再打<code>hotfix</code>(修复补丁)时，发现无法成功。</p>
<p>谷歌搜索发现解决方案：</p>
<blockquote>
<p>1、找到项目当前文件夹中的<code>.git/config</code>，把配置文件中的<code>gitflow</code>*相关的全部删除。<br>2、关闭再重新打开<code>SourceTree</code>。<br>3、重新在<code>master</code>上建立工作流，再打<code>hotfix</code>。<br>发现成功了。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记得今年6月份参加了一次&lt;code&gt;coding&lt;/code&gt;技术小馆杭州站的活动，讲的就是&lt;code&gt;git&lt;/code&gt;和&lt;code&gt;gitflow&lt;/code&gt;相关的。讲师当场也写代码。那是第一次&lt;code&gt;gitflow&lt;/code&gt;工作流。那时在想我什么时候也能在舞台上讲开发技术……
    
    </summary>
    
      <category term="git" scheme="https://lxchuan12.github.io/categories/git/"/>
    
    
      <category term="git" scheme="https://lxchuan12.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>camelCase()转驼峰方法实现</title>
    <link href="https://lxchuan12.github.io/2016/09/15/20160915-camelCase/"/>
    <id>https://lxchuan12.github.io/2016/09/15/20160915-camelCase/</id>
    <published>2016-09-15T09:30:32.000Z</published>
    <updated>2016-09-15T10:28:03.036Z</updated>
    
    <content type="html"><![CDATA[<p>今天中秋节，放假三天。看zeptojs文档时，看到camelCase()转驼峰的方法，就想着也不难，就自己实现了一遍……<a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">function camelCase_1(str)&#123;</div><div class="line">    var i=1,</div><div class="line">        arr = str.split(&apos;-&apos;),</div><div class="line">        len = str.split(&apos;-&apos;).length;</div><div class="line">    var result = arr[0];</div><div class="line">    for(;i&lt;len;i++)&#123;</div><div class="line">        result += arr[i].substring(0,1).toUpperCase()+arr[i].substring(1);</div><div class="line">    &#125;</div><div class="line">    return result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>再看下jquery实现方案：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//str.replace(/^-ms-/,&apos;ms-&apos;)是有IE下有，-ms-前缀的，比如转换成msTransform，而其他转换成首字母大写，如：WebkitTransform</div><div class="line">function camelCase_2(str)&#123;</div><div class="line">    return str.replace(/^-ms-/,&apos;ms-&apos;).replace(/-([\da-z])/gi,function(all,letter)&#123;</div><div class="line">        return letter.toUpperCase();</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>再看zeptojs实现方案：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//zepto.js实现方式：没处理-ms-，兼容性IE10+，但依旧有很多IE10依旧要加-ms-前缀的css3属性。为啥zeptojs没实现呢，难道还没碰到这个bug？</div><div class="line">//并且，空字符串写toUpperCase()依旧是空字符串。所以不需要写三目运算。</div><div class="line">function camelCase_3(str)&#123; </div><div class="line">    return str.replace(/-+(.)?/g, function(match, chr)&#123; return chr ? chr.toUpperCase() : &apos;&apos; &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>测试：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var webkitstr = &apos;-webkit-transfrom&apos;;</div><div class="line">var msstr = &apos;-ms-transfrom&apos;;</div><div class="line">console.log(camelCase_1(webkitstr));//WebkitTransfrom</div><div class="line">console.log(camelCase_1(msstr));    //MsTransfrom</div><div class="line">console.log(camelCase_2(webkitstr));  //WebkitTransfrom</div><div class="line">console.log(camelCase_2(msstr));    //msTransfrom</div><div class="line">console.log(camelCase_3(webkitstr));//WebkitTransfrom</div><div class="line">console.log(camelCase_3(msstr));    //MsTransfrom</div></pre></td></tr></table></figure></p>
<p>看到这里，其实很想给zepto提pull request的。但还是没有提。</p>
<p>小结：分析jquery/zeptojs源码，发现能学到很多。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天中秋节，放假三天。看zeptojs文档时，看到camelCase()转驼峰的方法，就想着也不难，就自己实现了一遍……
    
    </summary>
    
      <category term="JavaScript" scheme="https://lxchuan12.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://lxchuan12.github.io/tags/JavaScript/"/>
    
      <category term="jquery" scheme="https://lxchuan12.github.io/tags/jquery/"/>
    
      <category term="zepto" scheme="https://lxchuan12.github.io/tags/zepto/"/>
    
  </entry>
  
  <entry>
    <title>window.location-浏览器定位和导航</title>
    <link href="https://lxchuan12.github.io/2016/09/12/20160912-window.location/"/>
    <id>https://lxchuan12.github.io/2016/09/12/20160912-window.location/</id>
    <published>2016-09-12T14:55:32.000Z</published>
    <updated>2016-09-12T15:33:32.117Z</updated>
    
    <content type="html"><![CDATA[<p>平时用window.location.href比较多。<br>但却经常会忽略window.location下的其他属性……<a id="more"></a><br>并且很多时候需要对链接问号后面字符串做处理，一般使用split()分割，再取。而实际上，有window.location.search可以获取。<br>一图胜千言<br><img src="./img/url.png" alt="图解url"><br><strong>url</strong>: 统一资源定位符 (Uniform Resource Locator, URL)<br><strong>href</strong>: 当前页面的url<br><strong>protocol</strong>: 协议<br><strong>hostname</strong>: 主机名<br><strong>port</strong>: 端口号<br><strong>host</strong>: 主机名+端口号<br><strong>pathname</strong>: 当前页面的路径和文件名</p>
<p><img src="./img/location.png" alt="图解location"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;平时用window.location.href比较多。&lt;br&gt;但却经常会忽略window.location下的其他属性……
    
    </summary>
    
      <category term="JavaScript" scheme="https://lxchuan12.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://lxchuan12.github.io/tags/JavaScript/"/>
    
      <category term="BOM" scheme="https://lxchuan12.github.io/tags/BOM/"/>
    
  </entry>
  
  <entry>
    <title>jQuery的几种写法探析</title>
    <link href="https://lxchuan12.github.io/2016/09/11/20160911-Several-writing-of-jquery/"/>
    <id>https://lxchuan12.github.io/2016/09/11/20160911-Several-writing-of-jquery/</id>
    <published>2016-09-11T13:41:23.000Z</published>
    <updated>2016-09-11T13:55:03.057Z</updated>
    
    <content type="html"><![CDATA[<p><strong>写法一：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(function()&#123;</div><div class="line">	//code here</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p><strong>写法二：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(document).ready(function()&#123;</div><div class="line">	//code here</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><strong>写法三：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$().ready(function()&#123;</div><div class="line">	//code here</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>默认参数就是document，所以可以省略不写。<br><strong>写法四：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(function($)&#123;</div><div class="line">	//code here</div><div class="line">&#125;)(jQuery);</div></pre></td></tr></table></figure></p>
<p>这种写法的最大好处是形成闭包。在内部定义的函数和变量只能在此范围内有效。形成是否函数函数、私有变量的概念。不会与其他类库，框架产生冲突。<br>以上四种方法都是同一个意思，一般来说使用<strong>写法一</strong>比较多。<br><strong>此外，</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$(window).load = function()&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line">//等价于：</div><div class="line">window.onload = function()&#123;</div><div class="line">	//code here</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>(JS中的事件，不加on，比如单击事件：click,双击事件：dblclick)</p>
<p><strong>window.onload = function(){}</strong>与<strong>$(funtion(){})</strong>两者的区别是：<br><strong>$(funtion(){})</strong>：<br>1、在DOM加载完成后就可以可以对DOM进行操作。<br>一般情况一个页面响应加载的顺序是：域名解析-加载html-加载js和css-加载图片和视频等其他信息。<br>那么Dom Ready应该在“加载js和css”和“加载图片等其他信息”之间，就可以操作Dom了。<br>2、能多次使用，按序执行。<br><strong>window.onload = function(){}</strong>：<br>1、在网页中所有元素(包括元素的所有关联文件)完全加载到浏览器后才执行，即JavaScript 此时可以访问网页中的所有元素。<br>2、不能多次使用，后者会覆盖前者。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;写法一：&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$(function()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	//code here&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="jQuery" scheme="https://lxchuan12.github.io/categories/jQuery/"/>
    
    
      <category term="jQuery" scheme="https://lxchuan12.github.io/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>CSS3 媒体查询media</title>
    <link href="https://lxchuan12.github.io/2016/09/09/20160909-CSS3-@media/"/>
    <id>https://lxchuan12.github.io/2016/09/09/20160909-CSS3-@media/</id>
    <published>2016-09-09T12:50:42.000Z</published>
    <updated>2016-09-09T13:20:44.079Z</updated>
    
    <content type="html"><![CDATA[<p>CSS3 媒体查询media，其实CSS2也有media，只是基本不用……<a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">@media only screen and (max-width:375px)&#123;</div><div class="line">    .box&#123;</div><div class="line">        background:#f00!important;</div><div class="line">        /*加上！important才有效。*/</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">.box&#123;</div><div class="line">	width:100px;</div><div class="line">	height:100px;</div><div class="line">	background:#000;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>媒体查询@media需要配合meta标签使用才有效。<br>简版：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;&gt;</div></pre></td></tr></table></figure></p>
<p>完整版：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no, minimal-ui&quot;&gt;</div></pre></td></tr></table></figure></p>
<p>其中minimal-ui表示<br>参考链接：<br><a href="http://36kr.com/p/210516.html" target="_blank" rel="external">iOS 7.1的Safari为meta标签新增minimal-ui属性，在网页加载时隐藏地址栏与导航栏</a><br><a href="http://stackoverflow.com/questions/24889100/ios-8-removed-minimal-ui-viewport-property-are-there-other-soft-fullscreen" target="_blank" rel="external">iOS 8 removed “minimal-ui” viewport property, are there other “soft fullscreen” solutions?</a><br>取值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@media screen and (max-width:320px)&#123;</div><div class="line">	/*视窗宽度&lt;=320px*/</div><div class="line">&#125;</div><div class="line">@media screen and (min-width:769px)&#123;</div><div class="line">	/*视窗宽度&gt;=769px*/</div><div class="line">&#125;</div><div class="line">@media screen and (min-width:769px) and (max-width:1000px)&#123;</div><div class="line">	/*769px&lt;=视窗宽度&lt;=1000px*/</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>几道判断题：<br>1、媒体查询条件中，（max-width:320px）表示的是：<br>A. 当视窗宽度小于等于320px时。<br>2、要做响应式网站，就必须设置viewport<br>A. √<br>3、device-width是viewport的默认宽度<br>B、×<br>4、viewport的默认宽度就是屏幕的水平分辨率<br>B、×</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CSS3 媒体查询media，其实CSS2也有media，只是基本不用……
    
    </summary>
    
      <category term="css3" scheme="https://lxchuan12.github.io/categories/css3/"/>
    
    
      <category term="css3" scheme="https://lxchuan12.github.io/tags/css3/"/>
    
      <category term="media" scheme="https://lxchuan12.github.io/tags/media/"/>
    
  </entry>
  
  <entry>
    <title>我是如何踏上前端这条路的</title>
    <link href="https://lxchuan12.github.io/2016/09/07/20160907-How-do-I-set-foot-on-the-front-end-of-the-road/"/>
    <id>https://lxchuan12.github.io/2016/09/07/20160907-How-do-I-set-foot-on-the-front-end-of-the-road/</id>
    <published>2016-09-07T13:48:12.000Z</published>
    <updated>2016-09-26T15:05:25.735Z</updated>
    
    <content type="html"><![CDATA[<p>感觉最近<strong>我是如何XXX的</strong>这类标题挺火的。<br>杭州举办G20峰会，9月1日~7日，放假7天，带了本《ES6 标准入门》回家。在火车上看了几集《微微一笑很倾城》，让我回忆起大学生活。就想着下次返杭的时候可以在火车上，写篇文章记录下，自己的前端学习之路。<a id="more"></a><br><strong>1、刚好可以对现在大四迷茫的学弟学妹们，有些指引</strong>。<br><strong>2、还可以借此回忆下大学生活</strong>。<br><strong>3、锻炼自己写长文的逻辑能力</strong>。<br><strong>当然，学习是座大山，人们沿着不同的路登山，分享着自己看到的风景，别人不一定看得到你看到的风景，体会得了你的心情。</strong></p>
<h3 id="接触前端"><a href="#接触前端" class="headerlink" title="接触前端"></a>接触前端</h3><p>2012年，那年大一，只记得上学期参加了四个社团，参加社团的各种活动，比较忙，另外自己收集一些电子书放到我那一点都不智能的手机上看。下学期，我所在的社团计算机协会（后文简称计协），当时教网页制作（嗯，那时不叫前端开发），当然我报名去参加了。比我们大一级的学长用着Dreamweaver软件 给我们教学，超链接，图片，音乐，视频，FLASH等。总之感觉很有趣。也要我们做出一些作品，交作业。但那时我并没有电脑。所以就没做。</p>
<h3 id="江西省网页制作与设计技能大赛"><a href="#江西省网页制作与设计技能大赛" class="headerlink" title="江西省网页制作与设计技能大赛"></a>江西省网页制作与设计技能大赛</h3><p>大二任职计协会长，举办各类活动。也没怎么学习前端开发之类的知识。学习方面好像也就是平时上上课而已，再就是学习电脑方面的技巧，帮助别人解决电脑问题，为此也写了挺多这类技术文章。比如：<a href="http://user.qzone.qq.com/1019963719/blog/1437915015" target="_blank" rel="external">【教程】Ｕ盘、硬盘安装原版win7、8.1、10系统</a>,<a href="http://user.qzone.qq.com/1019963719/blog/1414836306" target="_blank" rel="external">近期上网拨号客户端出现拨号异常、711错误解决方案</a>。<strong>在大学，懂点电脑，会装几个软件，重装个系统，在别人眼中就会被看做是大神，并且很受欢迎</strong>。后来实在忙，就写了篇文章：<a href="http://user.qzone.qq.com/1019963719/blog/1413177913" target="_blank" rel="external">对不起，我不能帮你修电脑了</a><br>转眼间，就到了2014年4月（大二下学期），我所在的信息学院，组织参加省级网页大赛，同时派老师给予培训指导。这时，老师N每周四（或五）给我们上了几周课，主要讲HTML和CSS，还给我们他录制的视频，当时觉得老师好厉害。后来让我们出作品，我们就找设计（陶美）学院的学生给我们设计网页视觉稿。虽然她们学的是设计，但也不是很懂网页设计这块。于是我就自己参照一个视觉比较好的网站，自己仿照着写了一个。当时还是比较忙，只有晚上有时间，所以总共八个页面，好像写了将近10天。主要用了HTML，CSS，js，jquery。现在放在github上，点击可以访问，<a href="http://lxchuan12.github.io/Fashion-Studio/">时尚影楼</a>,那时并不是很懂js和jquery。后来比赛结果出来了，竟然是省级一等奖。其实一等奖有挺多的。这次网页赛，我们学校获得了很多奖项。大二末，图书馆一老师找到我们，想让我们暑假回去学点PHP，开学好让我们上手，帮他做项目。<br>我们信息学院邀请了10级计科的H学长，给我们这些迷茫的学弟学妹开了一次经验分享会，说到腾讯招人的标准。因为他就是课题组研发部的一员。说到课题组研发部的各种好处，跟着里面的老师L学习PHP，学到60％就够找好工作了。总之意思就是要进课题组学习。<br>大二暑假，家里没网，我就在学校，下载好各种PHP学习资源，暑假就在家看着PHP相关的视频等，一套PHP视频也是100多集，基本看完了，也写了些代码。当时也学了javascript，一套JS视频100多集没有看完。其实到后来基本都忘了。另外，大二暑假，线上面试了乔布简历，通过成为了乔布简历校园大使。</p>
<h3 id="加入课题组研发部"><a href="#加入课题组研发部" class="headerlink" title="加入课题组研发部"></a>加入课题组研发部</h3><p>大三上学期，卸任了计协会长，本以为这是大学最后一个职务，谁知这只是第一个。同学A，同学B跟着图书馆老师做PHP的项目。而我此时看着没啥事，就玩起了PPT，新媒体运营，又相继任职了<strong>校园网络中心团队的队长</strong>（关于这个我也写了篇文章<a href="http://user.qzone.qq.com/1019963719/blog/1439715599" target="_blank" rel="external">谈一谈校园网管这一工作</a>，一直任职到大四上学期）。<strong>校友总会志愿团常务团长</strong>（后来由于组织性质缘故，2014年11月，不到两个月就默认退出了），<strong>乔布简历江西省副主管</strong>，那时班上竞选班干，班主任说我们计协会长卸任了怎么不竞选一个职务。我说不用了，我并没有说还有这么多职务。上学期刚开始不久，我们专业老师也邀请了11级的学长学姐分享他们的一些经验。后来我们成立了信管学习小组，规定时间来主教自习。主要是为了学习网站开发。但后来效果不佳，我也较忙，就散了。<br>PPT水平在涨进，主要体现在我做的优秀班集体评选PPT上，传说就是凭借这次展示，让学校领导记住了做PPT还有这么好的人，后来（2015年5月13日）就被找去做更名大学工作汇报PPT，再后来就有了这张图<img src="./img/ppt.png" alt="PPT制作主要经历">，也写了挺多关于PPT制作的文章，比如：<a href="http://www.jianshu.com/p/065989d7783a" target="_blank" rel="external">要做PPT，一直找不到资源？</a>。开发水平并没有多少涨进。<br>大三下学期，我和同学A，B一起加入了课题组学习，做任务。5月19日，成立了<a href="http://mia.pasp.cn/" target="_blank" rel="external">移动互联协会</a>，又任职<strong>移动互联协会首届会长</strong>，一直任职到大四上学期。成立这社团，主要目的就是为了培养开发，后来给学弟学妹们培训HTML，CSS,和PPT，PS等，感觉他们真幸福。现在回想起来，在课题组，老师好像真的没给我什么实质性的开发任务。好像就让我做些与开发不那么相关的事情。可能是我个人原因。<br>4月，九家培训机构到我们信息学院做宣讲，他们的目的很明显，就是招人去培训。下午跟千锋教育的老师聊了挺久，主要是了解了他们机构是如何授课等。当然，他们极力希望我能去他们的好程序员班，但我肯定不会考虑培训。当时听完，晚上总结了一张图<img src="./img/peixun.jpg" alt="从校园宣讲会我学到了什么">。</p>
<p>到学期末（6月），让我和同学A一起做<a href="http://sjysxy.jci.edu.cn/" target="_blank" rel="external">设计学院网站</a>（给了设计稿），用迅时CMS搭建网站后台（Asp.net）。主要是我做。那时相当于隔了一年多，要重新捡起HTML，CSS，JS。连引入的jquery和自己写的JS顺序都能弄反，连Jquery的选项卡都写不来。熬了几次夜，在同学A和老师的指导下。终于完成了。这时，我开始感受到，就业压力，我究竟要往哪条路走。是<strong>新媒体运营（PPT）</strong>，或者是<strong>PHP开发</strong>，还是<strong>前端开发</strong>？<br>如果走新媒体运营（PPT），那么要开个微信公众号，写PPT相关文章，PPT演界网卖模板，等等。</p>
<h3 id="真正意义上开始学前端开发"><a href="#真正意义上开始学前端开发" class="headerlink" title="真正意义上开始学前端开发"></a>真正意义上开始学前端开发</h3><p>大三暑假，课题组业务需求，我和同学A，B，都留在课题组做任务学习。前期我还在学PHP，后来室友L，在杭州暑假实习，他说前端也比较火。刚好又在网易云课堂，看到网易推出前端微专业第二期。价格一千多。虽然对于在更名大学办公室做PPT和做网络中心团队队长赚了少许钱的我来说，不是很贵，但上学期报名了驾照（3K+），所以就买不起了。但那时我就确定了方向，前端开发，因为入门容易，另外在PHP方面根本没做什么项目。要走前端，原生JavaScript必学！于是在知乎上看到说智能社的JS视频<a href="http://study.163.com/course/courseMain.htm?courseId=224014" target="_blank" rel="external">《精通JavaScript开发》</a>，这套课程不错。那时就没多想，先看完这套课程再学其他的。<strong>很多时候，你想学的太多，都在同时学，往往效果不好，而是先学什么再学什么</strong>。记得那时，晚上9点断网，他们在打牌，我回去后在看下载好的视频。学完这条课程后，感觉有些提升，至少熟练了下写代码。<br>学完这套后，就在慕课网学习其他前端相关知识。<br>8月，课题组组建了一支团队，参加互联网+大赛，当时学校比较重视这次比赛，召集参赛者在学校机房培训，解决吃住问题（在教工食堂吃了10多天），我一不小心又成了<strong>临时班长</strong>，协助就业处的老师处理相关事务。我还负责团队赛项目计划书的撰写和PPT制作。<br>后来我们团队依次进入校赛，省赛，国赛，最后10月份到吉林大学（吉林长春）参赛国赛，获得国赛金奖（前30）和最佳创意奖，载誉归来之时，学校领导在校门口接我们，学校党委书记说奖励我们团队10万元。刚开始以为不会分到没多少钱。后来就有钱买课程了。双十一期间，就买了网易云课堂的前端开发微专业第三期，系统的学习前端开发。另外还买了妙味课堂的视频课程学习。<strong>有人说，你要学知识，把市面上这类书都买下来，看懂并消化。那你肯定就有提升了。</strong><br>11月，老师N让我做<a href="http://xgc.jci.edu.cn/" target="_blank" rel="external">学工处</a>的网站，同样是Asp.net的后台。这次就没做多久，也没做设计学院网站那么痛苦。<br>12月，开始做毕业设计，是用php+mySql做第二课堂管理系统。1月5日，提前答辩通过。</p>
<h3 id="大四寒假"><a href="#大四寒假" class="headerlink" title="大四寒假"></a>大四寒假</h3><p>开发水平那么差的我，当然是不忘抓住这段时间，提升自己的。看妙味课堂的视频。学着前端微专业，看课程，查资料，讨论区讨论，做作业，改作业。提交作业有截止日期。感觉这段时间挺充实的。<br>也在考虑大四下学期是否去学校，校内实习，还是去公司实习。老师L是推荐我去公司实习，能学挺多。<br>虽然11月份参加了学校的招聘会，有公司问我用过Bootstrap吗，我说没有。后来有几家公司，叫我去实习，我没去。主要是以下考虑：<br><strong>1、公司前端团队好，实习则好。不好，不如自学</strong>。<br><strong>2、自己不足还有很多，希望能继续学完前端开发微专业，获得优秀学员，也许能进好一点的公司</strong>。<br><strong>3、毕竟不考研，以后有的是工作时间，还不如继续享受下最后一学期的校园生活</strong>。</p>
<h3 id="大四最后一个学期"><a href="#大四最后一个学期" class="headerlink" title="大四最后一个学期"></a>大四最后一个学期</h3><p>开学伊始，我和同学A，B都没去公司实习，重新来到了课题组。刚去不久，老师N就推荐我去南昌，算是实习，说有搞PHP的愿意带一个人一起做项目。后来委婉的拒绝了。因为已经不想走PHP开发路线，想走前端开发路线。但本学期，老师交给我的任务依旧是PHP开发的。第二课堂管理系统（PHP+MySql，CI框架）。因为不是很赶，我就前端微专业，百度前端技术学院任务，（妙味课堂的vip视频）三线并行。4月初，完成了<a href="http://lxchuan12.github.io/Netease-Web/">前端微专业大作业</a>，获得优秀学员证书。在学校，上班是996（早上9点上班，晚上9点下班，中午休息1-2小时）。周日老师不在办公室，而我一般在（同学A，B不在）。因为我太Low了，所以只好多花点时间学习。有段时间，都是24点前提交完代码，才去刷牙洗脸睡觉。晚上躺着睡前还在<strong>牛客网</strong>刷题，或者看视频，或者看前端开发类电子书。</p>
<h3 id="面试，入职杭州一家移动互联网公司"><a href="#面试，入职杭州一家移动互联网公司" class="headerlink" title="面试，入职杭州一家移动互联网公司"></a>面试，入职杭州一家移动互联网公司</h3><p>4月底投简历，5月劳动节一过，我和同学A就来杭州面试。我求职还算顺利，面试了3天，共9家。有的给了offer，就选了一家我认为比较合适的。6月1日入职杭州一家移动互联网公司，公司使用花名，我自己挑选了一个，叫<strong>轩辕</strong>。于是把网上各种昵称，改成了<strong>轩辕Rowboat</strong>。</p>
<blockquote>
<p><strong>轩辕Rowboat</strong>由来：轩辕(公司花名)。Rowboat，英文名，拆解：Row(音：罗)boat(意：小船(音：小川))。其他还挺喜欢这花名的，轩辕（剑），剑未佩妥，出门便是江湖。</p>
</blockquote>
<p>公司使用的技术主要有：HTML5，模板语言（velocity，thymeleaf,handlebarsjs，underscorejs工具库等），CSS3，Less，Sass，JS，JQuery，zeptojs，bootstrap，angularjs，vuejs，git，gulp，webpack，ES6等（React，nodejs暂时没用到）。<br>不知不觉就写了挺多字，感觉一路走来，<strong>在网易云课堂购买了付费课程（office，前端微专业等）两千左右（已赚回），当没有时间，有钱时，可以选择付费学习，投资学习，回报很大</strong>。<strong>技术提升需要一定的过程，脚踏实地走好每一步，先定好一个个小目标，然后去一一实现</strong>。<strong>看过很多前端大神成长路线，也是从刚开始啥都不会，一步一步变成前端大神的。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;感觉最近&lt;strong&gt;我是如何XXX的&lt;/strong&gt;这类标题挺火的。&lt;br&gt;杭州举办G20峰会，9月1日~7日，放假7天，带了本《ES6 标准入门》回家。在火车上看了几集《微微一笑很倾城》，让我回忆起大学生活。就想着下次返杭的时候可以在火车上，写篇文章记录下，自己的前端学习之路。
    
    </summary>
    
      <category term="自我成长" scheme="https://lxchuan12.github.io/categories/%E8%87%AA%E6%88%91%E6%88%90%E9%95%BF/"/>
    
    
      <category term="self-growth" scheme="https://lxchuan12.github.io/tags/self-growth/"/>
    
      <category term="前端" scheme="https://lxchuan12.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>由JavaScript一道面向对象题引发的思考</title>
    <link href="https://lxchuan12.github.io/2016/08/30/20160830-js-oop-prototype-constructor/"/>
    <id>https://lxchuan12.github.io/2016/08/30/20160830-js-oop-prototype-constructor/</id>
    <published>2016-08-30T15:09:00.000Z</published>
    <updated>2016-08-31T05:13:33.817Z</updated>
    
    <content type="html"><![CDATA[<p>一个前端QQ群里，有人提问，关于面向对象的……我看完后解答了<a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">function Person()&#123;</div><div class="line">  this.name = &quot;lxchuan12&quot;;</div><div class="line">&#125;</div><div class="line">var rowboat = new Person();</div><div class="line">Person.prototype.age=20;</div><div class="line">Person.prototype=&#123;a:1,b:2&#125;;</div><div class="line">//Person.prototype.constructor = Person;</div><div class="line">console.log(rowboat.name);//&quot;lxchuan12&quot;</div><div class="line">console.log(rowboat.age);//20</div><div class="line">console.log(rowboat.a);//undefined</div><div class="line">console.log(rowboat.b);//undefined</div><div class="line">console.log(rowboat);</div><div class="line">console.log(Person.prototype.name);//undefined</div><div class="line">console.log(Person.prototype.age);//undefined</div><div class="line">console.log(Person.prototype.a);//1</div><div class="line">console.log(Person.prototype.b);//2</div><div class="line">console.log(Person.prototype.constructor);//function Object() &#123; [native code] &#125;</div><div class="line">console.log(Person.prototype);//Object &#123;a: 1, b: 2&#125;</div></pre></td></tr></table></figure></p>
<h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><p>他不明白，为什么rowboat.age为20。但Person.prototype.age却为undefined。</p>
<h3 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h3><p>我把代码在<a href="http://jsbin.com/muzofix/19/edit?html,js,console" target="_blank" rel="external">jsbin</a>运行后，为之解答。<br>Person.prototype={a:1,b:2};这种写法是赋值，<br>与Person.prototype.age=20;写法不同，不经意间把constructor指向原本为Person的，改为了Object（一般来说，需要修正指向。Person.prototype.constructor = Person）。<br><img src="./img/console-output.jpg" alt="控制台输出对象"><br>相当于prototype下只有a,b两个值了。所以Person.prototype.age则是undefined。<br>但rowboat.age是原型上的，可以找到，所以是20。<br>所谓原型查找：查找的是构造器查找的原型，构造器是指向一个function(){},里面没有a和b.</p>
<h3 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h3><p><a href="https://segmentfault.com/a/1190000006009690" target="_blank" rel="external">《JavaScript高级程序设计》——对象学习笔记</a></p>
<h3 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h3><p>学习js面对对象编程相关知识,对了解js语言很有帮助。另外，有人说，能写组件，做组件开发说明达到了中级水平。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个前端QQ群里，有人提问，关于面向对象的……我看完后解答了
    
    </summary>
    
      <category term="JavaScript" scheme="https://lxchuan12.github.io/categories/JavaScript/"/>
    
    
      <category term="js" scheme="https://lxchuan12.github.io/tags/js/"/>
    
      <category term="oop" scheme="https://lxchuan12.github.io/tags/oop/"/>
    
  </entry>
  
  <entry>
    <title>sass基本特性-运算</title>
    <link href="https://lxchuan12.github.io/2016/08/29/20160829-Sass-basic-characteristics-of-computing/"/>
    <id>https://lxchuan12.github.io/2016/08/29/20160829-Sass-basic-characteristics-of-computing/</id>
    <published>2016-08-29T13:26:28.000Z</published>
    <updated>2016-08-29T15:16:14.266Z</updated>
    
    <content type="html"><![CDATA[<p>CSS中目前只有calc()能做运算，但是在Sass中，可以做各种数学运算……<a id="more"></a></p>
<p><strong>1、加法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box&#123;</div><div class="line">    width: 20px + 8in;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译出来的CSS:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">  width: 788px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>1in = 96px;</p>
<p>当em,rem等相对当前字体，于px在一起不能运算，会报错，如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box&#123;</div><div class="line">    width: 20px + 8em;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>不过如果其中一个不同单位，那么会以另一个带单位的为准，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.box&#123;</div><div class="line">    width: 20px + 8;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.box2&#123;</div><div class="line">    width: 20em + 8;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译出来的CSS为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">  width: 28px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.box2 &#123;</div><div class="line">  width: 28em;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>2、减法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$container: 960px;</div><div class="line">$sidebar-width: 220px;</div><div class="line">$gap-width: 20px;</div><div class="line"></div><div class="line">.content&#123;</div><div class="line">    width: $container - $sidebar-width - $gap-width;</div><div class="line">    float: left;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译出来的CSS：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.content &#123;</div><div class="line"></div><div class="line">  width: 720px;</div><div class="line"></div><div class="line">  float: left; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>减法和加法一样，不支持em,rem等相对当前字体大小的单位与px进行计算。</p>
<p><strong>3、乘法</strong></p>
<p>乘法运算时，只需要其中一个带单位即可，如果都带有单位会报错,<br>如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box&#123;</div><div class="line">    width: 20px * 20px</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译时会报错。</p>
<p>而:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box&#123;</div><div class="line">    width: 20px * 20;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译出来的CSS：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box&#123;</div><div class="line">    width: 400px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>与加减法一样，不同类型的单位运算时会报错。</p>
<p><strong>4、除法</strong></p>
<p>Sass的乘法运算规则也适用于除法运算，不过除法运算有特殊之处，因为”/”符号在CSS中已经作为一种符号使用，因此在Sass中直接使用”/”作为处好时，将不会生效，编译时既不会报错，也不会得到我们想要的效果。</p>
<p>如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box&#123;</div><div class="line">    width: 100px / 2;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译出来的CSS:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">  width: 100px / 2;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>要修正这个文字，只需要给运算的外面添加一对小括号即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box&#123;</div><div class="line">    width: (100px / 2);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译出来的CSS为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">  width: 50px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>除了小括号以外，如果除了 “/” 外，还有其它的运算符号，那么也会被当作除号看待。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">  width: 100px / 2 + 20px;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译出来的CSS为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">    width: 70px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>另外，如果是用变量进行除法运算，”/”也会自动被识别为除法。</p>
<p>如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$width: 960px;</div><div class="line"></div><div class="line">.col &#123;</div><div class="line">   width: $width / 10;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译出来的CSS为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.col &#123;</div><div class="line"></div><div class="line">  width: 96px; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>综合上述，”/ ”符号被当作除法运算符时有以下几种情况：</p>
<p>如果数值或它的任意部分是存储在一个变量中或是函数的返回值。<br>如果数值被圆括号包围。<br>如果数值是另一个数学表达式的一部分。<br>在除法运算时，如果两个值带有相同的单位值时，除法运算之后会得到一个不带单位的数值。</p>
<p>关于单位计算的问题，同物理倒是非常像。</p>
<p>如果不想记”/”的规则，那么在想作为除法使用是，加上一个括号即可。</p>
<p><strong>5、颜色运算</strong></p>
<p>所有的运算都支持颜色值。<br>如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">p &#123;</div><div class="line">  color: #010203 + #040506;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译出的CSS为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">p &#123;</div><div class="line">  color: #050709;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>同样颜色值也支持乘法运算:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">p &#123;</div><div class="line">  color: #010203 * 2;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译出来的CSS:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">p &#123;</div><div class="line">  color: #020406;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运算规则和二进制乘法相同，依次与每一位相乘。个人觉得颜色值的运算意义不是很大。</p>
<p><strong>6、字符运算</strong></p>
<p>在Sass中可以用”+”号对字符串进行拼接，如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$content: &quot;Hello&quot; + &quot; &quot; + &quot;Sass!&quot;;</div><div class="line">.box&#123;</div><div class="line">    &amp;:after&#123;</div><div class="line">        content: $content;</div><div class="line">    &#125;</div><div class="line">    &amp;:before&#123;</div><div class="line">        content: &quot; #&#123;$content&#125; &quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译出来的CSS为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.box:after &#123;</div><div class="line">  content: &quot;Hello Sass!&quot;; </div><div class="line">&#125;</div><div class="line">.box:before &#123;</div><div class="line">  content: &quot; Hello Sass! &quot;; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>除了在变量中做字符连接运算之外，还可以直接通过 +，把字符连接在一起：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">div&#123;</div><div class="line">    cursor: e + -resize;</div><div class="line">&#125;</div><div class="line"></div><div class="line">span&#123;</div><div class="line">    cursor: &quot;e&quot; + &quot;-resize&quot;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译出来的CSS为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">div &#123;</div><div class="line">  cursor: e-resize;</div><div class="line">&#125;</div><div class="line"></div><div class="line">span &#123;</div><div class="line">  cursor: &quot;e-resize&quot;; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>==注意==:</strong>如果有引号的字符串被添加了一个没有引号的字符串 （也就是，带引号的字符串在 + 符号左侧）， 结果会是一个有引号的字符串。 同样的，如果一个没有引号的字符串被添加了一个有引号的字符串 （没有引号的字符串在 + 符号左侧）， 结果将是一个没有引号的字符串。 也就是说始终与加号左边的保持一致:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">p:before &#123;</div><div class="line">  content: &quot;Foo &quot; + Bar;</div><div class="line">  font-family: sans- + &quot;serif&quot;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译出来的CSS为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">p:before &#123;</div><div class="line">  content: &quot;Foo Bar&quot;;</div><div class="line">  font-family: sans-serif; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>根据<a href="http://www.imooc.com/learn/311" target="_blank" rel="external">慕课网sass入门篇</a>整理</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CSS中目前只有calc()能做运算，但是在Sass中，可以做各种数学运算……
    
    </summary>
    
      <category term="sass" scheme="https://lxchuan12.github.io/categories/sass/"/>
    
    
      <category term="sass" scheme="https://lxchuan12.github.io/tags/sass/"/>
    
  </entry>
  
  <entry>
    <title>js如何判断对象为空</title>
    <link href="https://lxchuan12.github.io/2016/08/27/20160827-Judge-null-object-by-javascript/"/>
    <id>https://lxchuan12.github.io/2016/08/27/20160827-Judge-null-object-by-javascript/</id>
    <published>2016-08-27T14:46:23.000Z</published>
    <updated>2016-08-29T15:46:51.607Z</updated>
    
    <content type="html"><![CDATA[<p>vuejs项目中，遇到要判断data中的对象是否为空……<a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">var vm = new Vue(&#123;</div><div class="line">  el:&apos;#demo&apos;,</div><div class="line">  data:&#123;</div><div class="line">    msg:&apos;hello&apos;,</div><div class="line">    ms:&#123;&#125;</div><div class="line">  &#125;,</div><div class="line">  created ()&#123;</div><div class="line">    let that = this;</div><div class="line">    console.log(that.ms);</div><div class="line">    console.log(that.msg);</div><div class="line">    console.log(that.ms === null);//false</div><div class="line">    if(that.ms)&#123;//true</div><div class="line">      console.log(1);//1,</div><div class="line">    &#125;;</div><div class="line">    console.log(that.ms === undefined);//false</div><div class="line">    for(var attr in that.ms)&#123;</div><div class="line">      console.log(attr);</div><div class="line">      console.log(&apos;2&apos;);</div><div class="line">    &#125;</div><div class="line">    //console.log(&apos;3&apos;);</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><a href="http://jsbin.com/xasemec/22/edit?html,js,console" target="_blank" rel="external">点击查看详情vuejs</a></p>
<p>jquery有工具方法$.isEmptyObject(),查看源码发现这样实现的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">isEmptyObject:function(obj)&#123;</div><div class="line">    var name;</div><div class="line">    for(name in obj)&#123;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">    return true;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这是利用了for in无法循环到系统自带的属性值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//比如：</div><div class="line">function Watch()&#123;&#125;</div><div class="line">//Watch.prototype.constructor = Watch;</div><div class="line">//系统自己生成。写出来这句也无法用for in循环到。</div><div class="line">for (var attr in Watch.prototype)&#123;</div><div class="line">    console.log(&apos;can not console&apos;);//无法输出。</div><div class="line">&#125;</div><div class="line">//如果自己写,则可以输出show.</div><div class="line">Watch.prototype.show = function()&#123;&#125;</div></pre></td></tr></table></figure></p>
<p>这时想起了<a href="http://www.tuicool.com/articles/3meE3a" target="_blank" rel="external">js中数组遍历for与for in区别(强烈建议不要使用for in遍历数组)</a><br>$.isPlainObject()方法：<a href="http://www.365mini.com/page/jquery_isplainobject.htm" target="_blank" rel="external">判断”纯粹的对象”，就是该对象是通过”{}”或”new Object”创建的。</a><br>$.isPlainObject( document.location ) ); // false(在IE中返回true)</p>
<p><strong>参考资料：</strong><a href="http://www.cnblogs.com/TomXu/archive/2011/12/15/2288411.html" target="_blank" rel="external">汤姆大叔博客</a></p>
<p>小结:js一切皆为对象，了解面对对象编程很有好处。能研究一遍jquery源码,定能更上一层楼。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;vuejs项目中，遇到要判断data中的对象是否为空……
    
    </summary>
    
      <category term="JavaScript" scheme="https://lxchuan12.github.io/categories/JavaScript/"/>
    
    
      <category term="vuejs" scheme="https://lxchuan12.github.io/tags/vuejs/"/>
    
      <category term="js" scheme="https://lxchuan12.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>iPhone safari可以通过访问链接来打开微信</title>
    <link href="https://lxchuan12.github.io/2016/08/20/20160820-safari-open-wechat/"/>
    <id>https://lxchuan12.github.io/2016/08/20/20160820-safari-open-wechat/</id>
    <published>2016-08-20T15:35:26.000Z</published>
    <updated>2016-08-22T15:33:42.579Z</updated>
    
    <content type="html"><![CDATA[<p>今天发现：iPhone safari可以可以通过访问链接来打开微信。而安卓手机不行。不多说，直接show the code……<a id="more"></a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">let ua = window.navigator.userAgent.toLowerCase();</div><div class="line">if ((ua.indexOf(&apos;iphone&apos;)&gt;-1)&amp;&amp;(ua.indexOf(&apos;safari&apos;)&gt;-1))&#123;</div><div class="line">    window.location.href = &apos;weixin:http://weixin.qq.com&apos;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天发现：iPhone safari可以可以通过访问链接来打开微信。而安卓手机不行。不多说，直接show the code……
    
    </summary>
    
      <category term="JavaScript" scheme="https://lxchuan12.github.io/categories/JavaScript/"/>
    
    
      <category term="js" scheme="https://lxchuan12.github.io/tags/js/"/>
    
      <category term="wechat" scheme="https://lxchuan12.github.io/tags/wechat/"/>
    
  </entry>
  
  <entry>
    <title>(转)一种代码量更少的(micro clearfix)清除浮动的hack</title>
    <link href="https://lxchuan12.github.io/2016/08/19/20160819-css-micro%20clearfix-hack/"/>
    <id>https://lxchuan12.github.io/2016/08/19/20160819-css-micro clearfix-hack/</id>
    <published>2016-08-19T15:24:12.000Z</published>
    <updated>2016-08-19T15:36:30.924Z</updated>
    
    <content type="html"><![CDATA[<p>clearfix hack做为一种无需借助额外标签清除浮动的方法已经人尽皆知了，本文给出一种优化方案，可以进一步减少所需css的数量……<a id="more"></a></p>
<p>Demo: <a href="http://nicolasgallagher.com/micro-clearfix-hack/demo/" target="_blank" rel="external">Micro clearfix hack</a></p>
<p>Known support: Firefox 3.5+, Safari 4+, Chrome, Opera 9+, IE 6+</p>
<p>micro clearfix基于 <a href="http://www.yuiblog.com/blog/2010/09/27/clearfix-reloaded-overflowhidden-demystified/" target="_blank" rel="external">Thierry Koblentz’s “clearfix reloaded</a>reloaded优化而来，适用于现代浏览器（modern browsers）</p>
<p>下面是micro clearfix的代码片段<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">.cf:before,</div><div class="line">.cf:after &#123;</div><div class="line">    content: &quot; &quot;; </div><div class="line">    display: table; </div><div class="line">&#125;</div><div class="line">.cf:after &#123;</div><div class="line">    clear: both;</div><div class="line">&#125;</div><div class="line">.cf &#123;</div><div class="line">    *zoom: 1;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>“micro clearfix”生成伪类元素，并将其display属性设置为table，这样就会创建一个匿名<a href="http://www.w3.org/TR/CSS2/tables.html#anonymous-boxes" target="_blank" rel="external">table-cell</a>，同时生成了新的BFC，这样意味着<br>:before伪类会阻止上边距折叠，:after伪类用于清除浮动，好处是不用隐藏产生的内容了，所需要的css代码就变少了。</p>
<p>为了清除浮动包含:before选择器是没必要的，但是:before的加入可以阻止top-margins折叠，这样有两个好处：</p>
<p>同其他使用BFC方式清除浮动一样，确保了视觉上的一致，例如使用overflow:hidden<br>IE 6/7中使用zoom:1 时，确保了视觉上的一致<br>N.B.: 有一个细节：IE 6/7中在新的BFC中浮动元素的下边距是不会包含在内的，进一步的描述可以看这里： <a href="http://nicolasgallagher.com/better-float-containment-in-ie/" target="_blank" rel="external">Better float containment in IE using CSS expressions</a>.<br>content:” “的使用避免了一个Opera的bug，如果contenteditable属性同时出现在元素中时，这个bug会在待清除元素周围生成空格。一种可选的修复方案是使用 font:0/0 a，多谢Sergio Cerrutti测试出这个bug</p>
<p>转载于：<a href="http://www.jianshu.com/p/7521ec9d8f24" target="_blank" rel="external">一种代码量更少的(micro clearfix)清除浮动的hack</a></p>
<p>英文版：<a href="http://nicolasgallagher.com/micro-clearfix-hack/" target="_blank" rel="external">A new micro clearfix hack</a>，转载标明出处，谢谢！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;clearfix hack做为一种无需借助额外标签清除浮动的方法已经人尽皆知了，本文给出一种优化方案，可以进一步减少所需css的数量……
    
    </summary>
    
      <category term="CSS" scheme="https://lxchuan12.github.io/categories/CSS/"/>
    
    
      <category term="css" scheme="https://lxchuan12.github.io/tags/css/"/>
    
      <category term="clearfix" scheme="https://lxchuan12.github.io/tags/clearfix/"/>
    
  </entry>
  
  <entry>
    <title>vuejs生态，自顶而下学习</title>
    <link href="https://lxchuan12.github.io/2016/08/18/20160818-chat/"/>
    <id>https://lxchuan12.github.io/2016/08/18/20160818-chat/</id>
    <published>2016-08-18T15:24:12.000Z</published>
    <updated>2016-08-20T15:48:10.476Z</updated>
    
    <content type="html"><![CDATA[<p>由于我git比较活跃，有幸收到大搜车前端leader芋头（前端乱炖网站创始人，颜文字APP）的邮件，并与之交流。<a id="more"></a><a href="https://www.zhihu.com/people/li-shou-xin" target="_blank" rel="external">小芋头君的知乎主页</a>.<br><a href="http://f2e.souche.com/blog/" target="_blank" rel="external">大搜车前端团队博客</a>.</p>
<h3 id="大概整理："><a href="#大概整理：" class="headerlink" title="大概整理："></a>大概整理：</h3><blockquote>
<p>1、自顶而下学习，看vuejs文章，熟悉其生态圈，怎么产生的，解决了什么问题。不是会写，就行。很多人看完vuejs教程都会写。</p>
<blockquote>
<p>比如angularjs，双向绑定，vuejs是单向绑定，虽然也可以双向绑定。<br>2、自我管理，自我规划，自我提升。综合能力。<br>3、追新，有些人工作了几年就不学新东西，这样没提升。<br>4、前端工程化，（打包工具只是其中一小部分）。<br>5、目前重要的不是学ES6，而是把基础夯实。</p>
</blockquote>
</blockquote>
<p>这让我想起：知乎上一个提问<a href="https://www.zhihu.com/question/49164656/noti-answers?group_id=744949063161507840" target="_blank" rel="external">大学毕业做前端工作感觉最近遇到了瓶颈，不知道该如何提升自己？</a></p>
<blockquote>
<p>作者：林獺<br>链接：<a href="https://www.zhihu.com/question/49164656/answer/114625869" target="_blank" rel="external">https://www.zhihu.com/question/49164656/answer/114625869</a><br>来源：知乎<br>著作权归作者所有，转载请联系作者获得授权。</p>
</blockquote>
<p>首先，正视自己的能力。前端的新技术，不是门坎较低、就是给人一种容易掌握的错觉。Less/Sass 不谈，你学了 Angular，懂得 data-binding、router 等背后的实现原理吗？你虽会用 Node 搭建一个本地 server，但懂得 I/O 流程、HTTP 和操作系统知识吗？你能不诉诸书本和搜索引擎，写出几个 JS 设计模式和继承模式吗？你能完全脱离 jQuery 来操纵 DOM 和 Ajax 吗？你知道怎么写 CSS 选择器能让浏览器解释速度最快吗？你会在开发过程中，下意识地追求 HTTP 请求最少吗？……<br>如果你不能的话，那就需要重新审视自己，是否被一时的自我成就和满足所障目，而忘却了技术最重要的永远是基础。<br>如果你能的话，恭喜你，你已经不止是合格的前端了。这样的话，你要怎么做才能走出平阳、找到归宿呢？<br>我的建议是积累经验——积累工作和项目的经验，闲时继续学习并深入新技术。你的工作效率高、闲时多，这是好事。我毕业后第一份工作也是如此，领导缺乏技术嗅觉，技术路线过时老旧。我是这么应对的：凭越发娴熟的技能，加快工作速度，换来学习的时间。接着，主动把你的新技能移植到公司项目中。例如 Gulp、Less/Sass，都是开发环境下的利器，开发环境下你想怎么用就怎么用，外人只看到生产代码；甚或 Angular——遇到独力负责的中重量级项目，主动考虑此类 MVC 框架的可行性；有时不是项目和领导不允许使用新框架，而是自己不愿走出舒适圈、缺乏实践自信。<br>（业余时间，用你的 Gulp、Angular 写一些个人项目放在 GitHub 上，配以 Node mock server 甚至 Redis 数据库，有助理解前后端交互和数据库的组织，也增加面试的资本。）<br>当你「利用」这个公司，积累了新老技术的实践经验后，便是另谋高就的时机了。你的简历不仅会有上述技能，还会有「一力为旧公司引入任务构建、工作流等新技术」之类的 impressing 字眼。<br>在投简历时，开始考虑实质回报以外更深层的东西。你可以询问对方，贵团队的前端技术栈为何，未来的技术规划为何。因为接下来的新工作，在你的职场生涯中，是最能影响你的技术修炼的——你将第一次名正言顺地学习技术、并将其付诸实践、甚至有同样技术路线的同事大牛带领。对比上一家，事半功倍。</p>
<h3 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h3><p>坚持学习，自我提升；<br>重视基础！<br>努力争取能进好团队，学习更快。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于我git比较活跃，有幸收到大搜车前端leader芋头（前端乱炖网站创始人，颜文字APP）的邮件，并与之交流。
    
    </summary>
    
      <category term="自我成长" scheme="https://lxchuan12.github.io/categories/%E8%87%AA%E6%88%91%E6%88%90%E9%95%BF/"/>
    
    
      <category term="self-growth" scheme="https://lxchuan12.github.io/tags/self-growth/"/>
    
  </entry>
  
  <entry>
    <title>弹窗（modal）垂直水平居中</title>
    <link href="https://lxchuan12.github.io/2016/08/17/20160817-modal-center/"/>
    <id>https://lxchuan12.github.io/2016/08/17/20160817-modal-center/</id>
    <published>2016-08-17T15:07:15.000Z</published>
    <updated>2016-08-17T15:58:06.795Z</updated>
    
    <content type="html"><![CDATA[<p>今天发现{margin:0 auto}竟然能使固定定位fixed(脱离文档流）（在chrome手机模拟器和chrome浏览器）水平居中。<br>在我安卓手机(4.2.2)不行。后来改成{margin-left:-定宽/2}，于是在安卓手机也可以了……<a id="more"></a></p>
<h2 id="弹窗垂直水平居中："><a href="#弹窗垂直水平居中：" class="headerlink" title="弹窗垂直水平居中："></a>弹窗垂直水平居中：</h2><h3 id="方法1："><a href="#方法1：" class="headerlink" title="方法1："></a>方法1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">.modal&#123;</div><div class="line">    position:fixed;</div><div class="line">    width:250px;</div><div class="line">    height:100px;</div><div class="line">    background:#ececec;</div><div class="line">    left:50%;</div><div class="line">    top:50%;</div><div class="line">    margin-left:-125px;</div><div class="line">    margin-top:-50px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>小结:</strong>fixed，支持到IE7，IE6不支持。modal定宽定高。</p>
<h3 id="方法2："><a href="#方法2：" class="headerlink" title="方法2："></a>方法2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">.modal&#123;</div><div class="line">    position:fixed;</div><div class="line">    width:250px;</div><div class="line">    height:100px;</div><div class="line">    background:#ececec;</div><div class="line">    left:50%;</div><div class="line">    top:50%;</div><div class="line">    -webkit-transform:translate(-50%,-50%);</div><div class="line">    transform:translate(-50%,-50%);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>小结:</strong>不支持IE9+，modal不需定宽定高，手机端可用。（发现如果有其他的transform，好像先执行其他的，在移动到中心。）另外，发现{margin:0 auto}:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">.modal&#123;</div><div class="line">    position:fixed;</div><div class="line">    width:250px;</div><div class="line">    left:0;</div><div class="line">    right:0;</div><div class="line">    top:40%;</div><div class="line">    bottom:auto;</div><div class="line">    margin:0 auto;</div><div class="line">    background:#ececec;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>竟然能使固定定位fixed(脱离文档流）（在chrome手机模拟器和chrome浏览器）水平居中。<br>在我安卓手机(4.2.2)不行。后来改成{margin-left:-定宽/2}，于是在安卓手机也可以了</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天发现{margin:0 auto}竟然能使固定定位fixed(脱离文档流）（在chrome手机模拟器和chrome浏览器）水平居中。&lt;br&gt;在我安卓手机(4.2.2)不行。后来改成{margin-left:-定宽/2}，于是在安卓手机也可以了……
    
    </summary>
    
      <category term="css" scheme="https://lxchuan12.github.io/categories/css/"/>
    
    
      <category term="css" scheme="https://lxchuan12.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>js手机号码正则表达式</title>
    <link href="https://lxchuan12.github.io/2016/08/16/20160816-reg-phone-num/"/>
    <id>https://lxchuan12.github.io/2016/08/16/20160816-reg-phone-num/</id>
    <published>2016-08-16T15:06:16.000Z</published>
    <updated>2016-08-20T15:51:20.899Z</updated>
    
    <content type="html"><![CDATA[<p>前端做了手机号的限制，但有的号码通过了前端验证，但依旧数据无法保存成功，但又没错误提示。与后台联调发现，原来是后端也做了限制，还不一样……<a id="more"></a><br><strong>1.前端验证</strong><br>var reg = /^1\d{10}$/;</p>
<p><strong>2.后端验证</strong><br>var reg = /^1[3|4|5|7|8][0-9]{9}$/; //验证规则<br>不知其合理性，普适性，于是搜索了下。</p>
<p><strong>3.最后采用：</strong></p>
<p>var reg = /^1\d{10}$/; //验证规则<br>var phoneNum = ‘18296821923’;//手机号码<br>var flag = reg.test(phoneNum); //true</p>
<p><strong>4.参考资料：</strong><br><a href="http://caibaojian.com/phone-regexp.html" target="_blank" rel="external">JS最新手机号码检验正则表达式</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前端做了手机号的限制，但有的号码通过了前端验证，但依旧数据无法保存成功，但又没错误提示。与后台联调发现，原来是后端也做了限制，还不一样……
    
    </summary>
    
      <category term="js" scheme="https://lxchuan12.github.io/categories/js/"/>
    
    
      <category term="js" scheme="https://lxchuan12.github.io/tags/js/"/>
    
      <category term="reg" scheme="https://lxchuan12.github.io/tags/reg/"/>
    
  </entry>
  
  <entry>
    <title>new Date()的浏览器兼容性问题</title>
    <link href="https://lxchuan12.github.io/2016/08/13/20160813-tip-js-new-date/"/>
    <id>https://lxchuan12.github.io/2016/08/13/20160813-tip-js-new-date/</id>
    <published>2016-08-13T14:03:29.000Z</published>
    <updated>2016-08-14T15:30:20.655Z</updated>
    
    <content type="html"><![CDATA[<h3 id="兼容性问题"><a href="#兼容性问题" class="headerlink" title="兼容性问题"></a>兼容性问题</h3><p>var  date = new Date(‘2016-08-13 13:25:50’).getTime();这种chrome下没问题，但ie和firefox下是NaN,在Safari下也有问题……<a id="more"></a></p>
<p>var  date = new Date(‘2016-08-13 13:25:50’).getTime(); 这么写的时候所有浏览器都没有问题。</p>
<p>所以遇到兼容的时候：<br>这样就可以将上面那种格式yyyy-MM-dd改为yyyy/MM/dd 再去转换</p>
<p>var  date = new Date((‘2016-08-13 13:25:50’).replace(new RegExp(“-“,”g”),”/“)).getTime()</p>
<h3 id="另外："><a href="#另外：" class="headerlink" title="另外："></a>另外：</h3><p>+new Date()=== new Date().getTime();<br>true.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;d&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;div id=&quot;getTime&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;div id=&quot;type&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">    var d1 = document.getElementById(&apos;d&apos;);</div><div class="line">    var getTime1 = document.getElementById(&apos;getTime&apos;);</div><div class="line">    var type1 = document.getElementById(&apos;type&apos;);</div><div class="line">    var date = new Date(&apos;2016-08-13 13:25:50&apos;);</div><div class="line">    d.innerHTML = date.toString();</div><div class="line">    d.innerHTML = date.getTime();</div><div class="line">    type1.innerHTML = typeof date.toString();</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<h3 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h3><p><a href="https://segmentfault.com/a/1190000003710954?mType=Group" target="_blank" rel="external">JS原生Date类型方法的一些冷知识</a><br><a href="http://blog.csdn.net/blueheart20/article/details/44902747" target="_blank" rel="external">javascript中new Date()的浏览器兼容性问题</a><br><a href="http://www.bubuko.com/infodetail-1643478.html" target="_blank" rel="external">js new Date(“2016-07-01 08:00:00”) 格式在IE内核浏览器中显示NaN的问题</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;兼容性问题&quot;&gt;&lt;a href=&quot;#兼容性问题&quot; class=&quot;headerlink&quot; title=&quot;兼容性问题&quot;&gt;&lt;/a&gt;兼容性问题&lt;/h3&gt;&lt;p&gt;var  date = new Date(‘2016-08-13 13:25:50’).getTime();这种chrome下没问题，但ie和firefox下是NaN,在Safari下也有问题……
    
    </summary>
    
      <category term="javascript" scheme="https://lxchuan12.github.io/categories/javascript/"/>
    
    
      <category term="date" scheme="https://lxchuan12.github.io/tags/date/"/>
    
      <category term="javascript" scheme="https://lxchuan12.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>vue js两次请求</title>
    <link href="https://lxchuan12.github.io/2016/08/12/20160812-vue-route%20request/"/>
    <id>https://lxchuan12.github.io/2016/08/12/20160812-vue-route request/</id>
    <published>2016-08-12T14:59:16.000Z</published>
    <updated>2016-08-16T15:06:06.197Z</updated>
    
    <content type="html"><![CDATA[<p>当使用vue-resource发送注册的POST请求时，Fiddler捕获到了2次请求，第1次是由浏览器发送的OPTIONS预请求，第2次才是实际的POST请求……<a id="more"></a>这和使用$.ajax时是不一样的，因为$.ajax会将非GET请求的Content-Type设置为application/x-www-form-urlencoded，而vue-resource发送POST请求的Content-Type为application/json;charset=UTF-8。</p>
<h2 id="1-全局启用："><a href="#1-全局启用：" class="headerlink" title="1.全局启用："></a>1.全局启用：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Vue.http.options.emulateJSON = true</div></pre></td></tr></table></figure>
<h2 id="2-局部启用"><a href="#2-局部启用" class="headerlink" title="2.局部启用"></a>2.局部启用</h2><p>启用了emulateJSON选项后，使得POST请求的Content-Type变为application/x-www-form-urlencoded<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">this.$http.post(this.registerUrl, this.registerModel ,&#123; emulateJSON : true&#125;)</div><div class="line">    .then( (response) =&gt; &#123;</div><div class="line">        this.msg = ‘注册成功！‘</div><div class="line">    &#125;)</div></pre></td></tr></table></figure></p>
<h2 id="3-参考资料："><a href="#3-参考资料：" class="headerlink" title="3.参考资料："></a>3.参考资料：</h2><p><a href="https://github.com/vuejs/vue-resource/blob/master/docs/http.md" target="_blank" rel="external">参考官方文档</a><br><a href="http://www.mamicode.com/info-detail-1439661.html" target="_blank" rel="external">$.ajax和vue-resource实现OAuth</a><br><a href="http://www.doc00.com/doc/1001004eg" target="_blank" rel="external">Vue.js——vue-resource全攻略</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当使用vue-resource发送注册的POST请求时，Fiddler捕获到了2次请求，第1次是由浏览器发送的OPTIONS预请求，第2次才是实际的POST请求……
    
    </summary>
    
      <category term="vuejs" scheme="https://lxchuan12.github.io/categories/vuejs/"/>
    
    
      <category term="vuejs" scheme="https://lxchuan12.github.io/tags/vuejs/"/>
    
  </entry>
  
  <entry>
    <title>chrome跨域设置</title>
    <link href="https://lxchuan12.github.io/2016/08/11/20160811-chrome-settings/"/>
    <id>https://lxchuan12.github.io/2016/08/11/20160811-chrome-settings/</id>
    <published>2016-08-11T14:55:38.000Z</published>
    <updated>2016-08-11T15:46:44.843Z</updated>
    
    <content type="html"><![CDATA[<p>今天用vuejs,与后端联调,发现用localhost或者本机ip访问本地资源，和后端接口资源，没有数据，google发现是chrome的安全机制，不允许跨域……<a id="more"></a></p>
<p>解决方案：<br>浏览器版本：chrome 52。<br>1、在桌面找到chrome浏览器快捷图标并点击鼠标右键的属性一栏。(或者任务栏选中chrome右击——google chrome右击属性)</p>
<p>2、在属性页面中的目标输入框里加上   –args –disable-web-security.–args可省略。</p>
<p>3、点击应用和确定后关闭属性页面，并打开chrome浏览器即可。</p>
<p>使用本机ip地址加端口号，访问本地资源。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天用vuejs,与后端联调,发现用localhost或者本机ip访问本地资源，和后端接口资源，没有数据，google发现是chrome的安全机制，不允许跨域……
    
    </summary>
    
      <category term="调试技巧" scheme="https://lxchuan12.github.io/categories/%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="chrome" scheme="https://lxchuan12.github.io/tags/chrome/"/>
    
  </entry>
  
  <entry>
    <title>清除IE下input的默认叉</title>
    <link href="https://lxchuan12.github.io/2016/08/10/20160810-ms-clear/"/>
    <id>https://lxchuan12.github.io/2016/08/10/20160810-ms-clear/</id>
    <published>2016-08-10T15:00:38.000Z</published>
    <updated>2016-08-10T15:50:19.919Z</updated>
    
    <content type="html"><![CDATA[<p>IE10下的Input Text和谷歌下面的 input search 一旦输入内容，会在最右端出现一个叉号，点击后，内容就会自动清空，input password有小眼睛，点击显示密码。看似方便，其实有些场景并不需要，需要写代码清除掉……<a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">/*--清除谷歌浏览器下的 text 叉号*/</div><div class="line"></div><div class="line">input::-webkit-text-cancel-button&#123;</div><div class="line">    display: none;</div><div class="line">&#125; </div><div class="line">input[type=text]::-ms-clear&#123;</div><div class="line">    display: none;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">/*--清除IE下的 search 叉号*/</div><div class="line"></div><div class="line">/*当然如果想清除所有的input的话 ，只需把[type=search]去掉即可。*/</div><div class="line"></div><div class="line">input::-webkit-search-cancel-button&#123;</div><div class="line">    display: none;</div><div class="line">&#125; </div><div class="line"></div><div class="line">input[type=search]::-ms-clear&#123;</div><div class="line">    display: none;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* 小眼睛 */</div><div class="line">input[type=password]::-ms-reveal&#123;</div><div class="line">    display:none;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>待完善……</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;IE10下的Input Text和谷歌下面的 input search 一旦输入内容，会在最右端出现一个叉号，点击后，内容就会自动清空，input password有小眼睛，点击显示密码。看似方便，其实有些场景并不需要，需要写代码清除掉……
    
    </summary>
    
      <category term="css" scheme="https://lxchuan12.github.io/categories/css/"/>
    
    
      <category term="css" scheme="https://lxchuan12.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>line-height学习笔记</title>
    <link href="https://lxchuan12.github.io/2016/08/08/20160808-line-height/"/>
    <id>https://lxchuan12.github.io/2016/08/08/20160808-line-height/</id>
    <published>2016-08-08T15:28:23.000Z</published>
    <updated>2016-08-09T15:09:26.569Z</updated>
    
    <content type="html"><![CDATA[<p>line-height<br>看似简单，其实还是有挺多不知道的奥妙。比如line-height:300%,line-height:3,有什么不同……<a id="more"></a></p>
<h2 id="形式化语法"><a href="#形式化语法" class="headerlink" title="形式化语法"></a>形式化语法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">normal | &lt;number&gt; | &lt;length&gt; | &lt;percentage&gt;</div></pre></td></tr></table></figure>
<h2 id="取值"><a href="#取值" class="headerlink" title="取值"></a>取值</h2><h3 id="normal"><a href="#normal" class="headerlink" title="normal"></a>normal</h3><p>取决于用户代理。桌面浏览器（包括火狐浏览器）使用默认值，约为1.2，这取决于元素的 font-family。</p>
<h3 id=""><a href="#" class="headerlink" title=""></a><number></number></h3><p>所用的值是无单位数值<number>乘以元素的 font size。计算出来的值与使用数值指定的一样。大多数情况下，使用这种方法设置line-height是首选方法，在继承情况下不会有异常的值。    </number></p>
<h3 id="-1"><a href="#-1" class="headerlink" title=""></a><length></length></h3><p>指定<length>  用于计算 line box 的高度。查看<length> 获取可能的单位。</length></length></p>
<h3 id="-2"><a href="#-2" class="headerlink" title=""></a><percentage></percentage></h3><p>与元素自身的字体大小有关。计算出的值是给定的百分比值乘以元素计算出的字体大小。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta charset=&quot;utf-8&quot;/&gt;</div><div class="line">&lt;title&gt;line-height&lt;/title&gt;</div><div class="line">&lt;style type=&quot;text/css&quot;&gt;</div><div class="line">p&#123;margin:10px;background:#ddd;&#125;</div><div class="line">p+p&#123;margin-left:40px;&#125;</div><div class="line"></div><div class="line">body&#123;font-size:30px;&#125;</div><div class="line"></div><div class="line">.m-demo&#123;line-height:40px;&#125;</div><div class="line">.m-demo p&#123;background:#ddd;&#125;</div><div class="line">.m-demo .p1&#123;line-height:3em;&#125;</div><div class="line">.m-demo .p2&#123;line-height:300%;&#125;</div><div class="line">.m-demo .p3&#123;line-height:3;&#125;</div><div class="line"></div><div class="line">.m-demo2&#123;line-height:300%;&#125;</div><div class="line">.m-demo2 p&#123;background:#fbb;&#125;</div><div class="line">.m-demo2 .p1&#123;font-size:16px;&#125;</div><div class="line"></div><div class="line">.m-demo3&#123;line-height:3;&#125;</div><div class="line">.m-demo3 p&#123;background:#0dd;&#125;</div><div class="line">.m-demo3 .p1&#123;font-size:16px;&#125;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;div class=&quot;m-demo&quot;&gt;</div><div class="line">    &lt;p&gt;行高：line-height:40px;&lt;/p&gt;</div><div class="line">    &lt;p class=&quot;p1&quot;&gt;行高：line-height:3em;&lt;/p&gt;</div><div class="line">    &lt;p class=&quot;p2&quot;&gt;行高：line-height:300%;&lt;/p&gt;</div><div class="line">    &lt;p class=&quot;p3&quot;&gt;行高：line-height:3;&lt;/p&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div class=&quot;m-demo2&quot;&gt;</div><div class="line">    &lt;p&gt;行高：line-height:300%;&lt;/p&gt;</div><div class="line">    &lt;p class=&quot;p1&quot;&gt;字体大小：font-size:16px;&lt;/p&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div class=&quot;m-demo3&quot;&gt;</div><div class="line">    &lt;p&gt;行高：line-height:3;&lt;/p&gt;</div><div class="line">    &lt;p class=&quot;p1&quot;&gt;字体大小：font-size:16px;&lt;/p&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<h2 id="自己的理解："><a href="#自己的理解：" class="headerlink" title="自己的理解："></a>自己的理解：</h2><p>1、normal由浏览器决定，一般是1.1到1.2之间，1.14左右。</p>
<p>2、最近遇到，安卓浏览器显示placeholder 垂直不居中，去掉line-height即可。或者line-height:normal。</p>
<p>3、font-size:30px;line-height:3em;(90px),<br>line-height:300px;(90px),<br>line-height:3;(90px)<br>百分比和数字的区别：number是直接继承。（推荐使用无单位数值给line-height赋值）<br>比如：m-demo2行高是90px;m-demo3行高是48px;</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/line-height" target="_blank" rel="external">参见：MDN line-height</a><br><a href="css.doyoe.com">参见：CSS3在线手册</a><br><a href="http://www.ayqy.net/doc/css2-1/visudet.html#propdef-line-height" target="_blank" rel="external">参见：css2.1规范</a></p>
<h3 id="感悟，多查规范，看MDN。善用google搜索。"><a href="#感悟，多查规范，看MDN。善用google搜索。" class="headerlink" title="感悟，多查规范，看MDN。善用google搜索。"></a>感悟，多查规范，看MDN。善用google搜索。</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;line-height&lt;br&gt;看似简单，其实还是有挺多不知道的奥妙。比如line-height:300%,line-height:3,有什么不同……
    
    </summary>
    
      <category term="CSS" scheme="https://lxchuan12.github.io/categories/CSS/"/>
    
    
      <category term="CSS" scheme="https://lxchuan12.github.io/tags/CSS/"/>
    
  </entry>
  
</feed>
