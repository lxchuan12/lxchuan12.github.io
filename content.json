{"meta":{"title":"轩辕Rowboat的博客","subtitle":"前端路上 | PPT爱好者 | 所知甚少，唯善学。","description":"轩辕Rowboat，某世界闻名的陶瓷大学2016届毕业生，目前在杭州从事前端开发工作，也是一枚PPT爱好者。常以轩辕Rowboat为名混迹于江湖。","author":"轩辕Rowboat","url":"https://lxchuan12.github.io"},"pages":[{"title":"tags","date":"2016-08-29T14:57:25.000Z","updated":"2016-08-29T14:58:46.027Z","comments":false,"path":"tags/index.html","permalink":"https://lxchuan12.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"正则表达式知识点","slug":"20160922-RegExp","date":"2016-09-22T15:48:12.000Z","updated":"2016-09-28T16:00:47.904Z","comments":true,"path":"2016/09/22/20160922-RegExp/","link":"","permalink":"https://lxchuan12.github.io/2016/09/22/20160922-RegExp/","excerpt":"正则表达式(RegExp)什么是正则表达式1.1 什么叫“正则”–-规则、模式–强大的字符串匹配工具……有待整理","text":"正则表达式(RegExp)什么是正则表达式1.1 什么叫“正则”–-规则、模式–强大的字符串匹配工具……有待整理1.2 正则的写法–new RegExp(“a”,”ig”),需要传参只能用这种方案。–/a/ 正则表达式常用方法2.1 test-字符串判断–返回真假–正则.test(字符串)–例子：是否有不是数字的字符2.2 search字符串搜索–返回出现的位置–字符串.search(正则)–忽略大小写：i——ignore2.3 match获取匹配的项目,–返回数组–量词：+–全局匹配：g——global–例子：找出所有数字2.4 replace替换所有匹配–返回替换后的字符串–字符串.replace(正则,想替换的)–例子：敏感词过滤–匹配子项–例子：日期格式化 正则表达式字符类3.1 任意字符-[abc]–例子：o[usb]t——obt、ost、out3.2 范围-[a-z]、[0-9]–例子：id[0-9]——id0、id53.3 排除-[^a]–例子：o[^0-9]t——oat、o?t、o t3.4 组合-[a-z0-9A-Z]实例：偷小说过滤HTML标签–自定义innerText方法 转义字符转义字符.（点）——任意字符\\d、\\w、\\s 、\\b（单词边界）\\D、\\W、\\S 、\\B\\1 重复子项例子–获取class元素–找重复项最多的字符和个数 量词5.1 什么是量词出现的次数{n,m}，至少出现n次，最多m次例子：查找QQ号5.2 常用量词{n,} 至少n次 任意次 {0,}？ 零次或一次 {0,1} 一次或任意次{1,}{n} 正好n次正则收尾^ 开始$ 结束例子–是不是QQ号–去掉前后空格 常用正则例子高级表单校验匹配中文：[\\u4e00-\\u9fa5]行首行尾空格：^\\s|\\s$Email：^\\w+@[a-z0-9]+(.[a-z]+){1,3}$ 网址：[a-zA-z]+://[^\\s]*QQ号：[1-9][0-9]{4,9}邮政编码：[1-9]\\d{5}身份证：[1-9]\\d{14}|[1-9]\\d{17}|[1-9]\\d{16}x 正则与面向对象把方法包在一个空间里有人管他叫——命名空间在公司里，把同一类方法，包在一起JSON的使用把之前的方法，包在一起","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://lxchuan12.github.io/categories/JavaScript/"}],"tags":[{"name":"RegExp","slug":"RegExp","permalink":"https://lxchuan12.github.io/tags/RegExp/"}],"keywords":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://lxchuan12.github.io/categories/JavaScript/"}]},{"title":"gitflow工作流","slug":"20160920-gitflow workflow","date":"2016-09-20T09:30:32.000Z","updated":"2016-09-27T15:06:56.001Z","comments":true,"path":"2016/09/20/20160920-gitflow workflow/","link":"","permalink":"https://lxchuan12.github.io/2016/09/20/20160920-gitflow workflow/","excerpt":"记得今年6月份参加了一次coding技术小馆杭州站的活动，讲的就是git和gitflow相关的。讲师当场也写代码。那是第一次gitflow工作流。那时在想我什么时候也能在舞台上讲开发技术……","text":"记得今年6月份参加了一次coding技术小馆杭州站的活动，讲的就是git和gitflow相关的。讲师当场也写代码。那是第一次gitflow工作流。那时在想我什么时候也能在舞台上讲开发技术……今天就碰到一个关于gitflow工作流的问题。使用sourceTree软件时，建立工作流。一般来说，是切换到master上。再建立工作流。我不小心，直接在develop分支上建了工作流。切换到master分支上。再打hotfix(修复补丁)时，发现无法成功。 谷歌搜索发现解决方案： 1、找到项目当前文件夹中的.git/config，把配置文件中的gitflow*相关的全部删除。2、关闭再重新打开SourceTree。3、重新在master上建立工作流，再打hotfix。发现成功了。 参考链接：Git 工作流程Git Flow 在团队中的最佳实践 – SourceTree的使用Smart branching with SourceTree and Git-flow","categories":[{"name":"git","slug":"git","permalink":"https://lxchuan12.github.io/categories/git/"}],"tags":[{"name":"git","slug":"git","permalink":"https://lxchuan12.github.io/tags/git/"}],"keywords":[{"name":"git","slug":"git","permalink":"https://lxchuan12.github.io/categories/git/"}]},{"title":"camelCase()转驼峰方法实现","slug":"20160915-camelCase","date":"2016-09-15T09:30:32.000Z","updated":"2016-09-15T10:28:03.036Z","comments":true,"path":"2016/09/15/20160915-camelCase/","link":"","permalink":"https://lxchuan12.github.io/2016/09/15/20160915-camelCase/","excerpt":"今天中秋节，放假三天。看zeptojs文档时，看到camelCase()转驼峰的方法，就想着也不难，就自己实现了一遍……","text":"今天中秋节，放假三天。看zeptojs文档时，看到camelCase()转驼峰的方法，就想着也不难，就自己实现了一遍……12345678910function camelCase_1(str)&#123; var i=1, arr = str.split(&apos;-&apos;), len = str.split(&apos;-&apos;).length; var result = arr[0]; for(;i&lt;len;i++)&#123; result += arr[i].substring(0,1).toUpperCase()+arr[i].substring(1); &#125; return result;&#125; 再看下jquery实现方案：123456//str.replace(/^-ms-/,&apos;ms-&apos;)是有IE下有，-ms-前缀的，比如转换成msTransform，而其他转换成首字母大写，如：WebkitTransformfunction camelCase_2(str)&#123; return str.replace(/^-ms-/,&apos;ms-&apos;).replace(/-([\\da-z])/gi,function(all,letter)&#123; return letter.toUpperCase(); &#125;);&#125; 再看zeptojs实现方案：12345//zepto.js实现方式：没处理-ms-，兼容性IE10+，但依旧有很多IE10依旧要加-ms-前缀的css3属性。为啥zeptojs没实现呢，难道还没碰到这个bug？//并且，空字符串写toUpperCase()依旧是空字符串。所以不需要写三目运算。function camelCase_3(str)&#123; return str.replace(/-+(.)?/g, function(match, chr)&#123; return chr ? chr.toUpperCase() : &apos;&apos; &#125;)&#125; 测试：12345678var webkitstr = &apos;-webkit-transfrom&apos;;var msstr = &apos;-ms-transfrom&apos;;console.log(camelCase_1(webkitstr));//WebkitTransfromconsole.log(camelCase_1(msstr)); //MsTransfromconsole.log(camelCase_2(webkitstr)); //WebkitTransfromconsole.log(camelCase_2(msstr)); //msTransfromconsole.log(camelCase_3(webkitstr));//WebkitTransfromconsole.log(camelCase_3(msstr)); //MsTransfrom 看到这里，其实很想给zepto提pull request的。但还是没有提。 小结：分析jquery/zeptojs源码，发现能学到很多。","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://lxchuan12.github.io/categories/JavaScript/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://lxchuan12.github.io/tags/JavaScript/"},{"name":"jquery","slug":"jquery","permalink":"https://lxchuan12.github.io/tags/jquery/"},{"name":"zepto","slug":"zepto","permalink":"https://lxchuan12.github.io/tags/zepto/"}],"keywords":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://lxchuan12.github.io/categories/JavaScript/"}]},{"title":"window.location-浏览器定位和导航","slug":"20160912-window.location","date":"2016-09-12T14:55:32.000Z","updated":"2016-09-12T15:33:32.117Z","comments":true,"path":"2016/09/12/20160912-window.location/","link":"","permalink":"https://lxchuan12.github.io/2016/09/12/20160912-window.location/","excerpt":"平时用window.location.href比较多。但却经常会忽略window.location下的其他属性……","text":"平时用window.location.href比较多。但却经常会忽略window.location下的其他属性……并且很多时候需要对链接问号后面字符串做处理，一般使用split()分割，再取。而实际上，有window.location.search可以获取。一图胜千言url: 统一资源定位符 (Uniform Resource Locator, URL)href: 当前页面的urlprotocol: 协议hostname: 主机名port: 端口号host: 主机名+端口号pathname: 当前页面的路径和文件名","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://lxchuan12.github.io/categories/JavaScript/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://lxchuan12.github.io/tags/JavaScript/"},{"name":"BOM","slug":"BOM","permalink":"https://lxchuan12.github.io/tags/BOM/"}],"keywords":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://lxchuan12.github.io/categories/JavaScript/"}]},{"title":"jQuery的几种写法探析","slug":"20160911-Several-writing-of-jquery","date":"2016-09-11T13:41:23.000Z","updated":"2016-09-11T13:55:03.057Z","comments":true,"path":"2016/09/11/20160911-Several-writing-of-jquery/","link":"","permalink":"https://lxchuan12.github.io/2016/09/11/20160911-Several-writing-of-jquery/","excerpt":"写法一：123$(function()&#123; //code here&#125;);","text":"写法一：123$(function()&#123; //code here&#125;); 写法二：123$(document).ready(function()&#123; //code here&#125;); 写法三：123$().ready(function()&#123; //code here&#125;) 默认参数就是document，所以可以省略不写。写法四：123(function($)&#123; //code here&#125;)(jQuery); 这种写法的最大好处是形成闭包。在内部定义的函数和变量只能在此范围内有效。形成是否函数函数、私有变量的概念。不会与其他类库，框架产生冲突。以上四种方法都是同一个意思，一般来说使用写法一比较多。此外，1234567$(window).load = function()&#123;&#125;//等价于：window.onload = function()&#123; //code here&#125; (JS中的事件，不加on，比如单击事件：click,双击事件：dblclick) window.onload = function(){}与$(funtion(){})两者的区别是：$(funtion(){})：1、在DOM加载完成后就可以可以对DOM进行操作。一般情况一个页面响应加载的顺序是：域名解析-加载html-加载js和css-加载图片和视频等其他信息。那么Dom Ready应该在“加载js和css”和“加载图片等其他信息”之间，就可以操作Dom了。2、能多次使用，按序执行。window.onload = function(){}：1、在网页中所有元素(包括元素的所有关联文件)完全加载到浏览器后才执行，即JavaScript 此时可以访问网页中的所有元素。2、不能多次使用，后者会覆盖前者。","categories":[{"name":"jQuery","slug":"jQuery","permalink":"https://lxchuan12.github.io/categories/jQuery/"}],"tags":[{"name":"jQuery","slug":"jQuery","permalink":"https://lxchuan12.github.io/tags/jQuery/"}],"keywords":[{"name":"jQuery","slug":"jQuery","permalink":"https://lxchuan12.github.io/categories/jQuery/"}]},{"title":"CSS3 媒体查询media","slug":"20160909-CSS3-@media","date":"2016-09-09T12:50:42.000Z","updated":"2016-09-09T13:20:44.079Z","comments":true,"path":"2016/09/09/20160909-CSS3-@media/","link":"","permalink":"https://lxchuan12.github.io/2016/09/09/20160909-CSS3-@media/","excerpt":"CSS3 媒体查询media，其实CSS2也有media，只是基本不用……","text":"CSS3 媒体查询media，其实CSS2也有media，只是基本不用……1234567891011@media only screen and (max-width:375px)&#123; .box&#123; background:#f00!important; /*加上！important才有效。*/ &#125;&#125;.box&#123; width:100px; height:100px; background:#000;&#125; 媒体查询@media需要配合meta标签使用才有效。简版：1&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;&gt; 完整版：1&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no, minimal-ui&quot;&gt; 其中minimal-ui表示参考链接：iOS 7.1的Safari为meta标签新增minimal-ui属性，在网页加载时隐藏地址栏与导航栏iOS 8 removed “minimal-ui” viewport property, are there other “soft fullscreen” solutions?取值：123456789@media screen and (max-width:320px)&#123; /*视窗宽度&lt;=320px*/&#125;@media screen and (min-width:769px)&#123; /*视窗宽度&gt;=769px*/&#125;@media screen and (min-width:769px) and (max-width:1000px)&#123; /*769px&lt;=视窗宽度&lt;=1000px*/&#125; 几道判断题：1、媒体查询条件中，（max-width:320px）表示的是：A. 当视窗宽度小于等于320px时。2、要做响应式网站，就必须设置viewportA. √3、device-width是viewport的默认宽度B、×4、viewport的默认宽度就是屏幕的水平分辨率B、×","categories":[{"name":"css3","slug":"css3","permalink":"https://lxchuan12.github.io/categories/css3/"}],"tags":[{"name":"css3","slug":"css3","permalink":"https://lxchuan12.github.io/tags/css3/"},{"name":"media","slug":"media","permalink":"https://lxchuan12.github.io/tags/media/"}],"keywords":[{"name":"css3","slug":"css3","permalink":"https://lxchuan12.github.io/categories/css3/"}]},{"title":"我是如何踏上前端这条路的","slug":"20160907-How-do-I-set-foot-on-the-front-end-of-the-road","date":"2016-09-07T13:48:12.000Z","updated":"2016-09-26T15:05:25.735Z","comments":true,"path":"2016/09/07/20160907-How-do-I-set-foot-on-the-front-end-of-the-road/","link":"","permalink":"https://lxchuan12.github.io/2016/09/07/20160907-How-do-I-set-foot-on-the-front-end-of-the-road/","excerpt":"感觉最近我是如何XXX的这类标题挺火的。杭州举办G20峰会，9月1日~7日，放假7天，带了本《ES6 标准入门》回家。在火车上看了几集《微微一笑很倾城》，让我回忆起大学生活。就想着下次返杭的时候可以在火车上，写篇文章记录下，自己的前端学习之路。","text":"感觉最近我是如何XXX的这类标题挺火的。杭州举办G20峰会，9月1日~7日，放假7天，带了本《ES6 标准入门》回家。在火车上看了几集《微微一笑很倾城》，让我回忆起大学生活。就想着下次返杭的时候可以在火车上，写篇文章记录下，自己的前端学习之路。1、刚好可以对现在大四迷茫的学弟学妹们，有些指引。2、还可以借此回忆下大学生活。3、锻炼自己写长文的逻辑能力。当然，学习是座大山，人们沿着不同的路登山，分享着自己看到的风景，别人不一定看得到你看到的风景，体会得了你的心情。 接触前端2012年，那年大一，只记得上学期参加了四个社团，参加社团的各种活动，比较忙，另外自己收集一些电子书放到我那一点都不智能的手机上看。下学期，我所在的社团计算机协会（后文简称计协），当时教网页制作（嗯，那时不叫前端开发），当然我报名去参加了。比我们大一级的学长用着Dreamweaver软件 给我们教学，超链接，图片，音乐，视频，FLASH等。总之感觉很有趣。也要我们做出一些作品，交作业。但那时我并没有电脑。所以就没做。 江西省网页制作与设计技能大赛大二任职计协会长，举办各类活动。也没怎么学习前端开发之类的知识。学习方面好像也就是平时上上课而已，再就是学习电脑方面的技巧，帮助别人解决电脑问题，为此也写了挺多这类技术文章。比如：【教程】Ｕ盘、硬盘安装原版win7、8.1、10系统,近期上网拨号客户端出现拨号异常、711错误解决方案。在大学，懂点电脑，会装几个软件，重装个系统，在别人眼中就会被看做是大神，并且很受欢迎。后来实在忙，就写了篇文章：对不起，我不能帮你修电脑了转眼间，就到了2014年4月（大二下学期），我所在的信息学院，组织参加省级网页大赛，同时派老师给予培训指导。这时，老师N每周四（或五）给我们上了几周课，主要讲HTML和CSS，还给我们他录制的视频，当时觉得老师好厉害。后来让我们出作品，我们就找设计（陶美）学院的学生给我们设计网页视觉稿。虽然她们学的是设计，但也不是很懂网页设计这块。于是我就自己参照一个视觉比较好的网站，自己仿照着写了一个。当时还是比较忙，只有晚上有时间，所以总共八个页面，好像写了将近10天。主要用了HTML，CSS，js，jquery。现在放在github上，点击可以访问，时尚影楼,那时并不是很懂js和jquery。后来比赛结果出来了，竟然是省级一等奖。其实一等奖有挺多的。这次网页赛，我们学校获得了很多奖项。大二末，图书馆一老师找到我们，想让我们暑假回去学点PHP，开学好让我们上手，帮他做项目。我们信息学院邀请了10级计科的H学长，给我们这些迷茫的学弟学妹开了一次经验分享会，说到腾讯招人的标准。因为他就是课题组研发部的一员。说到课题组研发部的各种好处，跟着里面的老师L学习PHP，学到60％就够找好工作了。总之意思就是要进课题组学习。大二暑假，家里没网，我就在学校，下载好各种PHP学习资源，暑假就在家看着PHP相关的视频等，一套PHP视频也是100多集，基本看完了，也写了些代码。当时也学了javascript，一套JS视频100多集没有看完。其实到后来基本都忘了。另外，大二暑假，线上面试了乔布简历，通过成为了乔布简历校园大使。 加入课题组研发部大三上学期，卸任了计协会长，本以为这是大学最后一个职务，谁知这只是第一个。同学A，同学B跟着图书馆老师做PHP的项目。而我此时看着没啥事，就玩起了PPT，新媒体运营，又相继任职了校园网络中心团队的队长（关于这个我也写了篇文章谈一谈校园网管这一工作，一直任职到大四上学期）。校友总会志愿团常务团长（后来由于组织性质缘故，2014年11月，不到两个月就默认退出了），乔布简历江西省副主管，那时班上竞选班干，班主任说我们计协会长卸任了怎么不竞选一个职务。我说不用了，我并没有说还有这么多职务。上学期刚开始不久，我们专业老师也邀请了11级的学长学姐分享他们的一些经验。后来我们成立了信管学习小组，规定时间来主教自习。主要是为了学习网站开发。但后来效果不佳，我也较忙，就散了。PPT水平在涨进，主要体现在我做的优秀班集体评选PPT上，传说就是凭借这次展示，让学校领导记住了做PPT还有这么好的人，后来（2015年5月13日）就被找去做更名大学工作汇报PPT，再后来就有了这张图，也写了挺多关于PPT制作的文章，比如：要做PPT，一直找不到资源？。开发水平并没有多少涨进。大三下学期，我和同学A，B一起加入了课题组学习，做任务。5月19日，成立了移动互联协会，又任职移动互联协会首届会长，一直任职到大四上学期。成立这社团，主要目的就是为了培养开发，后来给学弟学妹们培训HTML，CSS,和PPT，PS等，感觉他们真幸福。现在回想起来，在课题组，老师好像真的没给我什么实质性的开发任务。好像就让我做些与开发不那么相关的事情。可能是我个人原因。4月，九家培训机构到我们信息学院做宣讲，他们的目的很明显，就是招人去培训。下午跟千锋教育的老师聊了挺久，主要是了解了他们机构是如何授课等。当然，他们极力希望我能去他们的好程序员班，但我肯定不会考虑培训。当时听完，晚上总结了一张图。 到学期末（6月），让我和同学A一起做设计学院网站（给了设计稿），用迅时CMS搭建网站后台（Asp.net）。主要是我做。那时相当于隔了一年多，要重新捡起HTML，CSS，JS。连引入的jquery和自己写的JS顺序都能弄反，连Jquery的选项卡都写不来。熬了几次夜，在同学A和老师的指导下。终于完成了。这时，我开始感受到，就业压力，我究竟要往哪条路走。是新媒体运营（PPT），或者是PHP开发，还是前端开发？如果走新媒体运营（PPT），那么要开个微信公众号，写PPT相关文章，PPT演界网卖模板，等等。 真正意义上开始学前端开发大三暑假，课题组业务需求，我和同学A，B，都留在课题组做任务学习。前期我还在学PHP，后来室友L，在杭州暑假实习，他说前端也比较火。刚好又在网易云课堂，看到网易推出前端微专业第二期。价格一千多。虽然对于在更名大学办公室做PPT和做网络中心团队队长赚了少许钱的我来说，不是很贵，但上学期报名了驾照（3K+），所以就买不起了。但那时我就确定了方向，前端开发，因为入门容易，另外在PHP方面根本没做什么项目。要走前端，原生JavaScript必学！于是在知乎上看到说智能社的JS视频《精通JavaScript开发》，这套课程不错。那时就没多想，先看完这套课程再学其他的。很多时候，你想学的太多，都在同时学，往往效果不好，而是先学什么再学什么。记得那时，晚上9点断网，他们在打牌，我回去后在看下载好的视频。学完这条课程后，感觉有些提升，至少熟练了下写代码。学完这套后，就在慕课网学习其他前端相关知识。8月，课题组组建了一支团队，参加互联网+大赛，当时学校比较重视这次比赛，召集参赛者在学校机房培训，解决吃住问题（在教工食堂吃了10多天），我一不小心又成了临时班长，协助就业处的老师处理相关事务。我还负责团队赛项目计划书的撰写和PPT制作。后来我们团队依次进入校赛，省赛，国赛，最后10月份到吉林大学（吉林长春）参赛国赛，获得国赛金奖（前30）和最佳创意奖，载誉归来之时，学校领导在校门口接我们，学校党委书记说奖励我们团队10万元。刚开始以为不会分到没多少钱。后来就有钱买课程了。双十一期间，就买了网易云课堂的前端开发微专业第三期，系统的学习前端开发。另外还买了妙味课堂的视频课程学习。有人说，你要学知识，把市面上这类书都买下来，看懂并消化。那你肯定就有提升了。11月，老师N让我做学工处的网站，同样是Asp.net的后台。这次就没做多久，也没做设计学院网站那么痛苦。12月，开始做毕业设计，是用php+mySql做第二课堂管理系统。1月5日，提前答辩通过。 大四寒假开发水平那么差的我，当然是不忘抓住这段时间，提升自己的。看妙味课堂的视频。学着前端微专业，看课程，查资料，讨论区讨论，做作业，改作业。提交作业有截止日期。感觉这段时间挺充实的。也在考虑大四下学期是否去学校，校内实习，还是去公司实习。老师L是推荐我去公司实习，能学挺多。虽然11月份参加了学校的招聘会，有公司问我用过Bootstrap吗，我说没有。后来有几家公司，叫我去实习，我没去。主要是以下考虑：1、公司前端团队好，实习则好。不好，不如自学。2、自己不足还有很多，希望能继续学完前端开发微专业，获得优秀学员，也许能进好一点的公司。3、毕竟不考研，以后有的是工作时间，还不如继续享受下最后一学期的校园生活。 大四最后一个学期开学伊始，我和同学A，B都没去公司实习，重新来到了课题组。刚去不久，老师N就推荐我去南昌，算是实习，说有搞PHP的愿意带一个人一起做项目。后来委婉的拒绝了。因为已经不想走PHP开发路线，想走前端开发路线。但本学期，老师交给我的任务依旧是PHP开发的。第二课堂管理系统（PHP+MySql，CI框架）。因为不是很赶，我就前端微专业，百度前端技术学院任务，（妙味课堂的vip视频）三线并行。4月初，完成了前端微专业大作业，获得优秀学员证书。在学校，上班是996（早上9点上班，晚上9点下班，中午休息1-2小时）。周日老师不在办公室，而我一般在（同学A，B不在）。因为我太Low了，所以只好多花点时间学习。有段时间，都是24点前提交完代码，才去刷牙洗脸睡觉。晚上躺着睡前还在牛客网刷题，或者看视频，或者看前端开发类电子书。 面试，入职杭州一家移动互联网公司4月底投简历，5月劳动节一过，我和同学A就来杭州面试。我求职还算顺利，面试了3天，共9家。有的给了offer，就选了一家我认为比较合适的。6月1日入职杭州一家移动互联网公司，公司使用花名，我自己挑选了一个，叫轩辕。于是把网上各种昵称，改成了轩辕Rowboat。 轩辕Rowboat由来：轩辕(公司花名)。Rowboat，英文名，拆解：Row(音：罗)boat(意：小船(音：小川))。其他还挺喜欢这花名的，轩辕（剑），剑未佩妥，出门便是江湖。 公司使用的技术主要有：HTML5，模板语言（velocity，thymeleaf,handlebarsjs，underscorejs工具库等），CSS3，Less，Sass，JS，JQuery，zeptojs，bootstrap，angularjs，vuejs，git，gulp，webpack，ES6等（React，nodejs暂时没用到）。不知不觉就写了挺多字，感觉一路走来，在网易云课堂购买了付费课程（office，前端微专业等）两千左右（已赚回），当没有时间，有钱时，可以选择付费学习，投资学习，回报很大。技术提升需要一定的过程，脚踏实地走好每一步，先定好一个个小目标，然后去一一实现。看过很多前端大神成长路线，也是从刚开始啥都不会，一步一步变成前端大神的。","categories":[{"name":"自我成长","slug":"自我成长","permalink":"https://lxchuan12.github.io/categories/自我成长/"}],"tags":[{"name":"self-growth","slug":"self-growth","permalink":"https://lxchuan12.github.io/tags/self-growth/"},{"name":"前端","slug":"前端","permalink":"https://lxchuan12.github.io/tags/前端/"}],"keywords":[{"name":"自我成长","slug":"自我成长","permalink":"https://lxchuan12.github.io/categories/自我成长/"}]},{"title":"由JavaScript一道面向对象题引发的思考","slug":"20160830-js-oop-prototype-constructor","date":"2016-08-30T15:09:00.000Z","updated":"2016-08-31T05:13:33.817Z","comments":true,"path":"2016/08/30/20160830-js-oop-prototype-constructor/","link":"","permalink":"https://lxchuan12.github.io/2016/08/30/20160830-js-oop-prototype-constructor/","excerpt":"一个前端QQ群里，有人提问，关于面向对象的……我看完后解答了","text":"一个前端QQ群里，有人提问，关于面向对象的……我看完后解答了123456789101112131415161718function Person()&#123; this.name = &quot;lxchuan12&quot;;&#125;var rowboat = new Person();Person.prototype.age=20;Person.prototype=&#123;a:1,b:2&#125;;//Person.prototype.constructor = Person;console.log(rowboat.name);//&quot;lxchuan12&quot;console.log(rowboat.age);//20console.log(rowboat.a);//undefinedconsole.log(rowboat.b);//undefinedconsole.log(rowboat);console.log(Person.prototype.name);//undefinedconsole.log(Person.prototype.age);//undefinedconsole.log(Person.prototype.a);//1console.log(Person.prototype.b);//2console.log(Person.prototype.constructor);//function Object() &#123; [native code] &#125;console.log(Person.prototype);//Object &#123;a: 1, b: 2&#125; 问题：他不明白，为什么rowboat.age为20。但Person.prototype.age却为undefined。 解答：我把代码在jsbin运行后，为之解答。Person.prototype={a:1,b:2};这种写法是赋值，与Person.prototype.age=20;写法不同，不经意间把constructor指向原本为Person的，改为了Object（一般来说，需要修正指向。Person.prototype.constructor = Person）。相当于prototype下只有a,b两个值了。所以Person.prototype.age则是undefined。但rowboat.age是原型上的，可以找到，所以是20。所谓原型查找：查找的是构造器查找的原型，构造器是指向一个function(){},里面没有a和b. 参考资料：《JavaScript高级程序设计》——对象学习笔记 小结：学习js面对对象编程相关知识,对了解js语言很有帮助。另外，有人说，能写组件，做组件开发说明达到了中级水平。","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://lxchuan12.github.io/categories/JavaScript/"}],"tags":[{"name":"js","slug":"js","permalink":"https://lxchuan12.github.io/tags/js/"},{"name":"oop","slug":"oop","permalink":"https://lxchuan12.github.io/tags/oop/"}],"keywords":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://lxchuan12.github.io/categories/JavaScript/"}]},{"title":"sass基本特性-运算","slug":"20160829-Sass-basic-characteristics-of-computing","date":"2016-08-29T13:26:28.000Z","updated":"2016-08-29T15:16:14.266Z","comments":true,"path":"2016/08/29/20160829-Sass-basic-characteristics-of-computing/","link":"","permalink":"https://lxchuan12.github.io/2016/08/29/20160829-Sass-basic-characteristics-of-computing/","excerpt":"CSS中目前只有calc()能做运算，但是在Sass中，可以做各种数学运算……","text":"CSS中目前只有calc()能做运算，但是在Sass中，可以做各种数学运算…… 1、加法123.box&#123; width: 20px + 8in;&#125; 编译出来的CSS:123.box &#123; width: 788px;&#125; 1in = 96px; 当em,rem等相对当前字体，于px在一起不能运算，会报错，如:123.box&#123; width: 20px + 8em;&#125; 不过如果其中一个不同单位，那么会以另一个带单位的为准，如：1234567.box&#123; width: 20px + 8;&#125;.box2&#123; width: 20em + 8;&#125; 编译出来的CSS为:1234567.box &#123; width: 28px;&#125;.box2 &#123; width: 28em;&#125; 2、减法12345678$container: 960px;$sidebar-width: 220px;$gap-width: 20px;.content&#123; width: $container - $sidebar-width - $gap-width; float: left;&#125; 编译出来的CSS：123456.content &#123; width: 720px; float: left; &#125; 减法和加法一样，不支持em,rem等相对当前字体大小的单位与px进行计算。 3、乘法 乘法运算时，只需要其中一个带单位即可，如果都带有单位会报错,如:123.box&#123; width: 20px * 20px&#125; 编译时会报错。 而:123.box&#123; width: 20px * 20;&#125; 编译出来的CSS：123.box&#123; width: 400px;&#125; 与加减法一样，不同类型的单位运算时会报错。 4、除法 Sass的乘法运算规则也适用于除法运算，不过除法运算有特殊之处，因为”/”符号在CSS中已经作为一种符号使用，因此在Sass中直接使用”/”作为处好时，将不会生效，编译时既不会报错，也不会得到我们想要的效果。 如:123.box&#123; width: 100px / 2;&#125; 编译出来的CSS:123.box &#123; width: 100px / 2;&#125; 要修正这个文字，只需要给运算的外面添加一对小括号即可。123.box&#123; width: (100px / 2);&#125; 编译出来的CSS为:123.box &#123; width: 50px;&#125; 除了小括号以外，如果除了 “/” 外，还有其它的运算符号，那么也会被当作除号看待。123.box &#123; width: 100px / 2 + 20px; &#125; 编译出来的CSS为：123.box &#123; width: 70px;&#125; 另外，如果是用变量进行除法运算，”/”也会自动被识别为除法。 如:12345$width: 960px;.col &#123; width: $width / 10;&#125; 编译出来的CSS为:1234.col &#123; width: 96px; &#125; 综合上述，”/ ”符号被当作除法运算符时有以下几种情况： 如果数值或它的任意部分是存储在一个变量中或是函数的返回值。如果数值被圆括号包围。如果数值是另一个数学表达式的一部分。在除法运算时，如果两个值带有相同的单位值时，除法运算之后会得到一个不带单位的数值。 关于单位计算的问题，同物理倒是非常像。 如果不想记”/”的规则，那么在想作为除法使用是，加上一个括号即可。 5、颜色运算 所有的运算都支持颜色值。如:123p &#123; color: #010203 + #040506;&#125; 编译出的CSS为:123p &#123; color: #050709;&#125; 同样颜色值也支持乘法运算:123p &#123; color: #010203 * 2;&#125; 编译出来的CSS:123p &#123; color: #020406;&#125; 运算规则和二进制乘法相同，依次与每一位相乘。个人觉得颜色值的运算意义不是很大。 6、字符运算 在Sass中可以用”+”号对字符串进行拼接，如:123456789$content: &quot;Hello&quot; + &quot; &quot; + &quot;Sass!&quot;;.box&#123; &amp;:after&#123; content: $content; &#125; &amp;:before&#123; content: &quot; #&#123;$content&#125; &quot;; &#125;&#125; 编译出来的CSS为:123456.box:after &#123; content: &quot;Hello Sass!&quot;; &#125;.box:before &#123; content: &quot; Hello Sass! &quot;; &#125; 除了在变量中做字符连接运算之外，还可以直接通过 +，把字符连接在一起：1234567div&#123; cursor: e + -resize;&#125;span&#123; cursor: &quot;e&quot; + &quot;-resize&quot;;&#125; 编译出来的CSS为:1234567div &#123; cursor: e-resize;&#125;span &#123; cursor: &quot;e-resize&quot;; &#125; ==注意==:如果有引号的字符串被添加了一个没有引号的字符串 （也就是，带引号的字符串在 + 符号左侧）， 结果会是一个有引号的字符串。 同样的，如果一个没有引号的字符串被添加了一个有引号的字符串 （没有引号的字符串在 + 符号左侧）， 结果将是一个没有引号的字符串。 也就是说始终与加号左边的保持一致:1234p:before &#123; content: &quot;Foo &quot; + Bar; font-family: sans- + &quot;serif&quot;;&#125; 编译出来的CSS为:1234p:before &#123; content: &quot;Foo Bar&quot;; font-family: sans-serif; &#125; 根据慕课网sass入门篇整理","categories":[{"name":"sass","slug":"sass","permalink":"https://lxchuan12.github.io/categories/sass/"}],"tags":[{"name":"sass","slug":"sass","permalink":"https://lxchuan12.github.io/tags/sass/"}],"keywords":[{"name":"sass","slug":"sass","permalink":"https://lxchuan12.github.io/categories/sass/"}]},{"title":"js如何判断对象为空","slug":"20160827-Judge-null-object-by-javascript","date":"2016-08-27T14:46:23.000Z","updated":"2016-08-29T15:46:51.607Z","comments":true,"path":"2016/08/27/20160827-Judge-null-object-by-javascript/","link":"","permalink":"https://lxchuan12.github.io/2016/08/27/20160827-Judge-null-object-by-javascript/","excerpt":"vuejs项目中，遇到要判断data中的对象是否为空……","text":"vuejs项目中，遇到要判断data中的对象是否为空……12345678910111213141516171819202122var vm = new Vue(&#123; el:&apos;#demo&apos;, data:&#123; msg:&apos;hello&apos;, ms:&#123;&#125; &#125;, created ()&#123; let that = this; console.log(that.ms); console.log(that.msg); console.log(that.ms === null);//false if(that.ms)&#123;//true console.log(1);//1, &#125;; console.log(that.ms === undefined);//false for(var attr in that.ms)&#123; console.log(attr); console.log(&apos;2&apos;); &#125; //console.log(&apos;3&apos;); &#125;&#125;); 点击查看详情vuejs jquery有工具方法$.isEmptyObject(),查看源码发现这样实现的。1234567isEmptyObject:function(obj)&#123; var name; for(name in obj)&#123; return false; &#125; return true;&#125; 这是利用了for in无法循环到系统自带的属性值。123456789//比如：function Watch()&#123;&#125;//Watch.prototype.constructor = Watch;//系统自己生成。写出来这句也无法用for in循环到。for (var attr in Watch.prototype)&#123; console.log(&apos;can not console&apos;);//无法输出。&#125;//如果自己写,则可以输出show.Watch.prototype.show = function()&#123;&#125; 这时想起了js中数组遍历for与for in区别(强烈建议不要使用for in遍历数组)$.isPlainObject()方法：判断”纯粹的对象”，就是该对象是通过”{}”或”new Object”创建的。$.isPlainObject( document.location ) ); // false(在IE中返回true) 参考资料：汤姆大叔博客 小结:js一切皆为对象，了解面对对象编程很有好处。能研究一遍jquery源码,定能更上一层楼。","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://lxchuan12.github.io/categories/JavaScript/"}],"tags":[{"name":"vuejs","slug":"vuejs","permalink":"https://lxchuan12.github.io/tags/vuejs/"},{"name":"js","slug":"js","permalink":"https://lxchuan12.github.io/tags/js/"}],"keywords":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://lxchuan12.github.io/categories/JavaScript/"}]},{"title":"iPhone safari可以通过访问链接来打开微信","slug":"20160820-safari-open-wechat","date":"2016-08-20T15:35:26.000Z","updated":"2016-08-22T15:33:42.579Z","comments":true,"path":"2016/08/20/20160820-safari-open-wechat/","link":"","permalink":"https://lxchuan12.github.io/2016/08/20/20160820-safari-open-wechat/","excerpt":"今天发现：iPhone safari可以可以通过访问链接来打开微信。而安卓手机不行。不多说，直接show the code……","text":"今天发现：iPhone safari可以可以通过访问链接来打开微信。而安卓手机不行。不多说，直接show the code…… 1234let ua = window.navigator.userAgent.toLowerCase();if ((ua.indexOf(&apos;iphone&apos;)&gt;-1)&amp;&amp;(ua.indexOf(&apos;safari&apos;)&gt;-1))&#123; window.location.href = &apos;weixin:http://weixin.qq.com&apos;;&#125;","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://lxchuan12.github.io/categories/JavaScript/"}],"tags":[{"name":"js","slug":"js","permalink":"https://lxchuan12.github.io/tags/js/"},{"name":"wechat","slug":"wechat","permalink":"https://lxchuan12.github.io/tags/wechat/"}],"keywords":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://lxchuan12.github.io/categories/JavaScript/"}]},{"title":"(转)一种代码量更少的(micro clearfix)清除浮动的hack","slug":"20160819-css-micro clearfix-hack","date":"2016-08-19T15:24:12.000Z","updated":"2016-08-19T15:36:30.924Z","comments":true,"path":"2016/08/19/20160819-css-micro clearfix-hack/","link":"","permalink":"https://lxchuan12.github.io/2016/08/19/20160819-css-micro clearfix-hack/","excerpt":"clearfix hack做为一种无需借助额外标签清除浮动的方法已经人尽皆知了，本文给出一种优化方案，可以进一步减少所需css的数量……","text":"clearfix hack做为一种无需借助额外标签清除浮动的方法已经人尽皆知了，本文给出一种优化方案，可以进一步减少所需css的数量…… Demo: Micro clearfix hack Known support: Firefox 3.5+, Safari 4+, Chrome, Opera 9+, IE 6+ micro clearfix基于 Thierry Koblentz’s “clearfix reloadedreloaded优化而来，适用于现代浏览器（modern browsers） 下面是micro clearfix的代码片段1234567891011.cf:before,.cf:after &#123; content: &quot; &quot;; display: table; &#125;.cf:after &#123; clear: both;&#125;.cf &#123; *zoom: 1;&#125; “micro clearfix”生成伪类元素，并将其display属性设置为table，这样就会创建一个匿名table-cell，同时生成了新的BFC，这样意味着:before伪类会阻止上边距折叠，:after伪类用于清除浮动，好处是不用隐藏产生的内容了，所需要的css代码就变少了。 为了清除浮动包含:before选择器是没必要的，但是:before的加入可以阻止top-margins折叠，这样有两个好处： 同其他使用BFC方式清除浮动一样，确保了视觉上的一致，例如使用overflow:hiddenIE 6/7中使用zoom:1 时，确保了视觉上的一致N.B.: 有一个细节：IE 6/7中在新的BFC中浮动元素的下边距是不会包含在内的，进一步的描述可以看这里： Better float containment in IE using CSS expressions.content:” “的使用避免了一个Opera的bug，如果contenteditable属性同时出现在元素中时，这个bug会在待清除元素周围生成空格。一种可选的修复方案是使用 font:0/0 a，多谢Sergio Cerrutti测试出这个bug 转载于：一种代码量更少的(micro clearfix)清除浮动的hack 英文版：A new micro clearfix hack，转载标明出处，谢谢！","categories":[{"name":"CSS","slug":"CSS","permalink":"https://lxchuan12.github.io/categories/CSS/"}],"tags":[{"name":"css","slug":"css","permalink":"https://lxchuan12.github.io/tags/css/"},{"name":"clearfix","slug":"clearfix","permalink":"https://lxchuan12.github.io/tags/clearfix/"}],"keywords":[{"name":"CSS","slug":"CSS","permalink":"https://lxchuan12.github.io/categories/CSS/"}]},{"title":"vuejs生态，自顶而下学习","slug":"20160818-chat","date":"2016-08-18T15:24:12.000Z","updated":"2016-09-30T15:59:10.755Z","comments":true,"path":"2016/08/18/20160818-chat/","link":"","permalink":"https://lxchuan12.github.io/2016/08/18/20160818-chat/","excerpt":"由于我git比较活跃，有幸收到大搜车前端leader芋头（前端乱炖网站创始人，颜文字APP）的邮件，并与之交流。","text":"由于我git比较活跃，有幸收到大搜车前端leader芋头（前端乱炖网站创始人，颜文字APP）的邮件，并与之交流。小芋头君的知乎主页.大搜车前端团队博客. 大概整理： 1、自顶而下学习，看vuejs文章，熟悉其生态圈，怎么产生的，解决了什么问题。不是会写，就行。很多人看完vuejs教程都会写。 比如angularjs，双向绑定，vuejs是单向绑定，虽然也可以双向绑定。2、自我管理，自我规划，自我提升。综合能力。3、追新，有些人工作了几年就不学新东西，这样没提升。4、前端工程化，（打包工具只是其中一小部分）。5、目前重要的不是学ES6，而是把基础夯实。 这让我想起：知乎上一个提问大学毕业做前端工作感觉最近遇到了瓶颈，不知道该如何提升自己？ 作者：林獺链接：https://www.zhihu.com/question/49164656/answer/114625869来源：知乎著作权归作者所有，转载请联系作者获得授权。 首先，正视自己的能力。前端的新技术，不是门坎较低、就是给人一种容易掌握的错觉。Less/Sass 不谈，你学了 Angular，懂得 data-binding、router 等背后的实现原理吗？你虽会用 Node 搭建一个本地 server，但懂得 I/O 流程、HTTP 和操作系统知识吗？你能不诉诸书本和搜索引擎，写出几个 JS 设计模式和继承模式吗？你能完全脱离 jQuery 来操纵 DOM 和 Ajax 吗？你知道怎么写 CSS 选择器能让浏览器解释速度最快吗？你会在开发过程中，下意识地追求 HTTP 请求最少吗？……如果你不能的话，那就需要重新审视自己，是否被一时的自我成就和满足所障目，而忘却了技术最重要的永远是基础。如果你能的话，恭喜你，你已经不止是合格的前端了。这样的话，你要怎么做才能走出平阳、找到归宿呢？我的建议是积累经验——积累工作和项目的经验，闲时继续学习并深入新技术。你的工作效率高、闲时多，这是好事。我毕业后第一份工作也是如此，领导缺乏技术嗅觉，技术路线过时老旧。我是这么应对的：凭越发娴熟的技能，加快工作速度，换来学习的时间。接着，主动把你的新技能移植到公司项目中。例如 Gulp、Less/Sass，都是开发环境下的利器，开发环境下你想怎么用就怎么用，外人只看到生产代码；甚或 Angular——遇到独力负责的中重量级项目，主动考虑此类 MVC 框架的可行性；有时不是项目和领导不允许使用新框架，而是自己不愿走出舒适圈、缺乏实践自信。（业余时间，用你的 Gulp、Angular 写一些个人项目放在 GitHub 上，配以 Node mock server 甚至 Redis 数据库，有助理解前后端交互和数据库的组织，也增加面试的资本。）当你「利用」这个公司，积累了新老技术的实践经验后，便是另谋高就的时机了。你的简历不仅会有上述技能，还会有「一力为旧公司引入任务构建、工作流等新技术」之类的 impressing 字眼。在投简历时，开始考虑实质回报以外更深层的东西。你可以询问对方，贵团队的前端技术栈为何，未来的技术规划为何。因为接下来的新工作，在你的职场生涯中，是最能影响你的技术修炼的——你将第一次名正言顺地学习技术、并将其付诸实践、甚至有同样技术路线的同事大牛带领。对比上一家，事半功倍。 小结：坚持学习，自我提升；重视基础！努力争取能进好团队，学习更快。","categories":[{"name":"自我成长","slug":"自我成长","permalink":"https://lxchuan12.github.io/categories/自我成长/"}],"tags":[{"name":"self-growth","slug":"self-growth","permalink":"https://lxchuan12.github.io/tags/self-growth/"}],"keywords":[{"name":"自我成长","slug":"自我成长","permalink":"https://lxchuan12.github.io/categories/自我成长/"}]},{"title":"弹窗（modal）垂直水平居中","slug":"20160817-modal-center","date":"2016-08-17T15:07:15.000Z","updated":"2016-08-17T15:58:06.795Z","comments":true,"path":"2016/08/17/20160817-modal-center/","link":"","permalink":"https://lxchuan12.github.io/2016/08/17/20160817-modal-center/","excerpt":"今天发现{margin:0 auto}竟然能使固定定位fixed(脱离文档流）（在chrome手机模拟器和chrome浏览器）水平居中。在我安卓手机(4.2.2)不行。后来改成{margin-left:-定宽/2}，于是在安卓手机也可以了……","text":"今天发现{margin:0 auto}竟然能使固定定位fixed(脱离文档流）（在chrome手机模拟器和chrome浏览器）水平居中。在我安卓手机(4.2.2)不行。后来改成{margin-left:-定宽/2}，于是在安卓手机也可以了…… 弹窗垂直水平居中：方法1：12345678910.modal&#123; position:fixed; width:250px; height:100px; background:#ececec; left:50%; top:50%; margin-left:-125px; margin-top:-50px;&#125; 小结:fixed，支持到IE7，IE6不支持。modal定宽定高。 方法2：12345678910.modal&#123; position:fixed; width:250px; height:100px; background:#ececec; left:50%; top:50%; -webkit-transform:translate(-50%,-50%); transform:translate(-50%,-50%);&#125; 小结:不支持IE9+，modal不需定宽定高，手机端可用。（发现如果有其他的transform，好像先执行其他的，在移动到中心。）另外，发现{margin:0 auto}:12345678910.modal&#123; position:fixed; width:250px; left:0; right:0; top:40%; bottom:auto; margin:0 auto; background:#ececec;&#125; 竟然能使固定定位fixed(脱离文档流）（在chrome手机模拟器和chrome浏览器）水平居中。在我安卓手机(4.2.2)不行。后来改成{margin-left:-定宽/2}，于是在安卓手机也可以了","categories":[{"name":"css","slug":"css","permalink":"https://lxchuan12.github.io/categories/css/"}],"tags":[{"name":"css","slug":"css","permalink":"https://lxchuan12.github.io/tags/css/"}],"keywords":[{"name":"css","slug":"css","permalink":"https://lxchuan12.github.io/categories/css/"}]},{"title":"js手机号码正则表达式","slug":"20160816-reg-phone-num","date":"2016-08-16T15:06:16.000Z","updated":"2016-08-20T15:51:20.899Z","comments":true,"path":"2016/08/16/20160816-reg-phone-num/","link":"","permalink":"https://lxchuan12.github.io/2016/08/16/20160816-reg-phone-num/","excerpt":"前端做了手机号的限制，但有的号码通过了前端验证，但依旧数据无法保存成功，但又没错误提示。与后台联调发现，原来是后端也做了限制，还不一样……","text":"前端做了手机号的限制，但有的号码通过了前端验证，但依旧数据无法保存成功，但又没错误提示。与后台联调发现，原来是后端也做了限制，还不一样……1.前端验证var reg = /^1\\d{10}$/; 2.后端验证var reg = /^1[3|4|5|7|8][0-9]{9}$/; //验证规则不知其合理性，普适性，于是搜索了下。 3.最后采用： var reg = /^1\\d{10}$/; //验证规则var phoneNum = ‘18296821923’;//手机号码var flag = reg.test(phoneNum); //true 4.参考资料：JS最新手机号码检验正则表达式","categories":[{"name":"js","slug":"js","permalink":"https://lxchuan12.github.io/categories/js/"}],"tags":[{"name":"js","slug":"js","permalink":"https://lxchuan12.github.io/tags/js/"},{"name":"reg","slug":"reg","permalink":"https://lxchuan12.github.io/tags/reg/"}],"keywords":[{"name":"js","slug":"js","permalink":"https://lxchuan12.github.io/categories/js/"}]},{"title":"new Date()的浏览器兼容性问题","slug":"20160813-tip-js-new-date","date":"2016-08-13T14:03:29.000Z","updated":"2016-08-14T15:30:20.655Z","comments":true,"path":"2016/08/13/20160813-tip-js-new-date/","link":"","permalink":"https://lxchuan12.github.io/2016/08/13/20160813-tip-js-new-date/","excerpt":"兼容性问题var date = new Date(‘2016-08-13 13:25:50’).getTime();这种chrome下没问题，但ie和firefox下是NaN,在Safari下也有问题……","text":"兼容性问题var date = new Date(‘2016-08-13 13:25:50’).getTime();这种chrome下没问题，但ie和firefox下是NaN,在Safari下也有问题…… var date = new Date(‘2016-08-13 13:25:50’).getTime(); 这么写的时候所有浏览器都没有问题。 所以遇到兼容的时候：这样就可以将上面那种格式yyyy-MM-dd改为yyyy/MM/dd 再去转换 var date = new Date((‘2016-08-13 13:25:50’).replace(new RegExp(“-“,”g”),”/“)).getTime() 另外：+new Date()=== new Date().getTime();true.123456789101112&lt;div id=&quot;d&quot;&gt;&lt;/div&gt;&lt;div id=&quot;getTime&quot;&gt;&lt;/div&gt;&lt;div id=&quot;type&quot;&gt;&lt;/div&gt;&lt;script type=&quot;text/javascript&quot;&gt; var d1 = document.getElementById(&apos;d&apos;); var getTime1 = document.getElementById(&apos;getTime&apos;); var type1 = document.getElementById(&apos;type&apos;); var date = new Date(&apos;2016-08-13 13:25:50&apos;); d.innerHTML = date.toString(); d.innerHTML = date.getTime(); type1.innerHTML = typeof date.toString();&lt;/script&gt; 参考文章：JS原生Date类型方法的一些冷知识javascript中new Date()的浏览器兼容性问题js new Date(“2016-07-01 08:00:00”) 格式在IE内核浏览器中显示NaN的问题","categories":[{"name":"javascript","slug":"javascript","permalink":"https://lxchuan12.github.io/categories/javascript/"}],"tags":[{"name":"date","slug":"date","permalink":"https://lxchuan12.github.io/tags/date/"},{"name":"javascript","slug":"javascript","permalink":"https://lxchuan12.github.io/tags/javascript/"}],"keywords":[{"name":"javascript","slug":"javascript","permalink":"https://lxchuan12.github.io/categories/javascript/"}]},{"title":"vue js两次请求","slug":"20160812-vue-route request","date":"2016-08-12T14:59:16.000Z","updated":"2016-08-16T15:06:06.197Z","comments":true,"path":"2016/08/12/20160812-vue-route request/","link":"","permalink":"https://lxchuan12.github.io/2016/08/12/20160812-vue-route request/","excerpt":"当使用vue-resource发送注册的POST请求时，Fiddler捕获到了2次请求，第1次是由浏览器发送的OPTIONS预请求，第2次才是实际的POST请求……","text":"当使用vue-resource发送注册的POST请求时，Fiddler捕获到了2次请求，第1次是由浏览器发送的OPTIONS预请求，第2次才是实际的POST请求……这和使用$.ajax时是不一样的，因为$.ajax会将非GET请求的Content-Type设置为application/x-www-form-urlencoded，而vue-resource发送POST请求的Content-Type为application/json;charset=UTF-8。 1.全局启用：1Vue.http.options.emulateJSON = true 2.局部启用启用了emulateJSON选项后，使得POST请求的Content-Type变为application/x-www-form-urlencoded1234this.$http.post(this.registerUrl, this.registerModel ,&#123; emulateJSON : true&#125;) .then( (response) =&gt; &#123; this.msg = ‘注册成功！‘ &#125;) 3.参考资料：参考官方文档$.ajax和vue-resource实现OAuthVue.js——vue-resource全攻略","categories":[{"name":"vuejs","slug":"vuejs","permalink":"https://lxchuan12.github.io/categories/vuejs/"}],"tags":[{"name":"vuejs","slug":"vuejs","permalink":"https://lxchuan12.github.io/tags/vuejs/"}],"keywords":[{"name":"vuejs","slug":"vuejs","permalink":"https://lxchuan12.github.io/categories/vuejs/"}]},{"title":"chrome跨域设置","slug":"20160811-chrome-settings","date":"2016-08-11T14:55:38.000Z","updated":"2016-08-11T15:46:44.843Z","comments":true,"path":"2016/08/11/20160811-chrome-settings/","link":"","permalink":"https://lxchuan12.github.io/2016/08/11/20160811-chrome-settings/","excerpt":"今天用vuejs,与后端联调,发现用localhost或者本机ip访问本地资源，和后端接口资源，没有数据，google发现是chrome的安全机制，不允许跨域……","text":"今天用vuejs,与后端联调,发现用localhost或者本机ip访问本地资源，和后端接口资源，没有数据，google发现是chrome的安全机制，不允许跨域…… 解决方案：浏览器版本：chrome 52。1、在桌面找到chrome浏览器快捷图标并点击鼠标右键的属性一栏。(或者任务栏选中chrome右击——google chrome右击属性) 2、在属性页面中的目标输入框里加上 –args –disable-web-security.–args可省略。 3、点击应用和确定后关闭属性页面，并打开chrome浏览器即可。 使用本机ip地址加端口号，访问本地资源。","categories":[{"name":"调试技巧","slug":"调试技巧","permalink":"https://lxchuan12.github.io/categories/调试技巧/"}],"tags":[{"name":"chrome","slug":"chrome","permalink":"https://lxchuan12.github.io/tags/chrome/"}],"keywords":[{"name":"调试技巧","slug":"调试技巧","permalink":"https://lxchuan12.github.io/categories/调试技巧/"}]},{"title":"清除IE下input的默认叉","slug":"20160810-ms-clear","date":"2016-08-10T15:00:38.000Z","updated":"2016-08-10T15:50:19.919Z","comments":true,"path":"2016/08/10/20160810-ms-clear/","link":"","permalink":"https://lxchuan12.github.io/2016/08/10/20160810-ms-clear/","excerpt":"IE10下的Input Text和谷歌下面的 input search 一旦输入内容，会在最右端出现一个叉号，点击后，内容就会自动清空，input password有小眼睛，点击显示密码。看似方便，其实有些场景并不需要，需要写代码清除掉……","text":"IE10下的Input Text和谷歌下面的 input search 一旦输入内容，会在最右端出现一个叉号，点击后，内容就会自动清空，input password有小眼睛，点击显示密码。看似方便，其实有些场景并不需要，需要写代码清除掉……1234567891011121314151617181920212223242526/*--清除谷歌浏览器下的 text 叉号*/input::-webkit-text-cancel-button&#123; display: none;&#125; input[type=text]::-ms-clear&#123; display: none;&#125;/*--清除IE下的 search 叉号*//*当然如果想清除所有的input的话 ，只需把[type=search]去掉即可。*/input::-webkit-search-cancel-button&#123; display: none;&#125; input[type=search]::-ms-clear&#123; display: none;&#125;/* 小眼睛 */input[type=password]::-ms-reveal&#123; display:none;&#125; 待完善……","categories":[{"name":"css","slug":"css","permalink":"https://lxchuan12.github.io/categories/css/"}],"tags":[{"name":"css","slug":"css","permalink":"https://lxchuan12.github.io/tags/css/"}],"keywords":[{"name":"css","slug":"css","permalink":"https://lxchuan12.github.io/categories/css/"}]},{"title":"line-height学习笔记","slug":"20160808-line-height","date":"2016-08-08T15:28:23.000Z","updated":"2016-08-09T15:09:26.569Z","comments":true,"path":"2016/08/08/20160808-line-height/","link":"","permalink":"https://lxchuan12.github.io/2016/08/08/20160808-line-height/","excerpt":"line-height看似简单，其实还是有挺多不知道的奥妙。比如line-height:300%,line-height:3,有什么不同……","text":"line-height看似简单，其实还是有挺多不知道的奥妙。比如line-height:300%,line-height:3,有什么不同…… 形式化语法1normal | &lt;number&gt; | &lt;length&gt; | &lt;percentage&gt; 取值normal取决于用户代理。桌面浏览器（包括火狐浏览器）使用默认值，约为1.2，这取决于元素的 font-family。 所用的值是无单位数值乘以元素的 font size。计算出来的值与使用数值指定的一样。大多数情况下，使用这种方法设置line-height是首选方法，在继承情况下不会有异常的值。 指定 用于计算 line box 的高度。查看 获取可能的单位。 与元素自身的字体大小有关。计算出的值是给定的百分比值乘以元素计算出的字体大小。12345678910111213141516171819202122232425262728293031323334353637383940414243&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;/&gt;&lt;title&gt;line-height&lt;/title&gt;&lt;style type=&quot;text/css&quot;&gt;p&#123;margin:10px;background:#ddd;&#125;p+p&#123;margin-left:40px;&#125;body&#123;font-size:30px;&#125;.m-demo&#123;line-height:40px;&#125;.m-demo p&#123;background:#ddd;&#125;.m-demo .p1&#123;line-height:3em;&#125;.m-demo .p2&#123;line-height:300%;&#125;.m-demo .p3&#123;line-height:3;&#125;.m-demo2&#123;line-height:300%;&#125;.m-demo2 p&#123;background:#fbb;&#125;.m-demo2 .p1&#123;font-size:16px;&#125;.m-demo3&#123;line-height:3;&#125;.m-demo3 p&#123;background:#0dd;&#125;.m-demo3 .p1&#123;font-size:16px;&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=&quot;m-demo&quot;&gt; &lt;p&gt;行高：line-height:40px;&lt;/p&gt; &lt;p class=&quot;p1&quot;&gt;行高：line-height:3em;&lt;/p&gt; &lt;p class=&quot;p2&quot;&gt;行高：line-height:300%;&lt;/p&gt; &lt;p class=&quot;p3&quot;&gt;行高：line-height:3;&lt;/p&gt;&lt;/div&gt;&lt;div class=&quot;m-demo2&quot;&gt; &lt;p&gt;行高：line-height:300%;&lt;/p&gt; &lt;p class=&quot;p1&quot;&gt;字体大小：font-size:16px;&lt;/p&gt;&lt;/div&gt;&lt;div class=&quot;m-demo3&quot;&gt; &lt;p&gt;行高：line-height:3;&lt;/p&gt; &lt;p class=&quot;p1&quot;&gt;字体大小：font-size:16px;&lt;/p&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 自己的理解：1、normal由浏览器决定，一般是1.1到1.2之间，1.14左右。 2、最近遇到，安卓浏览器显示placeholder 垂直不居中，去掉line-height即可。或者line-height:normal。 3、font-size:30px;line-height:3em;(90px),line-height:300px;(90px),line-height:3;(90px)百分比和数字的区别：number是直接继承。（推荐使用无单位数值给line-height赋值）比如：m-demo2行高是90px;m-demo3行高是48px; 参见：MDN line-height参见：CSS3在线手册参见：css2.1规范 感悟，多查规范，看MDN。善用google搜索。","categories":[{"name":"CSS","slug":"CSS","permalink":"https://lxchuan12.github.io/categories/CSS/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://lxchuan12.github.io/tags/CSS/"}],"keywords":[{"name":"CSS","slug":"CSS","permalink":"https://lxchuan12.github.io/categories/CSS/"}]},{"title":"(转)30个你必须记住的CSS选择器","slug":"20160807-The 30 CSS Selectors you Must Memorize","date":"2016-08-07T15:10:41.000Z","updated":"2016-09-08T13:57:25.487Z","comments":true,"path":"2016/08/07/20160807-The 30 CSS Selectors you Must Memorize/","link":"","permalink":"https://lxchuan12.github.io/2016/08/07/20160807-The 30 CSS Selectors you Must Memorize/","excerpt":"概述也许你了解了基本的 id,class和descendant选择器，并且整天都在调用，如果是这样的话，那你正在错过拥有灵活性更大的选择器。这篇文章里面提到的大部分选择器都是在CSS3标准下的，所以它们只能在相应最新版本的浏览器中才能生效，你完全应该把这些都记在你聪明的脑袋里面……","text":"概述也许你了解了基本的 id,class和descendant选择器，并且整天都在调用，如果是这样的话，那你正在错过拥有灵活性更大的选择器。这篇文章里面提到的大部分选择器都是在CSS3标准下的，所以它们只能在相应最新版本的浏览器中才能生效，你完全应该把这些都记在你聪明的脑袋里面…… 1. ** { margin: 0; padding: 0; } 在我们看比较高级的选择器之前，应该认识下这个众所周知的清空选择器。星号(*)会将页面上所有每一个元素都选到。许多开发者都用它来清空margin和padding。当然你在练习的时候使用这个没问题，但是我不建议在生产环境中使用它。它会给浏览器凭添许多不必要的东西。 *也可以用来选择某元素的所有子元素: #container * { border: 1px solid black; } 它会选中#container下的所有元素。当然，我还是不建议你去使用它。DEMO 兼容性： IE6+ Firefox Chrome Safari Opera 2.#X#container { width: 960px; margin: auto; } 在选择器中使用#可以用id来定位某个元素。大家通常都会这么使用，使用的时候大家还是得相当小心的。 需要问自己一下：我是不是必须要给这个元素来赋值个id来定位它呢？ id选择器是很严格的并且你没办法去复用它。如果可以的话，首先试试用标签名字，HTML5中的新元素，或者是伪类。DEMO 兼容性: IE6+ Firefox Chrome Safari Opera 3. .X.error { color: red; } 这是个class选择器。它跟id选择器不同的是，它可以定位多个元素。当你想对多个元素进行样式修饰的时候就可以使用class。当你要对某个特定的元素进行修饰那就是用id来定位它。DEMO 兼容性: IE6+ Firefox Chrome Safari Opera 4.X Yli a { text-decoration: none; } 下一个常用的就是descendant(后代)选择器(后代指所有后代，儿子、孙子后代等)。如果你想更加具体的去定位元素，你可以使用它。例如，假如，你不需要定位所有的a元素，而只需要定位li标签下的a标签？这时候你就需要使用descendant选择器了。 专家提示：如果你的选择器像X Y Z A B.error这样，那你就错了。时刻都提醒自己，是否真的需要对那么多元素修饰。DEMO 兼容性: IE6+ Firefox Chrome Safari Opera 5.Xa { color: red; } ul { margin-left: 0; } 如果你想定位页面上所有的某标签，不是通过id或者是’class’，这简单，直接使用类型选择器。DEMO 兼容性: IE6+ Firefox Chrome Safari Opera 6.X:visited 和 X:linka:link {color:red;} a:visited {color: purple;} 我们使用:link这个伪类来定位所有还没有被访问过的链接。另外，我们也使用:visited来定位所有已经被访问过的链接。DEMO 兼容性: IE7+ Firefox Chrome Safari Opera 7.X + Yul+p{ color:red; } 这被称作相邻选择符。它将只选择紧贴在X元素之后Y元素。上面的例子，仅每一个ul之后的第一个段落元素的文本为红色。DEMO 兼容性: IE7+ Firefox Chrome Safari Opera 8.X&gt;Ydiv#container &gt; ul{ border :1px solid black; } X Y和X &gt; Y之间的不同点是后者只选择直接子代。例如，考虑如下的标记。 &lt;div id=&quot;container&quot;&gt; &lt;ul&gt; &lt;li&gt; List Item &lt;ul&gt; &lt;li&gt; Child &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; List Item &lt;/li&gt; &lt;li&gt; List Item &lt;/li&gt; &lt;li&gt; List Item &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; 选择符#container &gt; ul将只选择id为container的div的直接子代ul。它不匹配更深层的li的子代的ul。因此，使用子代选择符有性能上的优势。事实上，这同样适用于基于css选择器的javascript引擎。DEMO 兼容性 *IE7+ *Firefox *Chrome *Safari *Opera 9.X~Yul ~ p { color: red; } 这是兄弟选择符和X + Y一样，然而，它没有约束。与相邻选择符（ul + li）仅选择前一个选择符后面的第一个元素比起来，兄弟选择符更宽泛。它会选择，我们上面例子中更在ul后面的任何p元素。DEMO 兼容性 *IE7+ *Firefox *Chrome *Safari *Opera 10.X[title]a[title] { color: green; } 被称为属性选择器，在我们上面的例子里，这只会选择有title属性的锚标签。没有此属性的锚标签将不受影像。但如果你需要更多的特性怎么办呢？呵呵……DEMO 兼容性 *IE7+ *Firefox *Chrome *Safari *Opera 11. X[href=”foo”]a[href=&quot;http://net.tutsplus.com&quot;] { color: #1f6053; /* nettuts green */ } 上面的代码段将给所有href属性为http://net.tutsplus.com的锚标签添加样式；他们将会显示为我们的品牌绿色。所有其他的锚标签将不受影响。 注意我们将href值用引号包裹。记住，当使用javascript的css选择符引擎时也这么做。如果可能的话，尽可能使用css3选择符代替非官方的方法。 这工作的很好，但有点不够灵活。如果链接确实直接连接到Nettus+还好，但是，也许路径是到nettust的相对路径呢？在这种情况下，我们可以使用一点正则表达式语法。 DEMO 兼容性 *IE7+ *Firefox *Chrome *Safari *Opera 12. X[href*=”nettuts”]a[href*=&quot;tuts&quot;] { color: #1f6053; /* nettuts green */ } 来了不是~这就是我们需要的代码。*号指定了包含该属性的值必须包含定义的值。就是说，这句代码包含了href值为 nettuts.com，net.tutsplus.com或者tutsplus.com。记住这个描述过于宽泛，如果是某个锚点标签链接到某个连接中带有tuts非Envato的网站（tutsplus属于Envato旗下网站）呢？因此你需要更多特性来限制，分别使用^和&amp;来限定字符串的开始和结束。DEMO 兼容性 *IE7+ *Firefox *Chrome *Safari *Opera 13. X[href^=”http”]a[href^=&quot;http&quot;] { background: url(path/to/external/icon.png) no-repeat; padding-left: 10px; } 有没有想过某些网站是如何定义一个图标的链接的？我确定你肯定看到过。这些链接很容易让你跳转到另一个网站。使用^(carat)符灰常简单啦。这个符号常常在正则表达式中表示字符串的开始。如果我们想指向所有以”http”开头的”href”属性的锚点的话，我们就可以使用类似于上面的那段代码啦。 注意啦，我们不需要搜索”http://&quot;,完全没必要，因为我们还要包含以https://开头的链接呢。 如果我们想为所有链接到图片的链接定义样式咋办？这种情况下，我们得搜索字符串的结束了不是。DEMO 兼容性 *IE7+ *Firefox *Chrome *Safari *Opera 14. X[href$=”.jpg”]a[href$=&quot;.jpg&quot;] { color: red; } 又来了，我们还是使用正则表达式符号，$(dolor)，来作为字符串的结束标记。这种情况下，我们就会搜索所有url以.jpg为结尾的锚点啦。记住记住这种情况下gif和png格式的图片不会被选择哦。DEMO 兼容性 *IE7+ *Firefox *Chrome *Safari *Opera 15. X[data-*=”foo”]a[data-filetype=&quot;image&quot;] { color: red; } 回顾最近一条，我们如何能包含各种图片类型:png,jpeg,jpg,gif?很容易想到，我们能通过多个选择器来不是，像这样： a[href$=&quot;.jpg&quot;], a[href$=&quot;.jpeg&quot;], a[href$=&quot;.png&quot;], a[href$=&quot;.gif&quot;] { color: red; } 不过，这样很蛋疼，效率极低。另一个解决办法是使用自定义属性。如果我们加了一种自己的 data-filetype 属性给每一个链接到图片的锚点的话呢？&lt;a href=&quot;path/to/image.jpg&quot; data-filetype=&quot;image&quot;&gt; Image Link &lt;/a&gt;这样关联后，我们就能使用标准的属性选择器来指定这些链接啦。看下面：DEMO 兼容性 *IE7+ *Firefox *Chrome *Safari *Opera 16. X[foo~=”bar”]a[data-info~=&quot;external&quot;] { color: red; } a[data-info~=&quot;image&quot;] { border: 1px solid black; } 这儿有个鲜为人知的特殊技巧，绝对让你印象时刻。~(tilda)符，它可以帮助我们指向那些以空格隔开多个值的属性的元素（真拗口，这翻译我自己都看不懂，水平问题）以我们第15条的自定义属性为例，上面的代码中我们创建了 data-info属性，这个属性可以定义以空格分隔的多个值。这样，这个链接本身就是个icon，并且指向的也是一个图片链接，像下面这样。&lt;a href=&quot;path/to/image.jpg&quot; data-info=&quot;external image&quot;&gt; Click Me, Fool &lt;/a&gt;有了这样适当的标记，通过使用 ~ 属性选择器的技巧，我们就可以指向任何具有着两种属性的任何一种啦。 /* Target data-info attr that contains the value &quot;external&quot; */ a[data-info~=&quot;external&quot;] { color: red; } /* And which contain the value &quot;image&quot; */ a[data-info~=&quot;image&quot;] { border: 1px solid black; } 很棒，不是吗？DEMO 兼容性 *IE7+ *Firefox *Chrome *Safari *Opera 17. X:checkedinput[type=radio]:checked { border: 1px solid black; } 这种伪类只会匹配已经被选中的单选元素。就是这么简单。DEMO 兼容性 *IE9+ *Firefox *Chrome *Safari *Opera 18. X:afterinput[type=radio]:checked { border: 1px solid black; } before 和 after 伪类也很蛋疼。貌似人们每天都能找到或者发明一些新办法来有效地使用它们。它们很容易控制选择器周围的内容。很多第一次使用是因为他们需要对clear-fix进行改进。 .clearfix:after { content: &quot;&quot;; display: block; clear: both; visibility: hidden; font-size: 0; height: 0; } .clearfix { *display: inline-block; _height: 1%; } 这个改进使用了:after伪类元素来在元素后增加一个空间，然后清除它。这个牛X的技巧你应该收藏到工具包里，特别是当overflow:hidden方法无能为力的时候。想看看其他创造性的用法：访问我滴创建阴影的窍门 通过Css3选择器的标准说明书，你应该有技巧地使用这些伪类语法——双冒号::。不过为了兼容，浏览器会接受一个双引号。 兼容性 *IE8+ *Firefox *Chrome *Safari *Opera 19. X:hoverdiv:hover { background: #e3e3e3; } 我去，这个你必须懂。典型的官方形式的用户触发伪类。听起来会有点迷惑，不过实际上并非如此。想在用户在某个元素上面悬停时定义个特别的样式？这个属性就是做这个的。 记住啦，较old版本的IE，只能在锚点标签后使用这个hover。 这个选择器你用得最多的情况，估计可能就是在锚点的悬停时加个border-bottom啦。 a:hover { border-bottom: 1px solid black; } 小贴士： border-bottom:1px solid black;比 text-decoration:underline;好看一点哦。（真的？我去） 兼容性 *IE6+ (In IE6, :hover must be applied to an anchor element) *Firefox *Chrome *Safari *Opera 20. X:not(selector)div:not(#container) { color: blue; } not伪类灰常有用。例如我要选择所有的div，除了有id为container的。上面那个代码片段就能完美的实现。如果我想选择除了p以外的所有元素，我可以这么做： *:not(p) { color: green; } DEMO 兼容性 *IE9+ *Firefox *Chrome *Safari *Opera 21. X::pseudoElementp::first-line { font-weight: bold; font-size: 1.2em; } 我们可以使用伪元素（以::为表示）来定义元素的样式。例如第一行，第一个字符，记住啦，这种方法只能应用于同级元素才有效。 伪元素由两个冒号组成：:: 指定p的第一个字符的样式 p::first-letter { float: left; font-size: 2em; font-weight: bold; font-family: cursive; padding-right: 2px; } 这段代码会找到所有段落，然后再从中定义这些段落的第一个字符。这常常使用在仿报纸的文章首字母样式。 指定p的首行样式 p::first-line { font-weight: bold; font-size: 1.2em; } 同样，这个::first-line伪元素会像我们期望的那样，只定义段落的第一行的样式。DEMO 兼容性 *IE6+ *Firefox *Chrome *Safari *Opera 22. X:nth-child(n)li:nth-child(3) { color: red; } 想想那些没法从元素堆中选择元素的日子。nth-child伪类解决了这个问题。请注意 nth-child接收整数和变量，不过不是从0开始的，如果你想选定第二个li，使用 li:nth-child(2).我们甚至使用这个办法来选择任意的子元素。例如，我们可以用 li:nth-child(4n)来完成4为倍数的所有元素的选择。DEMO 兼容性 *IE9+ *Firefox 3.5+ *Chrome *Safari *Opera 23. X:nth-last-child(n)li:nth-last-child(2) { color: red; } 如果我有灰常多的li在ul里面，我只想要最后3个li怎么办？不必使用li:nth-child(397),你可以使用nth-last-child伪类。这种技巧和第六条几乎一样有效，不过两者的不同之处在于它从结束开始收集，用回溯的方式进行。DEMO 兼容性 *IE9+ *Firefox 3.5+ *Chrome *Safari 24. X:nth-of-type(n)ul:nth-of-type(3) { border: 1px solid black; } 你应该有很多时候想要元素类型来选择元素而不是通过孩子。想象一下标记5个无序列表（UL）。如果你想定义第三个ul，并且没有一个唯一的id来找到它，你就可以使用 nth-of-type(3)伪类了。在上面这个代码段中，只有第三个ul才会有黑色的边框。DEMO兼容性 *IE9+ *Firefox 3.5+ *Chrome *Safari 25. X:nth-last-of-type(n)ul:nth-last-of-type(3) { border: 1px solid black; } 没错，我们一样可以使用nth-last-of-type来从结束开始回溯这个选择器，来找到我们想要的元素。 兼容性 *IE9+ *Firefox 3.5+ *Chrome *Safari 26. X:first-childul li:first-child { border-top: none; } 这个结构的伪类让我们可以选择某个元素的第一个子孩子。你通常可以使用这个办法来删除第一个或者最后一个元素的边框。例如，你有一系列的rows，每一个都有border-top 和border-bottom。这种情况下，第一行和最后一行看起来会灰常怪。很多设计师会使用first和last类来弥补这个缺陷。相反，你可以使用这些伪类来解决这些问题。DEMO 兼容性 *IE7+ *Firefox 3.5+ *Chrome *Safari 27. X:last-childul &gt; li:last-child { color: green; } 与first-child相反，last-child会选择父节点的最后一个子节点。 例子 我们建立一些例子来示范这些类的可能的用法。我们会建立一种风格来展示。标记 List Item List Item List Item 没啥特别的，就是一个简单的序列。 CSS ul { width: 200px; background: #292929; color: white; list-style: none; padding-left: 0; } li { padding: 10px; border-bottom: 1px solid black; border-top: 1px solid #3c3c3c; } 这个样式会设置一个背景，删除浏览器默认的ul的padding值，并定义边框给每一个li来提供一点深度。 如上图所示，唯一的问题是最上面的边框和最下面的边框看起来有点儿怪。让我们来使用:first-child和:last-child来解决这个问题。 li:first-child { border-top: none; } li:last-child { border-bottom: none; } 看上图，解决了不是。DEMO 兼容性 *IE9+ *Firefox *Chrome *Safari 是滴，IE8支持 first-child 不过不支持last-child。 28. X:only-childdiv p:only-child { color: red; } 实话说，你很可能会发现你不会经常使用 only-child伪类。尽管如此，它确实有用，你应该需要它。它可以帮助你选择是父节点的独生子（没别的孩子啦）的元素。例如，使用上面的代码，只有是div的唯一子孩子的p段落才会定义其颜色为red。让我们来假定下面的标记。 &lt;div&gt;&lt;p&gt; My paragraph here. &lt;/p&gt;&lt;/div&gt; &lt;div&gt; &lt;p&gt; Two paragraphs total. &lt;/p&gt; &lt;p&gt; Two paragraphs total. &lt;/p&gt; &lt;/div&gt; 这样，第二个div的p标签的内容不会被选中。只有第一个div的p才会被选中。 DEMO 兼容性 *IE9+ *Firefox *Chrome *Safari 29. X:only-of-typeli:only-of-type { font-weight: bold; } 这种结构的伪类有几种灰常聪明的用法。它可以选定在其父节点内没有兄弟节点的元素。例如，我们可以选择只有一个li作为其子孩子的ul。首先，取决于你想怎样完成这一目标。你可以使用 ul li，不过，这回选择所有li元素。唯一的办法是使用only-of-type。 ul &gt; li:only-of-type { font-weight: bold; } DEMO 兼容性 *IE9+ *Firefox 3.5+ *Chrome *Safari 30. X:first-of-typefirst-of-type 伪类可以让你选择该类型的第一个兄弟节点。 一个测试 为了更好地理解它，让我们来测试一下啊。拷贝下面的标记到你的编辑器。 现在，别急着往下读，试试看如何能只选择’LIST ITEM 2’?如果你搞定了（或者放弃了），继续读。 解决办法1 有很多办法能搞定这个测试。我们回顾其中一小部分。以使用first-of-type开始。 ul:first-of-type &gt; li:nth-child(2) { font-weight: bold; } 这个代码段本质上表示，“找到第一个无序列表，然后找到这里面的li，然后，继续使用过滤器直到找到第二个li。 解决办法2 另一个可行的办法是毗邻选择器。 p + ul li:last-child { font-weight: bold; } 在这个方案中，我们找到p的临近节点ul，然后找到ul的li的最后一个孩子。解决办法3 我们可以随心所欲滴选择这些选择器。 ul:first-of-type li:nth-last-child(1) { font-weight: bold; } 这次，我们取到第一个ul，然后找到第一个元素，不过是从最后一个开始数。哈哈。DEMO 兼容性 *IE9+ *Firefox 3.5+ *Chrome *Safari *Opera 结论如果你仍在为解决old浏览器的缺陷而纠结，如IE6。在使用这些新的选择器方面，你仍然需要非常小心。不过，别因为这个阻碍了你对这些新玩意儿的学习。别虐待自己。确保关注这里的兼容性列表。应一方面，你可以使用 Dean Edward’s excellent IE9.js script 来为旧浏览器提供新的选择器支持。（我去。cool）其次，当使用javascript库时，如流行的jQuery，最好尽可能使用这些css3本身的选择器而不是使用库的自定义方法/选择器。这能让你的代码更快哦，因为这些选择器引擎本身就能被浏览器解析，而不是用这些库选择器。感谢阅读，希望你能学到一两个技巧。 #译者注本文为翻译文章，原文为“The 30 CSS Selectors you Must Memorize” 本文转载于颜海镜的博客","categories":[{"name":"CSS","slug":"CSS","permalink":"https://lxchuan12.github.io/categories/CSS/"}],"tags":[{"name":"CSS选择器","slug":"CSS选择器","permalink":"https://lxchuan12.github.io/tags/CSS选择器/"}],"keywords":[{"name":"CSS","slug":"CSS","permalink":"https://lxchuan12.github.io/categories/CSS/"}]},{"title":"最近碰到的兼容性问题","slug":"20160806-tips","date":"2016-08-06T13:12:38.000Z","updated":"2016-08-07T15:32:49.337Z","comments":true,"path":"2016/08/06/20160806-tips/","link":"","permalink":"https://lxchuan12.github.io/2016/08/06/20160806-tips/","excerpt":"","text":"1、transfrom:translate3d(),兼容性:-webkit-安卓4.4+2、删除节点，elem.remove(),安卓4.2.2不支持。解决方案：elem.parentNode.removeChild(elem);","categories":[{"name":"前端开发","slug":"前端开发","permalink":"https://lxchuan12.github.io/categories/前端开发/"}],"tags":[{"name":"前端开发","slug":"前端开发","permalink":"https://lxchuan12.github.io/tags/前端开发/"},{"name":"兼容性","slug":"兼容性","permalink":"https://lxchuan12.github.io/tags/兼容性/"}],"keywords":[{"name":"前端开发","slug":"前端开发","permalink":"https://lxchuan12.github.io/categories/前端开发/"}]},{"title":"搭建hexo博客，记录前端开发","slug":"20160806-hexo","date":"2016-08-06T08:40:38.000Z","updated":"2016-08-20T15:51:54.470Z","comments":true,"path":"2016/08/06/20160806-hexo/","link":"","permalink":"https://lxchuan12.github.io/2016/08/06/20160806-hexo/","excerpt":"虽然有在简书上使用markdown写法发布一些文章，但不是前端相关的，主要是一些电脑技巧，PPT，读书笔记等。早就有想着搭建自己的博客，记录在前端开发的路上学到的知识……","text":"虽然有在简书上使用markdown写法发布一些文章，但不是前端相关的，主要是一些电脑技巧，PPT，读书笔记等。早就有想着搭建自己的博客，记录在前端开发的路上学到的知识……有人说，写博客，不要太在乎有多少阅读量。重要的是，写博客是自己对一些知识的理解，并且能写出来，这本身就是一种整理和成长。其实有记录自己前端开发所学知识，不过是保存在为知笔记上。现在看来，也可以写博客分享出来。 总之，慢慢坚持写博客。","categories":[{"name":"前端开发","slug":"前端开发","permalink":"https://lxchuan12.github.io/categories/前端开发/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://lxchuan12.github.io/tags/hexo/"},{"name":"F2E","slug":"F2E","permalink":"https://lxchuan12.github.io/tags/F2E/"}],"keywords":[{"name":"前端开发","slug":"前端开发","permalink":"https://lxchuan12.github.io/categories/前端开发/"}]}]}